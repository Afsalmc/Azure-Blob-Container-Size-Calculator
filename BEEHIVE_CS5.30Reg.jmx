<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Bee Hive" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_modifier" elementType="Argument">
            <stringProp name="Argument.name">throughput_modifier</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Concurrency configuration (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="number_of_threads" elementType="Argument">
            <stringProp name="Argument.name">number_of_threads</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="number_of_functionalities_run" elementType="Argument">
            <stringProp name="Argument.name">number_of_functionalities_run</stringProp>
            <stringProp name="Argument.value">28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ramp_up_time_mins" elementType="Argument">
            <stringProp name="Argument.name">ramp_up_time_mins</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="load_hold_time_mins" elementType="Argument">
            <stringProp name="Argument.name">load_hold_time_mins</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="number_of_logged_in_users" elementType="Argument">
            <stringProp name="Argument.name">number_of_logged_in_users</stringProp>
            <stringProp name="Argument.value">40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="General variables (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="scheduler_dashboard_date" elementType="Argument">
            <stringProp name="Argument.name">scheduler_dashboard_date</stringProp>
            <stringProp name="Argument.value">2019-12-06</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[QA ENV.] Environment detials and credentials (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">celebration.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">carestackqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">cmastertwo.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_name" elementType="Argument">
            <stringProp name="Argument.name">db_name</stringProp>
            <stringProp name="Argument.value">cmastertwo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">cstacksb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">c4r3sbdb@123$</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[LOAD ENV.] Environment details and credentials (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">dso.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chat_url" elementType="Argument">
            <stringProp name="Argument.name">chat_url</stringProp>
            <stringProp name="Argument.value">chat.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iris_url" elementType="Argument">
            <stringProp name="Argument.name">iris_url</stringProp>
            <stringProp name="Argument.value">iris.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">carestackqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">cstackregvo.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">cloadtestare</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">Carestack@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pms_db_name" elementType="Argument">
            <stringProp name="Argument.name">pms_db_name</stringProp>
            <stringProp name="Argument.value">cstackmwreg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_db_name" elementType="Argument">
            <stringProp name="Argument.name">pateng_db_name</stringProp>
            <stringProp name="Argument.value">cstackpatengmwreg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_server_name" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_server_name</stringProp>
            <stringProp name="Argument.value">cstackaudittrailtest.mysql.database.azure.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_user_name" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_user_name</stringProp>
            <stringProp name="Argument.value">cschatloadtestuser@cstackaudittrailtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_password" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_password</stringProp>
            <stringProp name="Argument.value">p!yL12X5SnNU</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[QA IDP ENV.] Account Configuration (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="idp_url" elementType="Argument">
            <stringProp name="Argument.name">idp_url</stringProp>
            <stringProp name="Argument.value">idp.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain_name" elementType="Argument">
            <stringProp name="Argument.name">domain_name</stringProp>
            <stringProp name="Argument.value">morrisondental</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth_service_url" elementType="Argument">
            <stringProp name="Argument.name">auth_service_url</stringProp>
            <stringProp name="Argument.value">pmsauth.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="env_url" elementType="Argument">
            <stringProp name="Argument.name">env_url</stringProp>
            <stringProp name="Argument.value">morrisondental.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="oppminer_url" elementType="Argument">
            <stringProp name="Argument.name">oppminer_url</stringProp>
            <stringProp name="Argument.value">analytics.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cookie_domain" elementType="Argument">
            <stringProp name="Argument.name">cookie_domain</stringProp>
            <stringProp name="Argument.value">.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[QA ENV.] Environment detials and credentials (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">morrisondental.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.qa1.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">loadtestuser</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">sql-carestack-qa1.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pms_db_name" elementType="Argument">
            <stringProp name="Argument.name">pms_db_name</stringProp>
            <stringProp name="Argument.value">cmastertwo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">readonly_qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">C@6StaRdQa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[LOAD ENV.] Environment details and credentials (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">celebration.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chat_url" elementType="Argument">
            <stringProp name="Argument.name">chat_url</stringProp>
            <stringProp name="Argument.value">chat.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iris_url" elementType="Argument">
            <stringProp name="Argument.name">iris_url</stringProp>
            <stringProp name="Argument.value">iris.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">carestackqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">sql-cs-reg-eus-001.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">admusersql</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">1yM3wM71G08</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pms_db_name" elementType="Argument">
            <stringProp name="Argument.name">pms_db_name</stringProp>
            <stringProp name="Argument.value">cstackps_copy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_db_name" elementType="Argument">
            <stringProp name="Argument.name">pateng_db_name</stringProp>
            <stringProp name="Argument.value">cstackps_copy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_server_name" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_server_name</stringProp>
            <stringProp name="Argument.value">cstackaudittrailtest.mysql.database.azure.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_user_name" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_user_name</stringProp>
            <stringProp name="Argument.value">cschatloadtestuser@cstackaudittrailtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_password" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_password</stringProp>
            <stringProp name="Argument.value">p!yL12X5SnNU</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[IDP ENV.] Account Configuration (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="idp_url" elementType="Argument">
            <stringProp name="Argument.name">idp_url</stringProp>
            <stringProp name="Argument.value">idp.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain_name" elementType="Argument">
            <stringProp name="Argument.name">domain_name</stringProp>
            <stringProp name="Argument.value">celebration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth_service_url" elementType="Argument">
            <stringProp name="Argument.name">auth_service_url</stringProp>
            <stringProp name="Argument.value">pmsauth.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="env_url" elementType="Argument">
            <stringProp name="Argument.name">env_url</stringProp>
            <stringProp name="Argument.value">celebration.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="oppminer_url" elementType="Argument">
            <stringProp name="Argument.name">oppminer_url</stringProp>
            <stringProp name="Argument.value">analytics.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cookie_domain" elementType="Argument">
            <stringProp name="Argument.name">cookie_domain</stringProp>
            <stringProp name="Argument.value">.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[LOAD ENV.] Environment details and credentials (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">celebration.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chat_url" elementType="Argument">
            <stringProp name="Argument.name">chat_url</stringProp>
            <stringProp name="Argument.value">chat.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iris_url" elementType="Argument">
            <stringProp name="Argument.name">iris_url</stringProp>
            <stringProp name="Argument.value">iris.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">carestackqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">cloadtestare.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">cloadtestare</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">Carestack@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pms_db_name" elementType="Argument">
            <stringProp name="Argument.name">pms_db_name</stringProp>
            <stringProp name="Argument.value">cloadtestare</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_db_name" elementType="Argument">
            <stringProp name="Argument.name">pateng_db_name</stringProp>
            <stringProp name="Argument.value">cstackpateng</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_server_name" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_server_name</stringProp>
            <stringProp name="Argument.value">cstackaudittrailtest.mysql.database.azure.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_user_name" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_user_name</stringProp>
            <stringProp name="Argument.value">cschatloadtestuser@cstackaudittrailtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_db_password" elementType="Argument">
            <stringProp name="Argument.name">mysql_db_password</stringProp>
            <stringProp name="Argument.value">p!yL12X5SnNU</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[LOAD ENV.] Environment detials and credentials (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">celebration.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">carestackqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">cloadtestare.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_name" elementType="Argument">
            <stringProp name="Argument.name">db_name</stringProp>
            <stringProp name="Argument.value">cloadtestare</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">cloadtestare</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">Carestack@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="[PS ENV.] Environment detials and credentials (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">celebration.ps.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_url" elementType="Argument">
            <stringProp name="Argument.name">pateng_url</stringProp>
            <stringProp name="Argument.value">pateng.ps.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_number" elementType="Argument">
            <stringProp name="Argument.name">port_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_name" elementType="Argument">
            <stringProp name="Argument.name">user_name</stringProp>
            <stringProp name="Argument.value">carestackqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Abc@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_server_name" elementType="Argument">
            <stringProp name="Argument.name">db_server_name</stringProp>
            <stringProp name="Argument.value">cstackcopy.database.windows.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_name" elementType="Argument">
            <stringProp name="Argument.name">db_name</stringProp>
            <stringProp name="Argument.value">cstackps</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_name" elementType="Argument">
            <stringProp name="Argument.name">db_user_name</stringProp>
            <stringProp name="Argument.value">regressionrwuser</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_password" elementType="Argument">
            <stringProp name="Argument.name">db_password</stringProp>
            <stringProp name="Argument.value">Y@bv!zY7uh5Yz#I</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="PMS - Data repo paths (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="test_plan_path" elementType="Argument">
            <stringProp name="Argument.name">test_plan_path</stringProp>
            <stringProp name="Argument.value">${__groovy(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}Test_data\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cookie_repo" elementType="Argument">
            <stringProp name="Argument.name">cookie_repo</stringProp>
            <stringProp name="Argument.value">cookie_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="login_credential_repo" elementType="Argument">
            <stringProp name="Argument.name">login_credential_repo</stringProp>
            <stringProp name="Argument.value">login_credential_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_repo</stringProp>
            <stringProp name="Argument.value">patient_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appointment_id_booked_repo" elementType="Argument">
            <stringProp name="Argument.name">appointment_id_booked_repo</stringProp>
            <stringProp name="Argument.value">appointment_id_booked_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appointment_status_change_repo" elementType="Argument">
            <stringProp name="Argument.name">appointment_status_change_repo</stringProp>
            <stringProp name="Argument.value">appointment_status_change_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="provider_id_repo" elementType="Argument">
            <stringProp name="Argument.name">provider_id_repo</stringProp>
            <stringProp name="Argument.value">provider_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="location_id_repo" elementType="Argument">
            <stringProp name="Argument.name">location_id_repo</stringProp>
            <stringProp name="Argument.value">location_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="condition_id_repo" elementType="Argument">
            <stringProp name="Argument.name">condition_id_repo</stringProp>
            <stringProp name="Argument.value">condition_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="procedure_code_id_repo" elementType="Argument">
            <stringProp name="Argument.name">procedure_code_id_repo</stringProp>
            <stringProp name="Argument.value">procedure_code_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="planned_tx_procedure_id_repo" elementType="Argument">
            <stringProp name="Argument.name">planned_tx_procedure_id_repo</stringProp>
            <stringProp name="Argument.value">planned_tx_procedure_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="completed_tx_codes_for_deletion_repo" elementType="Argument">
            <stringProp name="Argument.name">completed_tx_codes_for_deletion_repo</stringProp>
            <stringProp name="Argument.value">completed_tx_codes_for_deletion_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tx_to_link_to_appointment_repo" elementType="Argument">
            <stringProp name="Argument.name">tx_to_link_to_appointment_repo</stringProp>
            <stringProp name="Argument.value">tx_to_link_to_appointment_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_insurance_detail_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_insurance_detail_repo</stringProp>
            <stringProp name="Argument.value">patient_insurance_detail_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="insurance_receipts_with_unapplied_repo" elementType="Argument">
            <stringProp name="Argument.name">insurance_receipts_with_unapplied_repo</stringProp>
            <stringProp name="Argument.value">insurance_receipts_with_unapplied_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patients_with_balance_due_insurance_repo" elementType="Argument">
            <stringProp name="Argument.name">patients_with_balance_due_insurance_repo</stringProp>
            <stringProp name="Argument.value">patients_with_balance_due_insurance_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patients_with_balance_due_patient_codes_repo" elementType="Argument">
            <stringProp name="Argument.name">patients_with_balance_due_patient_codes_repo</stringProp>
            <stringProp name="Argument.value">patients_with_balance_due_patient_codes_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="location_operatory_id_repo" elementType="Argument">
            <stringProp name="Argument.name">location_operatory_id_repo</stringProp>
            <stringProp name="Argument.value">location_operatory_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="note_id_repo" elementType="Argument">
            <stringProp name="Argument.name">note_id_repo</stringProp>
            <stringProp name="Argument.value">note_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="claim_details_repo" elementType="Argument">
            <stringProp name="Argument.name">claim_details_repo</stringProp>
            <stringProp name="Argument.value">claim_details_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="provider_location_repo" elementType="Argument">
            <stringProp name="Argument.name">provider_location_repo</stringProp>
            <stringProp name="Argument.value">provider_location_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pateng_uuid_repo" elementType="Argument">
            <stringProp name="Argument.name">pateng_uuid_repo</stringProp>
            <stringProp name="Argument.value">pateng_uuid_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_with_appointment_for_date_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_with_appointment_for_date_repo</stringProp>
            <stringProp name="Argument.value">patient_id_with_appointment_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appointment_id_for_date_repo" elementType="Argument">
            <stringProp name="Argument.name">appointment_id_for_date_repo</stringProp>
            <stringProp name="Argument.value">appointment_id_for_date_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users_with_login_repo" elementType="Argument">
            <stringProp name="Argument.name">users_with_login_repo</stringProp>
            <stringProp name="Argument.value">users_with_login_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="employer_id_repo" elementType="Argument">
            <stringProp name="Argument.name">employer_id_repo</stringProp>
            <stringProp name="Argument.value">employer_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fee_schedule_id_repo" elementType="Argument">
            <stringProp name="Argument.name">fee_schedule_id_repo</stringProp>
            <stringProp name="Argument.value">fee_schedule_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="non_rp_patient_id_repo" elementType="Argument">
            <stringProp name="Argument.name">non_rp_patient_id_repo</stringProp>
            <stringProp name="Argument.value">non_rp_patient_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="provider_id_repo" elementType="Argument">
            <stringProp name="Argument.name">provider_id_repo</stringProp>
            <stringProp name="Argument.value">provider_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_with_completed_codes_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_with_completed_codes_repo</stringProp>
            <stringProp name="Argument.value">patient_id_with_completed_codes_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_with_claims_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_with_claims_repo</stringProp>
            <stringProp name="Argument.value">patient_id_with_claims_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="completed_procedure_for_claim_creation_repo" elementType="Argument">
            <stringProp name="Argument.name">completed_procedure_for_claim_creation_repo</stringProp>
            <stringProp name="Argument.value">completed_procedure_for_claim_creation_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_with_pending_medical_history_form_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_with_pending_medical_history_form_repo</stringProp>
            <stringProp name="Argument.value">patient_id_with_pending_medical_history_form_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Iris - Data repo paths (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="test_plan_path" elementType="Argument">
            <stringProp name="Argument.name">test_plan_path</stringProp>
            <stringProp name="Argument.value">${__groovy(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}Test_data\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_id_repo" elementType="Argument">
            <stringProp name="Argument.name">user_id_repo</stringProp>
            <stringProp name="Argument.value">user_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_with_chat_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_with_chat_repo</stringProp>
            <stringProp name="Argument.value">patient_id_with_chat_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="General throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_login_requests" elementType="Argument">
            <stringProp name="Argument.name">throughput_login_requests</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">2</stringProp>
          </elementProp>
          <elementProp name="throughput_global_search" elementType="Argument">
            <stringProp name="Argument.name">throughput_global_search</stringProp>
            <stringProp name="Argument.value">27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">15</stringProp>
          </elementProp>
          <elementProp name="throughput_visit_home_page" elementType="Argument">
            <stringProp name="Argument.name">throughput_visit_home_page</stringProp>
            <stringProp name="Argument.value">9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">7</stringProp>
          </elementProp>
          <elementProp name="throughput_surge" elementType="Argument">
            <stringProp name="Argument.name">throughput_surge</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">TEMP</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_tracker" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_tracker</stringProp>
            <stringProp name="Argument.value">29</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Paient throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_patient_record_load" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_record_load</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">12</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_documents_view" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_documents_view</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">8</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_medicalhistoryform_view" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_medicalhistoryform_view</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_note_add" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_note_add</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scheduler throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_scheduler_load" elementType="Argument">
            <stringProp name="Argument.name">throughput_scheduler_load</stringProp>
            <stringProp name="Argument.value">31</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">25</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_appointments_list_view" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_appointments_list_view</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">9</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_appointment_detail_view" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_appointment_detail_view</stringProp>
            <stringProp name="Argument.value">36</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">37</stringProp>
          </elementProp>
          <elementProp name="throughput_appointment_booking" elementType="Argument">
            <stringProp name="Argument.name">throughput_appointment_booking</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">2</stringProp>
          </elementProp>
          <elementProp name="throughput_appointment_get_signalR" elementType="Argument">
            <stringProp name="Argument.name">throughput_appointment_get_signalR</stringProp>
            <stringProp name="Argument.value">38</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">27</stringProp>
          </elementProp>
          <elementProp name="throughput_appointment_checkout" elementType="Argument">
            <stringProp name="Argument.name">throughput_appointment_checkout</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">4</stringProp>
          </elementProp>
          <elementProp name="throughput_appointment_campaigns" elementType="Argument">
            <stringProp name="Argument.name">throughput_appointment_campaigns</stringProp>
            <stringProp name="Argument.value">18</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Treatment throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_navigation_to_chart" elementType="Argument">
            <stringProp name="Argument.name">throughput_navigation_to_chart</stringProp>
            <stringProp name="Argument.value">18</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">18</stringProp>
          </elementProp>
          <elementProp name="throughput_planned_code_addition_without_linking_to_appointment" elementType="Argument">
            <stringProp name="Argument.name">throughput_planned_code_addition_without_linking_to_appointment</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">5</stringProp>
          </elementProp>
          <elementProp name="throughput_complete_planned_procedure" elementType="Argument">
            <stringProp name="Argument.name">throughput_complete_planned_procedure</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_add_completed_procedure_code" elementType="Argument">
            <stringProp name="Argument.name">throughput_add_completed_procedure_code</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_open_code_snapshot" elementType="Argument">
            <stringProp name="Argument.name">throughput_open_code_snapshot</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_delete_procedure_code" elementType="Argument">
            <stringProp name="Argument.name">throughput_delete_procedure_code</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_link_tx_procedure_to_appointment" elementType="Argument">
            <stringProp name="Argument.name">throughput_link_tx_procedure_to_appointment</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughput_create_claims_for_completed_code" elementType="Argument">
            <stringProp name="Argument.name">throughput_create_claims_for_completed_code</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Billing throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_view_patient_insurance_list" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_patient_insurance_list</stringProp>
            <stringProp name="Argument.value">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">7</stringProp>
          </elementProp>
          <elementProp name="throughput_select_patient_insurance" elementType="Argument">
            <stringProp name="Argument.name">throughput_select_patient_insurance</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">3</stringProp>
          </elementProp>
          <elementProp name="throughput_view_patient_claims" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_patient_claims</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_view_all_claims_grid" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_all_claims_grid</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">2</stringProp>
          </elementProp>
          <elementProp name="throughput_view_patient_payment_receipt" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_patient_payment_receipt</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">2</stringProp>
          </elementProp>
          <elementProp name="throughput_apply_patient_payment" elementType="Argument">
            <stringProp name="Argument.name">throughput_apply_patient_payment</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="throughput_select_patient_and_apply_insurance_payment" elementType="Argument">
            <stringProp name="Argument.name">throughput_select_patient_and_apply_insurance_payment</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">2</stringProp>
          </elementProp>
          <elementProp name="throughput_view_patient_ledger" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_patient_ledger</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">3</stringProp>
          </elementProp>
          <elementProp name="throughput_view_insurance_payments_reciepts" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_insurance_payments_reciepts</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughput_view_completed_procedures_grid" elementType="Argument">
            <stringProp name="Argument.name">throughput_view_completed_procedures_grid</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughput_create_claims_for_completed_code" elementType="Argument">
            <stringProp name="Argument.name">throughput_create_claims_for_completed_code</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Iris text chat throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_TC_Initial_load" elementType="Argument">
            <stringProp name="Argument.name">throughput_TC_Initial_load</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">4</stringProp>
          </elementProp>
          <elementProp name="throughput_patient_chat_history" elementType="Argument">
            <stringProp name="Argument.name">throughput_patient_chat_history</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">4</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Iris Variables (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="appt_start_date" elementType="Argument">
            <stringProp name="Argument.name">appt_start_date</stringProp>
            <stringProp name="Argument.value">${__timeShift(MM/dd/yyyy,,P-90D,, a)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appt_end_date" elementType="Argument">
            <stringProp name="Argument.name">appt_end_date</stringProp>
            <stringProp name="Argument.value">${__timeShift(MM/dd/yyyy,,P365D,, b)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scheduler variables (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="appointment_provider_id" elementType="Argument">
            <stringProp name="Argument.name">appointment_provider_id</stringProp>
            <stringProp name="Argument.value">280</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appointment_location_id" elementType="Argument">
            <stringProp name="Argument.name">appointment_location_id</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.desc">Used in patient creation setup script, POST Add patient request</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheduler_start_slot" elementType="Argument">
            <stringProp name="Argument.name">scheduler_start_slot</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Used in slot incrementor in Appointment booking transaction</stringProp>
          </elementProp>
          <elementProp name="scheduler_end_slot" elementType="Argument">
            <stringProp name="Argument.name">scheduler_end_slot</stringProp>
            <stringProp name="Argument.value">288</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Used in slot incrementor in Appointment booking transaction (last slot 288)</stringProp>
          </elementProp>
          <elementProp name="random_day_min" elementType="Argument">
            <stringProp name="Argument.name">random_day_min</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="random_day_max" elementType="Argument">
            <stringProp name="Argument.name">random_day_max</stringProp>
            <stringProp name="Argument.value">28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="random_month_min" elementType="Argument">
            <stringProp name="Argument.name">random_month_min</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="random_month_max" elementType="Argument">
            <stringProp name="Argument.name">random_month_max</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="random_year" elementType="Argument">
            <stringProp name="Argument.name">random_year</stringProp>
            <stringProp name="Argument.value">2019</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appointment_date" elementType="Argument">
            <stringProp name="Argument.name">appointment_date</stringProp>
            <stringProp name="Argument.value">11/17/2023</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">mm/dd/yyy</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Billing variables (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="time_zone_offset" elementType="Argument">
            <stringProp name="Argument.name">time_zone_offset</stringProp>
            <stringProp name="Argument.value">330</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Used in patient ledger view call &quot;patient/ledger/get-patient-ledger/&quot;</stringProp>
          </elementProp>
          <elementProp name="generated_valid_date" elementType="Argument">
            <stringProp name="Argument.name">generated_valid_date</stringProp>
            <stringProp name="Argument.value">11/24/2021</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="External API throughputs (User Defined Variables)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_external_api_high" elementType="Argument">
            <stringProp name="Argument.name">throughput_external_api_high</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughput_external_api_medium" elementType="Argument">
            <stringProp name="Argument.name">throughput_external_api_medium</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughput_external_api_low" elementType="Argument">
            <stringProp name="Argument.name">throughput_external_api_low</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${url}</stringProp>
        <stringProp name="HTTPSampler.port">${port_number}</stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - Content Type" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Data repo paths for The complete patient (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="test_plan_path_complete_patient" elementType="Argument">
            <stringProp name="Argument.name">test_plan_path_complete_patient</stringProp>
            <stringProp name="Argument.value">${__groovy(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}Test_data\The_complete_patient_data_repo\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="provider_location_repo" elementType="Argument">
            <stringProp name="Argument.name">provider_location_repo</stringProp>
            <stringProp name="Argument.value">provider_location_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="plan_payor_repo" elementType="Argument">
            <stringProp name="Argument.name">plan_payor_repo</stringProp>
            <stringProp name="Argument.value">plan_payor_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="patient_id_repo" elementType="Argument">
            <stringProp name="Argument.name">patient_id_repo</stringProp>
            <stringProp name="Argument.value">patient_id_repo.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Cheriya Concurrency configuration (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="number_of_threads" elementType="Argument">
            <stringProp name="Argument.name">number_of_threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="number_of_functionalities_run" elementType="Argument">
            <stringProp name="Argument.name">number_of_functionalities_run</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ramp_up_time_mins" elementType="Argument">
            <stringProp name="Argument.name">ramp_up_time_mins</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="load_hold_time_mins" elementType="Argument">
            <stringProp name="Argument.name">load_hold_time_mins</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="number_of_logged_in_users" elementType="Argument">
            <stringProp name="Argument.name">number_of_logged_in_users</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Report variables (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url_report" elementType="Argument">
            <stringProp name="Argument.name">url_report</stringProp>
            <stringProp name="Argument.value">reports.qa.carestackqa.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReportStartDate" elementType="Argument">
            <stringProp name="Argument.name">ReportStartDate</stringProp>
            <stringProp name="Argument.value">03/01/2019</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReportEndDate" elementType="Argument">
            <stringProp name="Argument.name">ReportEndDate</stringProp>
            <stringProp name="Argument.value">03/01/2019</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThinkTime" elementType="Argument">
            <stringProp name="Argument.name">ThinkTime</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PageNavigationThinkTime" elementType="Argument">
            <stringProp name="Argument.name">PageNavigationThinkTime</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Report throughputs (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_report_generation" elementType="Argument">
            <stringProp name="Argument.name">throughput_report_generation</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Paient Engagement  throughputs (User Defined Variables)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="throughput_save_comunication_log" elementType="Argument">
            <stringProp name="Argument.name">throughput_save_comunication_log</stringProp>
            <stringProp name="Argument.value">1200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">3500/30mins=120 | Logs every campaign that is sent out into &quot;pat_eng.communicationlog&quot; table</stringProp>
          </elementProp>
          <elementProp name="throughput_text_handler" elementType="Argument">
            <stringProp name="Argument.name">throughput_text_handler</stringProp>
            <stringProp name="Argument.value">1500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">4500/30mins=150 | Updates the status of every campaign that is sent in &quot;pat_eng.communicationlog&quot; table</stringProp>
          </elementProp>
          <elementProp name="throughput_insert_text_chat" elementType="Argument">
            <stringProp name="Argument.name">throughput_insert_text_chat</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1500/30mins=50 | Logs every text communication that happens into &quot;pat_eng.textchatlog&quot; table</stringProp>
          </elementProp>
          <elementProp name="throughput_receive_text_response" elementType="Argument">
            <stringProp name="Argument.name">throughput_receive_text_response</stringProp>
            <stringProp name="Argument.value">180</stringProp>
            <stringProp name="Argument.desc">500/30mins=18 | Logs when a patient responds to a text</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="throughput_get_text_count" elementType="Argument">
            <stringProp name="Argument.name">throughput_get_text_count</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments"> 10 Jun 50 users | 10 Jun 100 users</stringProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Login - Storing Cookies (setUp Thread Group)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${number_of_logged_in_users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(ctx.getThreadNum() == 0 &amp;&amp;  vars.getIteration() == 1,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear cookie repo (JSR223 Sampler)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">cookie_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;cookie_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(cookie_repo_path),&apos;&apos;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - Content Type" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().remove(0);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET &lt;&lt;env_url&gt;&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env_url}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Request Verification Token (Regular Expression Extractor)" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">request_verification_token</stringProp>
            <stringProp name="RegexExtractor.regex">input name=&quot;__RequestVerificationToken&quot; type=&quot;hidden&quot; value=&quot;([A-Za-z0-9+=/\-\_]+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract return Url (Regular Expression Extractor)" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">return_url</stringProp>
            <stringProp name="RegexExtractor.regex">action=&quot;(.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Account/Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="RememberUserAndDomain" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">False</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">RememberUserAndDomain</stringProp>
              </elementProp>
              <elementProp name="Domain" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${domain_name}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Domain</stringProp>
              </elementProp>
              <elementProp name="Email" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${user_name}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Email</stringProp>
              </elementProp>
              <elementProp name="Password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Password</stringProp>
              </elementProp>
              <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${request_verification_token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${idp_url}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${return_url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write cookies to cookie repo (BeanShell PostProcessor)" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// get variables from regular expression extractor 
cookie = vars.get(&quot;COOKIE_auth&quot;);
cookie_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;cookie_repo&quot;);

// pass true if want to append to existing file  
FileWriter fstream = new FileWriter(cookie_repo_path, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(cookie);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Data set-up (setUp Thread Group)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Capture user login cookie for authorization (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PMS - JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">load_test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${db_server_name} ;Database=${pms_db_name}</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${db_password}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${db_user_name}</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Pat. Eng. - JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">load_test_pool_pateng</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${db_server_name} ;Database=${pateng_db_name}</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${db_password}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${db_user_name}</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL - JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">load_test_pool_mysql</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://${mysql_db_server_name}</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${mysql_db_password}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${mysql_db_user_name}</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear booked appointment id repo (JSR223 Sampler)" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">appointment_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;appointment_id_booked_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(appointment_id_repo_path),&apos;&apos;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{  &#xd;
   &quot;Email&quot;:&quot;${user_name}&quot;,&#xd;
   &quot;Password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Schedule dashboard data set-up (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear schedule dashboard related repo (JSR223 Sampler)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">patient_id_with_appointment_for_date_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_with_appointment_for_date_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(patient_id_with_appointment_for_date_repo_path),&apos;&apos;);

appointment_id_for_date_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;appointment_id_for_date_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(appointment_id_for_date_repo_path),&apos;&apos;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/get-appointment-summary/&lt;&lt;scheduler_dashboard_date&gt;&gt;/&lt;&lt;appointment_location_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/get-appointment-summary/${scheduler_dashboard_date}/${appointment_location_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Patient ids with appointments (JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">patient_id_with_appointment_for_date</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..patientId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Appointment ids of patients who has appointments (JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">appointment_id_for_date</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..appointmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to patient_id_with_appointment_for_date_repo (BeanShell PostProcessor)" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">// get variables from regular expression extractor 
patient_id_with_appointment_for_date = vars.get(&quot;patient_id_with_appointment_for_date_ALL&quot;);
patient_id_with_appointment_for_date_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_with_appointment_for_date_repo&quot;);
 try
{
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(patient_id_with_appointment_for_date_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	log.info(patient_id_with_appointment_for_date);
	System.out.println(patient_id_with_appointment_for_date);
	out.write(patient_id_with_appointment_for_date);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching patient id&quot;);
}</stringProp>
              <stringProp name="TestPlan.comments">Writes all the patient ids with appointment on a particular date into the repo</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to appointment_id_for_date_repo (BeanShell PostProcessor)" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">// get variables from regular expression extractor 
appointment_id_for_date = vars.get(&quot;appointment_id_for_date_ALL&quot;);
appointment_id_for_date_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;appointment_id_for_date_repo&quot;);
 try
{
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(appointment_id_for_date_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(appointment_id_for_date);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching appointment id&quot;);
}</stringProp>
              <stringProp name="TestPlan.comments">Writes all the patient ids with appointment on a particular date into the repo</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PMS - Data set-up queries (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Account related data set-up (Simple Controller)" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Account ID selection from URL (Simple Controller)" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Domain name extractor from url (BeanShell Sampler)" enabled="true">
                <stringProp name="BeanShellSampler.query">String url = vars.get(&quot;url&quot;);
String[] url_split = url.split(&quot;\\.&quot;);
vars.put(&quot;domain_name&quot;, url_split[0]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Selects account id from the domain name" enabled="true">
                <stringProp name="dataSource">load_test_pool</stringProp>
                <stringProp name="query">select top 1 accountID
from account
where domainName=&apos;${domain_name}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">account_id</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store query fetched account id to a variable, to share across all other data set-up queries (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">resultSet = vars.getObject(&quot;account_id&quot;)
result = new StringBuilder()
for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
    }
}
vars.put(&quot;account_id&quot;,result.toString())</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Billing close out date fetch (Simple Controller)" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Selects account id from the domain name" enabled="true">
                <stringProp name="dataSource">load_test_pool</stringProp>
                <stringProp name="query">SELECT TOP 1 closeoutdate
FROM billing.closeoutperiod
WHERE Accountid=${account_id}
AND IsActive = 1
ORDER BY closeoutdate desc</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">billing_close_out_date</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store query fetched billing close out date to a variable (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">resultSet = vars.getObject(&quot;billing_close_out_date&quot;)
result = new StringBuilder()

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
    }
}

String[] billing_close_out_date_split = result.split()
vars.put(&quot;billing_close_out_date&quot;,billing_close_out_date_split[0].toString())
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store billing close out date to a variable (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">String billing_close_out_date = vars.get(&quot;billing_close_out_date&quot;)
String current_date = &quot;${__time(yyyy-MM-dd,)}&quot;

billing_close_out_date_split = billing_close_out_date.split(&quot;-&quot;)
billing_close_out_date_year = billing_close_out_date_split[0]
billing_close_out_date_month = billing_close_out_date_split[1]
billing_close_out_date_day = billing_close_out_date_split[2]
current_date_split = current_date.split(&quot;-&quot;)
current_date_year = current_date_split[0]
current_date_month = current_date_split[1]
current_date_day = current_date_split[2]


generated_valid_date_year = current_date_year
generated_valid_date_month = current_date_month
//Generates a random number from 1 to current date day
generated_valid_date_day = Math.abs( new Random().nextInt() % (current_date_day.toInteger()) ) + 1 
generated_valid_date = generated_valid_date_month + &quot;/&quot; + generated_valid_date_day + &quot;/&quot; + generated_valid_date_year


vars.put(&quot;generated_valid_date&quot;,generated_valid_date)
log.info(&quot;generated_valid_date : &quot; + generated_valid_date)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Valid random date generation between current date and billing close out date (JSR223 Sampler)" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//Store the valid generated date to a property, so that it can be re-used across thread groups
${__setProperty(prop_generated_valid_date,&quot;${generated_valid_date}&quot;)}
log.info(&quot;Generated valid date: &quot;+${__property(prop_generated_valid_date)})</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Appointment related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select appointments which are in scheduled status (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 100 apt.AppointmentId AppointmentId, apt.patientid, aptst.AppointmentStatusId
from scheduler.appointment apt
inner join scheduler.appointmentstatus aptst
on apt.AccountId=aptst.AccountId
where apt.AccountId =  ${account_id}
and apt.status not in (&apos;Blocked&apos;,&apos;No Show&apos;,&apos;Cancelled&apos;,&apos;Deleted&apos;,&apos;Rescheduled&apos;)
and aptst.Name  =&apos;Checked Out&apos;
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;appointment_status_change_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select active patients who has more than 10 treatment procedures chart (JDBC Request) " enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 500 pattxcount.patientId from
(
    select tp.patientId,count(tp.TreatmentProcedureID) as txcount
    from treatmentprocedure tp
    join patient p on p.accountId=tp.accountId
    and p.patientid=tp.patientid
    where p.accountId=${account_id}   
    and tp.DeleteStatusId=0
    and p.type like (&apos;%P,I%&apos;)
    and p.isActive=1    
    group by tp.patientID
) pattxcount
where txcount&gt;10
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select Non-RP patients (JDBC Request) " enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 200 p.PatientID 
FROM PatientInfo p
INNER JOIN workflowdocuments.MedicalHistoryForm m
ON p.PatientID = m.PatientId
AND p.AccountID = m.AccountId
WHERE p.AccountId = ${account_id}
AND WorkflowStatus =1
AND p.PatientStatusId = 1
AND p.PatientTypeID = 1 
ORDER BY m.LastUpdatedOn DESC</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;non_rp_patient_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patient notes (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 100 NoteId, PatientId 
from Note
where accountid = ${account_id} 
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;note_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patients who has completed codes with claims created(JDBC Request) " enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 1000 TreatmentProcedureId, PatientId, ActiveClaimId
FROM TreatmentProcedure
WHERE ActiveClaimId IS NOT NULL
AND AccountId = ${account_id}
order by NEWID()
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_with_completed_codes_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Treatment procedure related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 200 completed treatment procedures with no claims raised for deletion (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 200 patientId, treatmentProcedureId, rowVersionStamp 
from treatmentprocedure
where accountid=${account_id}
and isCompleted=1
and DeleteStatusId=0
and dateOfService&gt;=&apos;${billing_close_out_date}&apos;
and activeclaimId is null
--order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor) [ROW VERSION STAMP ENCODED]" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;completed_tx_codes_for_deletion_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    int i=0
    while (iter.hasNext()) {
    	   i++
        pair = iter.next()      

        if(i==3)
        {
        	String encodedRowversionStamp = pair.getValue().encodeBase64()
        	result.append(encodedRowversionStamp)
        }
        else
        {
        	result.append(pair.getValue())
        }
        result.append(&quot;,&quot;)
        
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 100 treatment procedures to link with a scheduled appointment (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), tp.RowVersionStamp), 1), tp.TreatmentProcedureId, apt.AppointmentID, apt.PatientID 
FROM scheduler.appointment apt
INNER JOIN TreatmentProcedure tp
ON apt.AccountID = tp.AccountId
AND apt.PatientID = tp.PatientId
WHERE apt.status in (&apos;Scheduled&apos;)
AND tp.IsPlanned = 1
AND tp.DeleteStatusId = 0
AND apt.AccountId =  ${account_id}</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;tx_to_link_to_appointment_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 1000 treatment procedure codes in proposed status with active providers for completion (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 1000 tp.patientId,tp.locationId,tp.providerId,tp.treatmentprocedureId, CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), tp.RowVersionStamp), 1)
FROM treatmentprocedure tp
JOIN ProcedureCode pc ON pc.AccountID = tp.AccountId
AND pc.ProcedureCodeID = tp.ProcedureCodeId
JOIN provider p on  p.AccountID = tp.AccountId
AND p.providerId = tp.providerId
WHERE p.accountId = ${account_id}
AND year(tp.proposeddate) &gt; 2018
AND pc.IsICDCodeMandatory = &apos;No&apos;
AND tp.isPlanned = 1
AND p.isactive = 1
AND tp.DeleteStatusId = 0
AND tp.billingOrder in (&apos;D&apos;)
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;planned_tx_procedure_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select  20 procedure codes that are applicable to all teeth (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 20 a.procedurecodeid from advancedcodesetting a
inner join ProcedureCode p
on p.ProcedureCodeID = a.ProcedureCodeID
and p.AccountID = a.AccountID
where a.accountid=${account_id}
and IsICDCodeMandatory = &apos;Yes&apos;
and treatmenttypeid is null
and ProcedureCodeApplicableTypeID = 1 
and isallteeth=1
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;procedure_code_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select  200 completed procedure codes for claim creation (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 200 tp.patientId, treatmentProcedureId 
from treatmentprocedure tp
inner join PatientInsurance p
on tp.PatientId = p.PatientId
and tp.AccountId = p.AccountID
where tp.accountid= ${account_id}
and isCompleted=1
and DeleteStatusId=0
and DateOfService &gt;=&apos;${billing_close_out_date}&apos;
and activeclaimId is null
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;completed_procedure_for_claim_creation_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Location related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select locations for a particular account (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 20 locationId from location
where accountid=${account_id}
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;location_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Provider related data queries (Simple Controller)" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select active providers for a particular account (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 p.ProviderID
FROM provider p 
INNER JOIN userdetail ud
ON ud.ProviderID = p.ProviderID
AND p.AccountId = ud.AccountId
WHERE p.accountid = ${account_id}
AND ud.IsActive = 1
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;provider_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select insurance details for patients  with active insurance and has more than 35 treatment procedures in chart (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT top 500 pattxcount.payorid,pattxcount.patientId, pattxcount.insuranceplanId, pattxcount.patientinsuranceId
FROM
(
    SELECT tp.patientId,patins.patientinsuranceId, patins.insuranceplanId, ip.payorid, COUNT(tp.TreatmentProcedureID) AS txcount
    FROM treatmentprocedure tp
    JOIN patient p ON p.accountId = tp.accountId
    AND p.patientid = tp.patientid
    JOIN patientinsurance patins ON patins.accountId = p.accountId
    AND p.patientId = patins.patientId	   
    JOIN insuranceplan ip ON ip.accountId=patins.accountId
    AND patins.insuranceplanId=ip.insuranceplanId
    WHERE patins.accountId = ${account_id}   
    AND tp.DeleteStatusId=0
    AND p.type LIKE (&apos;%P,I%&apos;)
    AND p.isActive=1
    AND patins.status=&apos;Active&apos;
    GROUP BY tp.patientID,patins.patientinsuranceId,patins.insuranceplanId,ip.payorid
) pattxcount
WHERE txcount &gt; 35
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_insurance_detail_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Billing related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patients with Balance due insurance appearing in the patient list of  insurance receipts (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 ap.patientId,ap.treatmentprocedureId,tp.providerId,tp.activeClaimId,tp.locationId
    FROM Billing.AccountingProcedure ap
    JOIN dbo.patient p
    ON ap.accountid = p.accountid
    AND ap.patientid = p.patientid
	JOIN TreatmentProcedure tp
	ON tp.TreatmentProcedureId = ap.TreatmentProcedureID
	and tp.AccountId = ap.AccountID
    WHERE ap.accountId = ${account_id}
    AND p.isActive=1
    AND ap.balanceDueInsurance &gt; 100
AND tp.activeClaimId IS NOT NULL
AND tp.billingOrder = &apos;D&apos;
AND tp.billingStatus in (&apos;Submitted (Payor)&apos;,&apos;Resubmitted (Payor)&apos;,&apos;Marked For Appeal&apos;,&apos;Partially Paid&apos;)
AND tp.DeleteStatusId = 0
	ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patients_with_balance_due_insurance_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patient and tx details with Balance due patient greater than 30 (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT tp.treatmentprocedureid,tp.patientid,tp.providerid,tp.locationid
FROM treatmentprocedure tp
JOIN
(
    SELECT top 500 ap.patientid,MAX(ap.treatmentprocedureid) as treatmentprocedureid
    FROM billing.accountingprocedure  ap
    JOIN dbo.patient p
    ON ap.accountid=p.accountid
    AND ap.patientid=p.patientid
    WHERE ap.accountid = ${account_id}
    AND ap.balanceduepatient &gt; 30
    AND p.isActive=1
    GROUP BY ap.patientid
    ORDER BY NEWID()
) ap
ON ap.treatmentprocedureid = tp.treatmentprocedureid
AND tp.accountid = ${account_id}
AND tp.BillingOrder = &apos;D&apos;
AND tp.DeleteStatusId = 0</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patients_with_balance_due_patient_codes_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get claim details (Simple Controller)" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select claims details (JDBC Request)" enabled="true">
                <stringProp name="dataSource">load_test_pool</stringProp>
                <stringProp name="query">SELECT top 100 claimdetails.ClaimId, claimdetails.ProcedureCodeId, claimdetails.treatmentprocedureid, claimdetails.PatientId, claimdetails.LocationId, claimdetails.TreatingProviderId, claimdetails.PrimaryPayorId, claimdetails.PrimaryPatientInsuranceId
FROM
(
    SELECT ccl.ClaimId, ccl.procedurecodeid, ccl.treatmentprocedureid, c.PatientId, c.LocationId, c.TreatingProviderId, c.PrimaryPayorId, c.PrimaryPatientInsuranceId, count(1) as cnt
    FROM claimchargeline ccl
    JOIN claim c
    ON c.ClaimId = ccl.ClaimId
    AND c.AccountId = ccl.AccountId
    WHERE ccl.AccountId = ${account_id}
    AND c.BillingOrder=&apos;D&apos;
    GROUP BY ccl.ClaimId, ccl.procedurecodeid, ccl.treatmentprocedureid, c.PatientId, c.LocationId, c.TreatingProviderId, c.PrimaryPayorId, c.PrimaryPatientInsuranceId 
) claimdetails
WHERE claimdetails.cnt = 1
ORDER By NEWID()</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">query_result_set</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;claim_details_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MIDWEST_Get insurance receipts wih unapplied credits (Simple Controller)" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get count of insurance receipts with unapplied amount (JDBC Request)" enabled="true">
                <stringProp name="dataSource">load_test_pool</stringProp>
                <stringProp name="query">SELECT invoiceId,locationId,baze64,payorId
FROM billing.invoice as temp
cross apply (select RowVersionStamp as &apos;*&apos; for xml path(&apos;&apos;)) T (baze64)
WHERE accountId = ${account_id}
AND unappliedamount &gt; 1000
AND payorid IS NOT NULL
AND isdeleted = 0
ORDER BY NEWID()</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">insurance_receipts_with_unapplied</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get insurance receipts and count with unapplied amount  and write to a variable (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">arrList=vars.getObject(&quot;insurance_receipts_with_unapplied&quot;)
vars.put(&quot;num_of_unapplied_insurance_receipts&quot;,arrList.size().toString())

log.info(&quot;Number of unapplied receipts: &quot; + vars.get(&quot;num_of_unapplied_insurance_receipts&quot;))

result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;insurance_receipts_with_unapplied_repo&quot;)

for (Object row : arrList ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check if there are sufficient insurance receipts with unapplied amount (If Controller)" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(${num_of_unapplied_insurance_receipts}&lt;10)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Add insurance receipts (Loop Controller)" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">5</stringProp>
                </LoopController>
                <hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID supplier (CSV Data Set Config)" enabled="true">
                    <stringProp name="filename">${test_plan_path}${location_id_repo}</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="variableNames">location_id</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
                    <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Add insurance receipt" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;PaymentTypeID&quot;: 14,&#xd;
  &quot;PatientID&quot;: null,&#xd;
  &quot;PaymentDate&quot;: ${generated_valid_date},&#xd;
  &quot;AdjustmentCodeID&quot;: null,&#xd;
  &quot;CCNumber&quot;: &quot;&quot;,&#xd;
  &quot;CcOwnerName&quot;: &quot;&quot;,&#xd;
  &quot;Cvc&quot;: &quot;&quot;,&#xd;
  &quot;CardType&quot;: &quot;&quot;,&#xd;
  &quot;CardNumber&quot;: &quot;&quot;,&#xd;
  &quot;CheckNumber&quot;: &quot;&quot;,&#xd;
  &quot;ExpirationMonth&quot;: &quot;&quot;,&#xd;
  &quot;ExpirationYear&quot;: &quot;&quot;,&#xd;
  &quot;IsFlexiPay&quot;: &quot;false&quot;,&#xd;
  &quot;LbxAccountNumber&quot;: &quot;&quot;,&#xd;
  &quot;LbxRoutingNumber&quot;: &quot;&quot;,&#xd;
  &quot;LocationID&quot;: ${location_id},&#xd;
  &quot;PayorID&quot;: ${payor_id},&#xd;
  &quot;ReferenceNumber&quot;: &quot;777&quot;,&#xd;
  &quot;Remarks&quot;: &quot;LOAD_TEST_CREATED&quot;,&#xd;
  &quot;Source&quot;: &quot;Insurance&quot;,&#xd;
  &quot;PlanID&quot;: null,&#xd;
  &quot;TransactionPeriod&quot;: null,&#xd;
  &quot;TransactionAmount&quot;: &quot;1000.00&quot;,&#xd;
  &quot;TransactionType&quot;: &quot;&quot;,&#xd;
  &quot;ProviderID&quot;: &quot;&quot;,&#xd;
  &quot;FirstName&quot;: &quot;TEST&quot;,&#xd;
  &quot;LastName&quot;: &quot;&quot;,&#xd;
  &quot;Address&quot;: {&#xd;
    &quot;AddressDetailID&quot;: 0,&#xd;
    &quot;AddressLine1&quot;: &quot;P.O. BOX 14079&quot;,&#xd;
    &quot;AddressLine2&quot;: &quot;&quot;,&#xd;
    &quot;City&quot;: &quot;LEXINGTON&quot;,&#xd;
    &quot;State&quot;: &quot;KY&quot;,&#xd;
    &quot;ZipCode&quot;: &quot;40512&quot;,&#xd;
    &quot;RowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;PaymentGatewayToken&quot;: &quot;&quot;,&#xd;
  &quot;RedirectUrl&quot;: &quot;&quot;,&#xd;
  &quot;PaymentTransactionID&quot;: 0&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">payment/processpayment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract RowVersionStamp (JSON Extractor)" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">row_version_stamp</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.RowVersionStamp</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract InvoiceID (JSON Extractor)" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">invoice_id</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.InvoiceId</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                      <stringProp name="Scope.variable"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to patient id repo (BeanShell PostProcessor)" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters">${patient_id}</stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">// get variables from regular expression extractor 
invoice_id = vars.get(&quot;invoice_id&quot;);
location_id = vars.get(&quot;location_id&quot;);
row_version_stamp = vars.get(&quot;row_version_stamp&quot;);
payor_id = vars.get(&quot;payor_id&quot;);
insurance_receipts_with_unapplied_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;insurance_receipts_with_unapplied_repo&quot;);
 try
{
	invoice_id=Integer.parseInt(invoice_id);
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(insurance_receipts_with_unapplied_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(invoice_id + &quot;,&quot; + location_id + &quot;,&quot; + row_version_stamp + &quot;,&quot; + payor_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching invoice id&quot;);
}</stringProp>
                      <stringProp name="TestPlan.comments">Writes all the patient IDs of created patients to the patient id repo</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 100 users who have login access (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 UserDetailID
FROM userdetail
WHERE accountid = ${account_id}
AND IsActive = 1
AND LoginStatus =&apos;Login Enabled&apos; 
AND CareStackSupportUserId IS NULL
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;users_with_login_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Employer related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 100 employer IDs (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 EmployerID
FROM Employer
WHERE AccountID = ${account_id}
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;employer_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fee schedule related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 100 fee schedule IDs (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 FeeScheduleID
FROM FeeSchedule
WHERE AccountID = ${account_id}
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;fee_schedule_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scheduler data set-up (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear location operatory repo file (JSR223 Sampler)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">location_operatory_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;location_operatory_id_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(location_operatory_id_repo_path),&apos;&apos;);

location_operatory_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;provider_id_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(location_operatory_id_repo_path),&apos;&apos;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Appointment booking related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select active ProviderId with all location access(JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT TOP 1000 ud.ProviderID
FROM [Provider] pr
INNER JOIN UserDetail ud 
ON pr.ProviderID = ud.ProviderID AND pr.AccountID = ud.AccountID
INNER JOIN UserLocation ul
ON ul.UserDetailID = ud.UserDetailID AND ul.AccountID = ud.AccountID
WHERE pr.IsActive = 1 
AND ul.LocationID IS NULL
AND ul.AccountID = ${account_id}
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;provider_id_repo&quot;);

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select location with operatories (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT TOP 100 LocationID, OperatoryID
FROM Operatory 
WHERE AccountID = ${account_id}
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;location_operatory_id_repo&quot;);

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scheduler data set-up (Transaction Controller)" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear location operatory repo file (JSR223 Sampler)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">location_operatory_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;location_operatory_id_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(location_operatory_id_repo_path),&apos;&apos;);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add location (Simple Controller)" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Location name randomizer (Random Variable)" enabled="true">
              <stringProp name="variableName">random_number</stringProp>
              <stringProp name="outputFormat">000000</stringProp>
              <stringProp name="minimumValue">999</stringProp>
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST setup/location/add/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;LocationID&quot;: 0,&#xd;
  &quot;ShortName&quot;: &quot;LTL_${random_number}&quot;,&#xd;
  &quot;LocationName&quot;: &quot;LOAD_TEST_LOC_${random_number}&quot;,&#xd;
  &quot;TaxID&quot;: &quot;&quot;,&#xd;
  &quot;NPI&quot;: &quot;&quot;,&#xd;
  &quot;AddressDetail&quot;: {&#xd;
    &quot;AddressDetailID&quot;: 0,&#xd;
    &quot;AddressLine1&quot;: &quot;LOAD_TEST_LOC_${random_number}&quot;,&#xd;
    &quot;AddressLine2&quot;: &quot;&quot;,&#xd;
    &quot;City&quot;: &quot;Schenectady&quot;,&#xd;
    &quot;State&quot;: &quot;NY&quot;,&#xd;
    &quot;ZipCode&quot;: &quot;12345-6789&quot;,&#xd;
    &quot;RowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;AddressDetailID&quot;: 0,&#xd;
  &quot;Phone1&quot;: &quot;&quot;,&#xd;
  &quot;Phone2&quot;: &quot;&quot;,&#xd;
  &quot;Fax&quot;: &quot;&quot;,&#xd;
  &quot;Email&quot;: &quot;&quot;,&#xd;
  &quot;InheritAccountSetting&quot;: true,&#xd;
  &quot;WorkingHours&quot;: [],&#xd;
  &quot;TimeZone&quot;: &quot;Eastern Standard Time&quot;,&#xd;
  &quot;SalesTaxPercentage&quot;: &quot;0.00&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/location/add/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Appointment deletion</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Location ID (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">location_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add operatory to location (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST setup/location/operatory-settings/save?locationId=${location_id}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_60&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_59&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_58&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_57&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_56&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_55&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_54&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_53&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_52&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_51&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_50&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_49&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_48&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  }, &#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_47&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_46&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_45&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_44&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_43&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_42&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_41&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_40&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_39&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_38&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_37&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_36&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_35&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_34&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_33&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_32&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_31&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_30&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_29&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_28&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_27&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_26&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_25&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_24&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_23&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_22&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_21&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_20&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_19&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_18&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_17&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_16&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_15&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_14&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_13&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_12&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_11&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_10&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_9&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_8&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_7&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_6&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_5&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_4&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_3&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_2&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  },&#xd;
  {&#xd;
    &quot;OperatoryID&quot;: &quot;0&quot;,&#xd;
    &quot;OperatoryName&quot;: &quot;OP_1&quot;,&#xd;
    &quot;DuplicateEntry&quot;: true,&#xd;
    &quot;LocationID&quot;: ${location_id}&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/location/operatory-settings/save?locationId=${location_id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Add operatories to the new location</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/location/operatory-settings/get/${location_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/location/operatory-settings/get/${location_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Latest Operatory ID (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">operatory_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..OperatoryID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to location operatory repo (BeanShell PostProcessor)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">${patient_id}</stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">// get variables from regular expression extractor 
location_id = vars.get(&quot;location_id&quot;);
starting_operatory_id = vars.get(&quot;operatory_id_60&quot;);
ending_operatory_id = vars.get(&quot;operatory_id_1&quot;);
location_operatory_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;location_operatory_id_repo&quot;);
 try
{
	//appointment_id_int=Integer.parseInt(patient_id);
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(location_operatory_id_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(location_id + &quot;,&quot; + starting_operatory_id + &quot;,&quot;+ending_operatory_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching location id&quot;);
}</stringProp>
                <stringProp name="TestPlan.comments">Writes all the patient IDs of created patients to the patient id repo</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Location and operatory ID sharer between thread groups (JSR223 Sampler)" enabled="false">
            <stringProp name="TestPlan.comments">This stores the location id, starting and ending operatory ids in properties so as to share between thread groups </stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">${__setProperty(prop_location_id,${location_id})}
${__setProperty(prop_starting_operatory_id,${operatory_id_60})}
${__setProperty(prop_ending_operatory_id,${operatory_id_1})}
/*
props.put(&apos;prop_location_id&apos;,${location_id})
props.put(&apos;prop_starting_operatory_id&apos;,${operatory_id_60})
props.put(&apos;prop_ending_operatory_id&apos;,${operatory_id_1})
log.info(&quot;Starting operatory - ${operatory_id_20}&quot;);
log.info(&quot;Ending operatory - ${operatory_id_1}&quot;);
*/</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Operatory production type setup (Simple Controller)" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST template_Monday" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;templateId&quot;: 0,&#xd;
  &quot;locationId&quot;: ${location_id},&#xd;
  &quot;providerId&quot;: 0,&#xd;
  &quot;templateName&quot;: &quot;Default Monday&quot;,&#xd;
  &quot;startDate&quot;: &quot;2019-01-01T13:55:39.21&quot;,&#xd;
  &quot;templateType&quot;: 0,&#xd;
  &quot;priority&quot;: 1,&#xd;
  &quot;isSystemCreated&quot;: false,&#xd;
  &quot;slotDefinition&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_2}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_3}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_4}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_5}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_6}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_7}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_8}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_9}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_10}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_11}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_12}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_13}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_14}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_15}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_16}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_17}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_18}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_19}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_20}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_21}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_22}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_23}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_24}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_25}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_26}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_27}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_28}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_29}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_30}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_31}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_32}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_33}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_34}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_35}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_36}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_37}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_38}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_39}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_40}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_41}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_42}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_43}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_44}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_45}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_46}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_47}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_48}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_49}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_50}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_51}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_52}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_53}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_54}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_55}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_56}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_57}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_58}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_59}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_60}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]]}&quot;,&#xd;
  &quot;productionTypeId&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[63,21,30],\&quot;${operatory_id_2}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_3}\&quot;:[63,44,4],\&quot;${operatory_id_4}\&quot;:[21,30,4],\&quot;${operatory_id_5}\&quot;:[73,30,63,4],\&quot;${operatory_id_6}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_7}\&quot;:[63,31,13,4],\&quot;${operatory_id_8}\&quot;:[29],\&quot;${operatory_id_9}\&quot;:[63,31,13],\&quot;${operatory_id_10}\&quot;:[4],\&quot;${operatory_id_11}\&quot;:[4],\&quot;${operatory_id_12}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_13}\&quot;:[4],\&quot;${operatory_id_14}\&quot;:[44],\&quot;${operatory_id_15}\&quot;:[63,21,30],\&quot;${operatory_id_16}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_17}\&quot;:[63,44,4],\&quot;${operatory_id_18}\&quot;:[21,30,4],\&quot;${operatory_id_19}\&quot;:[73,30,63,4],\&quot;${operatory_id_20}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_21}\&quot;:[63,31,13,4],\&quot;${operatory_id_22}\&quot;:[29],\&quot;${operatory_id_23}\&quot;:[63,31,13],\&quot;${operatory_id_24}\&quot;:[4],\&quot;${operatory_id_25}\&quot;:[4],\&quot;${operatory_id_26}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_27}\&quot;:[4],\&quot;${operatory_id_28}\&quot;:[44],\&quot;${operatory_id_29}\&quot;:[63,21,30],\&quot;${operatory_id_30}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_31}\&quot;:[63,44,4],\&quot;${operatory_id_32}\&quot;:[21,30,4],\&quot;${operatory_id_33}\&quot;:[73,30,63,4],\&quot;${operatory_id_34}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_35}\&quot;:[63,31,13,4],\&quot;${operatory_id_36}\&quot;:[29],\&quot;${operatory_id_37}\&quot;:[63,31,13],\&quot;${operatory_id_38}\&quot;:[4],\&quot;${operatory_id_39}\&quot;:[4],\&quot;${operatory_id_40}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_41}\&quot;:[4],\&quot;${operatory_id_42}\&quot;:[44],\&quot;${operatory_id_43}\&quot;:[63,21,30],\&quot;${operatory_id_44}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_45}\&quot;:[63,44,4],\&quot;${operatory_id_46}\&quot;:[21,30,4],\&quot;${operatory_id_47}\&quot;:[73,30,63,4],\&quot;${operatory_id_48}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_49}\&quot;:[63,31,13,4],\&quot;${operatory_id_50}\&quot;:[29],\&quot;${operatory_id_51}\&quot;:[63,31,13],\&quot;${operatory_id_52}\&quot;:[4],\&quot;${operatory_id_53}\&quot;:[4],\&quot;${operatory_id_54}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_55}\&quot;:[4],\&quot;${operatory_id_56}\&quot;:[44],\&quot;${operatory_id_57}\&quot;:[63,21,30],\&quot;${operatory_id_58}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_59}\&quot;:[63,44,4],\&quot;${operatory_id_60}\&quot;:[21,30,4]}&quot;,&#xd;
  &quot;templateRecurrence&quot;: {&#xd;
    &quot;locationId&quot;: 0,&#xd;
    &quot;providerId&quot;: 0,&#xd;
    &quot;templateType&quot;: 0,&#xd;
    &quot;templateId&quot;: 0,&#xd;
    &quot;dayOfWeek&quot;: 1,&#xd;
    &quot;date&quot;: null,&#xd;
    &quot;recurrenceMode&quot;: 1,&#xd;
    &quot;interval&quot;: 1,&#xd;
    &quot;ordinal&quot;: null,&#xd;
    &quot;rowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;providerAvailability&quot;: null,&#xd;
  &quot;rowVersionStamp&quot;: &quot;AAAAAAkcsw8=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST  template_Tuesday" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;templateId&quot;: 0,&#xd;
  &quot;locationId&quot;: ${location_id},&#xd;
  &quot;providerId&quot;: 0,&#xd;
  &quot;templateName&quot;: &quot;Default Tuesday&quot;,&#xd;
  &quot;startDate&quot;: &quot;2019-01-01T13:55:39.21&quot;,&#xd;
  &quot;templateType&quot;: 0,&#xd;
  &quot;priority&quot;: 1,&#xd;
  &quot;isSystemCreated&quot;: false,&#xd;
  &quot;slotDefinition&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_2}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_3}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_4}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_5}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_6}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_7}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_8}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_9}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_10}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_11}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_12}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_13}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_14}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_15}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_16}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_17}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_18}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_19}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_20}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_21}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_22}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_23}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_24}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_25}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_26}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_27}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_28}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_29}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_30}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_31}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_32}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_33}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_34}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_35}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_36}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_37}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_38}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_39}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_40}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_41}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_42}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_43}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_44}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_45}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_46}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_47}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_48}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_49}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_50}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_51}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_52}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_53}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_54}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_55}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_56}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_57}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_58}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_59}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_60}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]]}&quot;,&#xd;
  &quot;productionTypeId&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[63,21,30],\&quot;${operatory_id_2}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_3}\&quot;:[63,44,4],\&quot;${operatory_id_4}\&quot;:[21,30,4],\&quot;${operatory_id_5}\&quot;:[73,30,63,4],\&quot;${operatory_id_6}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_7}\&quot;:[63,31,13,4],\&quot;${operatory_id_8}\&quot;:[29],\&quot;${operatory_id_9}\&quot;:[63,31,13],\&quot;${operatory_id_10}\&quot;:[4],\&quot;${operatory_id_11}\&quot;:[4],\&quot;${operatory_id_12}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_13}\&quot;:[4],\&quot;${operatory_id_14}\&quot;:[44],\&quot;${operatory_id_15}\&quot;:[63,21,30],\&quot;${operatory_id_16}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_17}\&quot;:[63,44,4],\&quot;${operatory_id_18}\&quot;:[21,30,4],\&quot;${operatory_id_19}\&quot;:[73,30,63,4],\&quot;${operatory_id_20}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_21}\&quot;:[63,31,13,4],\&quot;${operatory_id_22}\&quot;:[29],\&quot;${operatory_id_23}\&quot;:[63,31,13],\&quot;${operatory_id_24}\&quot;:[4],\&quot;${operatory_id_25}\&quot;:[4],\&quot;${operatory_id_26}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_27}\&quot;:[4],\&quot;${operatory_id_28}\&quot;:[44],\&quot;${operatory_id_29}\&quot;:[63,21,30],\&quot;${operatory_id_30}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_31}\&quot;:[63,44,4],\&quot;${operatory_id_32}\&quot;:[21,30,4],\&quot;${operatory_id_33}\&quot;:[73,30,63,4],\&quot;${operatory_id_34}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_35}\&quot;:[63,31,13,4],\&quot;${operatory_id_36}\&quot;:[29],\&quot;${operatory_id_37}\&quot;:[63,31,13],\&quot;${operatory_id_38}\&quot;:[4],\&quot;${operatory_id_39}\&quot;:[4],\&quot;${operatory_id_40}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_41}\&quot;:[4],\&quot;${operatory_id_42}\&quot;:[44],\&quot;${operatory_id_43}\&quot;:[63,21,30],\&quot;${operatory_id_44}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_45}\&quot;:[63,44,4],\&quot;${operatory_id_46}\&quot;:[21,30,4],\&quot;${operatory_id_47}\&quot;:[73,30,63,4],\&quot;${operatory_id_48}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_49}\&quot;:[63,31,13,4],\&quot;${operatory_id_50}\&quot;:[29],\&quot;${operatory_id_51}\&quot;:[63,31,13],\&quot;${operatory_id_52}\&quot;:[4],\&quot;${operatory_id_53}\&quot;:[4],\&quot;${operatory_id_54}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_55}\&quot;:[4],\&quot;${operatory_id_56}\&quot;:[44],\&quot;${operatory_id_57}\&quot;:[63,21,30],\&quot;${operatory_id_58}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_59}\&quot;:[63,44,4],\&quot;${operatory_id_60}\&quot;:[21,30,4]}&quot;,&#xd;
  &quot;templateRecurrence&quot;: {&#xd;
    &quot;locationId&quot;: 0,&#xd;
    &quot;providerId&quot;: 0,&#xd;
    &quot;templateType&quot;: 0,&#xd;
    &quot;templateId&quot;: 0,&#xd;
    &quot;dayOfWeek&quot;: 2,&#xd;
    &quot;date&quot;: null,&#xd;
    &quot;recurrenceMode&quot;: 1,&#xd;
    &quot;interval&quot;: 1,&#xd;
    &quot;ordinal&quot;: null,&#xd;
    &quot;rowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;providerAvailability&quot;: null,&#xd;
  &quot;rowVersionStamp&quot;: &quot;AAAAAAkcsw8=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST template_Wednesday" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;templateId&quot;: 0,&#xd;
  &quot;locationId&quot;: ${location_id},&#xd;
  &quot;providerId&quot;: 0,&#xd;
  &quot;templateName&quot;: &quot;Default Wednesday&quot;,&#xd;
  &quot;startDate&quot;: &quot;2019-01-01T13:55:39.21&quot;,&#xd;
  &quot;templateType&quot;: 0,&#xd;
  &quot;priority&quot;: 1,&#xd;
  &quot;isSystemCreated&quot;: false,&#xd;
  &quot;slotDefinition&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_2}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_3}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_4}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_5}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_6}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_7}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_8}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_9}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_10}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_11}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_12}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_13}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_14}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_15}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_16}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_17}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_18}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_19}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_20}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_21}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_22}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_23}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_24}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_25}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_26}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_27}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_28}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_29}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_30}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_31}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_32}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_33}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_34}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_35}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_36}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_37}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_38}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_39}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_40}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_41}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_42}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_43}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_44}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_45}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_46}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_47}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_48}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_49}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_50}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_51}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_52}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_53}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_54}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_55}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_56}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_57}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_58}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_59}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_60}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]]}&quot;,&#xd;
  &quot;productionTypeId&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[63,21,30],\&quot;${operatory_id_2}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_3}\&quot;:[63,44,4],\&quot;${operatory_id_4}\&quot;:[21,30,4],\&quot;${operatory_id_5}\&quot;:[73,30,63,4],\&quot;${operatory_id_6}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_7}\&quot;:[63,31,13,4],\&quot;${operatory_id_8}\&quot;:[29],\&quot;${operatory_id_9}\&quot;:[63,31,13],\&quot;${operatory_id_10}\&quot;:[4],\&quot;${operatory_id_11}\&quot;:[4],\&quot;${operatory_id_12}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_13}\&quot;:[4],\&quot;${operatory_id_14}\&quot;:[44],\&quot;${operatory_id_15}\&quot;:[63,21,30],\&quot;${operatory_id_16}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_17}\&quot;:[63,44,4],\&quot;${operatory_id_18}\&quot;:[21,30,4],\&quot;${operatory_id_19}\&quot;:[73,30,63,4],\&quot;${operatory_id_20}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_21}\&quot;:[63,31,13,4],\&quot;${operatory_id_22}\&quot;:[29],\&quot;${operatory_id_23}\&quot;:[63,31,13],\&quot;${operatory_id_24}\&quot;:[4],\&quot;${operatory_id_25}\&quot;:[4],\&quot;${operatory_id_26}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_27}\&quot;:[4],\&quot;${operatory_id_28}\&quot;:[44],\&quot;${operatory_id_29}\&quot;:[63,21,30],\&quot;${operatory_id_30}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_31}\&quot;:[63,44,4],\&quot;${operatory_id_32}\&quot;:[21,30,4],\&quot;${operatory_id_33}\&quot;:[73,30,63,4],\&quot;${operatory_id_34}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_35}\&quot;:[63,31,13,4],\&quot;${operatory_id_36}\&quot;:[29],\&quot;${operatory_id_37}\&quot;:[63,31,13],\&quot;${operatory_id_38}\&quot;:[4],\&quot;${operatory_id_39}\&quot;:[4],\&quot;${operatory_id_40}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_41}\&quot;:[4],\&quot;${operatory_id_42}\&quot;:[44],\&quot;${operatory_id_43}\&quot;:[63,21,30],\&quot;${operatory_id_44}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_45}\&quot;:[63,44,4],\&quot;${operatory_id_46}\&quot;:[21,30,4],\&quot;${operatory_id_47}\&quot;:[73,30,63,4],\&quot;${operatory_id_48}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_49}\&quot;:[63,31,13,4],\&quot;${operatory_id_50}\&quot;:[29],\&quot;${operatory_id_51}\&quot;:[63,31,13],\&quot;${operatory_id_52}\&quot;:[4],\&quot;${operatory_id_53}\&quot;:[4],\&quot;${operatory_id_54}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_55}\&quot;:[4],\&quot;${operatory_id_56}\&quot;:[44],\&quot;${operatory_id_57}\&quot;:[63,21,30],\&quot;${operatory_id_58}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_59}\&quot;:[63,44,4],\&quot;${operatory_id_60}\&quot;:[21,30,4]}&quot;,&#xd;
  &quot;templateRecurrence&quot;: {&#xd;
    &quot;locationId&quot;: 0,&#xd;
    &quot;providerId&quot;: 0,&#xd;
    &quot;templateType&quot;: 0,&#xd;
    &quot;templateId&quot;: 0,&#xd;
    &quot;dayOfWeek&quot;: 3,&#xd;
    &quot;date&quot;: null,&#xd;
    &quot;recurrenceMode&quot;: 1,&#xd;
    &quot;interval&quot;: 1,&#xd;
    &quot;ordinal&quot;: null,&#xd;
    &quot;rowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;providerAvailability&quot;: null,&#xd;
  &quot;rowVersionStamp&quot;: &quot;AAAAAAkcsw8=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST template_Thursday" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;templateId&quot;: 0,&#xd;
  &quot;locationId&quot;: ${location_id},&#xd;
  &quot;providerId&quot;: 0,&#xd;
  &quot;templateName&quot;: &quot;Default Thursday&quot;,&#xd;
  &quot;startDate&quot;: &quot;2019-01-01T13:55:39.21&quot;,&#xd;
  &quot;templateType&quot;: 0,&#xd;
  &quot;priority&quot;: 1,&#xd;
  &quot;isSystemCreated&quot;: true,&#xd;
  &quot;slotDefinition&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_2}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_3}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_4}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_5}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_6}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_7}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_8}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_9}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_10}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_11}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_12}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_13}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_14}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_15}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_16}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_17}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_18}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_19}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_20}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_21}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_22}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_23}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_24}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_25}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_26}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_27}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_28}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_29}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_30}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_31}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_32}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_33}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_34}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_35}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_36}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_37}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_38}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_39}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_40}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_41}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_42}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_43}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_44}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_45}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_46}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_47}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_48}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_49}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_50}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_51}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_52}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_53}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_54}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_55}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_56}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_57}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_58}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_59}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_60}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]]}&quot;,&#xd;
  &quot;productionTypeId&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[63,21,30],\&quot;${operatory_id_2}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_3}\&quot;:[63,44,4],\&quot;${operatory_id_4}\&quot;:[21,30,4],\&quot;${operatory_id_5}\&quot;:[73,30,63,4],\&quot;${operatory_id_6}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_7}\&quot;:[63,31,13,4],\&quot;${operatory_id_8}\&quot;:[29],\&quot;${operatory_id_9}\&quot;:[63,31,13],\&quot;${operatory_id_10}\&quot;:[4],\&quot;${operatory_id_11}\&quot;:[4],\&quot;${operatory_id_12}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_13}\&quot;:[4],\&quot;${operatory_id_14}\&quot;:[44],\&quot;${operatory_id_15}\&quot;:[63,21,30],\&quot;${operatory_id_16}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_17}\&quot;:[63,44,4],\&quot;${operatory_id_18}\&quot;:[21,30,4],\&quot;${operatory_id_19}\&quot;:[73,30,63,4],\&quot;${operatory_id_20}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_21}\&quot;:[63,31,13,4],\&quot;${operatory_id_22}\&quot;:[29],\&quot;${operatory_id_23}\&quot;:[63,31,13],\&quot;${operatory_id_24}\&quot;:[4],\&quot;${operatory_id_25}\&quot;:[4],\&quot;${operatory_id_26}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_27}\&quot;:[4],\&quot;${operatory_id_28}\&quot;:[44],\&quot;${operatory_id_29}\&quot;:[63,21,30],\&quot;${operatory_id_30}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_31}\&quot;:[63,44,4],\&quot;${operatory_id_32}\&quot;:[21,30,4],\&quot;${operatory_id_33}\&quot;:[73,30,63,4],\&quot;${operatory_id_34}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_35}\&quot;:[63,31,13,4],\&quot;${operatory_id_36}\&quot;:[29],\&quot;${operatory_id_37}\&quot;:[63,31,13],\&quot;${operatory_id_38}\&quot;:[4],\&quot;${operatory_id_39}\&quot;:[4],\&quot;${operatory_id_40}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_41}\&quot;:[4],\&quot;${operatory_id_42}\&quot;:[44],\&quot;${operatory_id_43}\&quot;:[63,21,30],\&quot;${operatory_id_44}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_45}\&quot;:[63,44,4],\&quot;${operatory_id_46}\&quot;:[21,30,4],\&quot;${operatory_id_47}\&quot;:[73,30,63,4],\&quot;${operatory_id_48}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_49}\&quot;:[63,31,13,4],\&quot;${operatory_id_50}\&quot;:[29],\&quot;${operatory_id_51}\&quot;:[63,31,13],\&quot;${operatory_id_52}\&quot;:[4],\&quot;${operatory_id_53}\&quot;:[4],\&quot;${operatory_id_54}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_55}\&quot;:[4],\&quot;${operatory_id_56}\&quot;:[44],\&quot;${operatory_id_57}\&quot;:[63,21,30],\&quot;${operatory_id_58}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_59}\&quot;:[63,44,4],\&quot;${operatory_id_60}\&quot;:[21,30,4]}&quot;,&#xd;
  &quot;templateRecurrence&quot;: {&#xd;
    &quot;locationId&quot;: 0,&#xd;
    &quot;providerId&quot;: 0,&#xd;
    &quot;templateType&quot;: 0,&#xd;
    &quot;templateId&quot;: 0,&#xd;
    &quot;dayOfWeek&quot;: 4,&#xd;
    &quot;date&quot;: null,&#xd;
    &quot;recurrenceMode&quot;: 1,&#xd;
    &quot;interval&quot;: 1,&#xd;
    &quot;ordinal&quot;: null,&#xd;
    &quot;rowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;providerAvailability&quot;: null,&#xd;
  &quot;rowVersionStamp&quot;: &quot;AAAAAAkcsw8=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST template_Friday" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;templateId&quot;: 0,&#xd;
  &quot;locationId&quot;: ${location_id},&#xd;
  &quot;providerId&quot;: 0,&#xd;
  &quot;templateName&quot;: &quot;Default Friday&quot;,&#xd;
  &quot;startDate&quot;: &quot;2019-01-01T13:55:39.21&quot;,&#xd;
  &quot;templateType&quot;: 0,&#xd;
  &quot;priority&quot;: 1,&#xd;
  &quot;isSystemCreated&quot;: false,&#xd;
  &quot;slotDefinition&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_2}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_3}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_4}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_5}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_6}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_7}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_8}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_9}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_10}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_11}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_12}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_13}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_14}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_15}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_16}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_17}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_18}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_19}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_20}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_21}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_22}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_23}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_24}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_25}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_26}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_27}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_28}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_29}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_30}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_31}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_32}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_33}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_34}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_35}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_36}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_37}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_38}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_39}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_40}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_41}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_42}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_43}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_44}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_45}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_46}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_47}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]],\&quot;${operatory_id_48}\&quot;:[[97,204,4,0]],\&quot;${operatory_id_49}\&quot;:[[100,201,4,0]],\&quot;${operatory_id_50}\&quot;:[[145,156,63,0],[97,105,31,0],[109,117,31,0],[133,141,31,0],[121,129,13,0],[169,177,31,0],[181,189,31,0],[106,108,4,0],[193,201,60,0],[118,120,4,0],[130,132,4,0],[157,165,13,0],[142,144,4,0],[166,168,4,0],[178,180,4,0],[190,192,4,0],[202,204,4,0]],\&quot;${operatory_id_51}\&quot;:[[97,186,4,0]],\&quot;${operatory_id_52}\&quot;:[[97,180,44,0]],\&quot;${operatory_id_53}\&quot;:[[145,156,63,0],[97,144,21,0],[157,192,21,0],[193,204,30,0]],\&quot;${operatory_id_54}\&quot;:[[109,120,73,0],[133,144,73,0],[97,108,19,0],[169,180,73,0],[145,156,63,0],[121,132,12,0],[157,168,19,0],[193,204,30,0],[181,192,12,0]],\&quot;${operatory_id_55}\&quot;:[[145,156,63,0],[97,138,44,0],[157,198,44,0],[139,144,4,0],[199,204,4,0]],\&quot;${operatory_id_56}\&quot;:[[97,144,21,0],[157,192,30,0],[193,204,4,0]],\&quot;${operatory_id_57}\&quot;:[[103,144,73,0],[91,102,30,0],[157,192,73,0],[145,156,63,0],[193,204,4,0]],\&quot;${operatory_id_58}\&quot;:[[127,132,36,0],[133,144,44,0],[145,156,63,0],[91,102,19,0],[115,126,19,0],[103,114,12,0],[157,168,19,0],[181,192,30,0],[169,180,12,0],[193,204,4,0]],\&quot;${operatory_id_59}\&quot;:[[145,156,63,0],[97,108,31,0],[121,144,31,0],[109,114,13,0],[157,168,31,0],[181,204,31,0],[115,120,4,0],[169,174,13,0],[175,180,4,0]],\&quot;${operatory_id_60}\&quot;:[[97,204,29,0]],\&quot;42\&quot;:[[145,156,63,0],[103,144,31,0],[97,102,13,0],[157,180,31,0],[187,204,31,0],[181,186,13,0]]}&quot;,&#xd;
  &quot;productionTypeId&quot;: &quot;{\&quot;${operatory_id_1}\&quot;:[63,21,30],\&quot;${operatory_id_2}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_3}\&quot;:[63,44,4],\&quot;${operatory_id_4}\&quot;:[21,30,4],\&quot;${operatory_id_5}\&quot;:[73,30,63,4],\&quot;${operatory_id_6}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_7}\&quot;:[63,31,13,4],\&quot;${operatory_id_8}\&quot;:[29],\&quot;${operatory_id_9}\&quot;:[63,31,13],\&quot;${operatory_id_10}\&quot;:[4],\&quot;${operatory_id_11}\&quot;:[4],\&quot;${operatory_id_12}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_13}\&quot;:[4],\&quot;${operatory_id_14}\&quot;:[44],\&quot;${operatory_id_15}\&quot;:[63,21,30],\&quot;${operatory_id_16}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_17}\&quot;:[63,44,4],\&quot;${operatory_id_18}\&quot;:[21,30,4],\&quot;${operatory_id_19}\&quot;:[73,30,63,4],\&quot;${operatory_id_20}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_21}\&quot;:[63,31,13,4],\&quot;${operatory_id_22}\&quot;:[29],\&quot;${operatory_id_23}\&quot;:[63,31,13],\&quot;${operatory_id_24}\&quot;:[4],\&quot;${operatory_id_25}\&quot;:[4],\&quot;${operatory_id_26}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_27}\&quot;:[4],\&quot;${operatory_id_28}\&quot;:[44],\&quot;${operatory_id_29}\&quot;:[63,21,30],\&quot;${operatory_id_30}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_31}\&quot;:[63,44,4],\&quot;${operatory_id_32}\&quot;:[21,30,4],\&quot;${operatory_id_33}\&quot;:[73,30,63,4],\&quot;${operatory_id_34}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_35}\&quot;:[63,31,13,4],\&quot;${operatory_id_36}\&quot;:[29],\&quot;${operatory_id_37}\&quot;:[63,31,13],\&quot;${operatory_id_38}\&quot;:[4],\&quot;${operatory_id_39}\&quot;:[4],\&quot;${operatory_id_40}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_41}\&quot;:[4],\&quot;${operatory_id_42}\&quot;:[44],\&quot;${operatory_id_43}\&quot;:[63,21,30],\&quot;${operatory_id_44}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_45}\&quot;:[63,44,4],\&quot;${operatory_id_46}\&quot;:[21,30,4],\&quot;${operatory_id_47}\&quot;:[73,30,63,4],\&quot;${operatory_id_48}\&quot;:[36,44,63,19,12,30,4],\&quot;${operatory_id_49}\&quot;:[63,31,13,4],\&quot;${operatory_id_50}\&quot;:[29],\&quot;${operatory_id_51}\&quot;:[63,31,13],\&quot;${operatory_id_52}\&quot;:[4],\&quot;${operatory_id_53}\&quot;:[4],\&quot;${operatory_id_54}\&quot;:[63,31,13,4,60],\&quot;${operatory_id_55}\&quot;:[4],\&quot;${operatory_id_56}\&quot;:[44],\&quot;${operatory_id_57}\&quot;:[63,21,30],\&quot;${operatory_id_58}\&quot;:[73,19,63,12,30],\&quot;${operatory_id_59}\&quot;:[63,44,4],\&quot;${operatory_id_60}\&quot;:[21,30,4]}&quot;,&#xd;
  &quot;templateRecurrence&quot;: {&#xd;
    &quot;locationId&quot;: 0,&#xd;
    &quot;providerId&quot;: 0,&#xd;
    &quot;templateType&quot;: 0,&#xd;
    &quot;templateId&quot;: 0,&#xd;
    &quot;dayOfWeek&quot;: 5,&#xd;
    &quot;date&quot;: null,&#xd;
    &quot;recurrenceMode&quot;: 1,&#xd;
    &quot;interval&quot;: 1,&#xd;
    &quot;ordinal&quot;: null,&#xd;
    &quot;rowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;providerAvailability&quot;: null,&#xd;
  &quot;rowVersionStamp&quot;: &quot;AAAAAAkcsw8=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Pat. Eng. - Data set-up queries (Transaction Controller)" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patients who have chat history (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool_pateng</stringProp>
              <stringProp name="query">SELECT DISTINCT TOP 500 PatientID
FROM pat_eng.TextChatLog
WHERE AccountId = ${account_id}
AND PatientId IS NOT NULL</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_with_chat_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mobile number related data set-up (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select mobile number of potential patients (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool_pateng</stringProp>
              <stringProp name="query">SELECT TOP 100 Mobile
FROM pat_eng.TextChatLog
WHERE AccountId = ${account_id}  
AND PatientId IS NULL

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;mobile_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select formatted mobile number for potential patients (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool_pateng</stringProp>
              <stringProp name="query">SELECT REPLACE(Mobile, &apos; &apos;, &apos;%20&apos;)
FROM pat_eng.TextChatLog
WHERE AccountId = ${account_id}  
AND PatientId IS NULL

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;formatted_mobile_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="MySQL - Data set-up queries (Transaction Controller)" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User related data set-up (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select users in MYSQLdb (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool_mysql</stringProp>
              <stringProp name="query">SELECT UserId 
FROM cschatloadtest.chatusers
WHERE AccountId = ${account_id}
LIMIT 500</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;user_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store query fetched account id to a variable, to share across all other data set-up queries (JSR223 PostProcessor)" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
    }
}
vars.put(&quot;user_id&quot;,result.toString())</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient creation data set-up (Transaction Controller)" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Patient creation (Loop Controller)" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">100</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID supplier (CSV Data Set Config)" enabled="true">
              <stringProp name="filename">${test_plan_path}${location_id_repo}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">location_id</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="First and last name randomizer (Random Variable)" enabled="true">
              <stringProp name="variableName">random_number</stringProp>
              <stringProp name="outputFormat">000000</stringProp>
              <stringProp name="minimumValue">999</stringProp>
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="randomSeed">777</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Add patient" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;prefix&quot;: &quot;&quot;,&#xd;
  &quot;firstName&quot;:&quot;LOAD_TEST_PAT_${random_number}&quot;,&#xd;
  &quot;lastName&quot;:&quot;LOAD_TEST_PAT_${random_number}&quot;,&#xd;
  &quot;middleName&quot;: &quot;&quot;,&#xd;
  &quot;suffix&quot;: &quot;&quot;,&#xd;
  &quot;feeScheduleId&quot;: null,&#xd;
  &quot;dob&quot;: &quot;01/01/1987&quot;,&#xd;
  &quot;gender&quot;: &quot;Male&quot;,&#xd;
  &quot;nickName&quot;: &quot;&quot;,&#xd;
  &quot;maritalStatus&quot;: &quot;&quot;,&#xd;
  &quot;ssn&quot;: &quot;&quot;,&#xd;
  &quot;driverLicence&quot;: &quot;&quot;,&#xd;
  &quot;labels&quot;: [],&#xd;
  &quot;textNotification&quot;: false,&#xd;
  &quot;addressDetail&quot;: null,&#xd;
  &quot;postalNotification&quot;: false,&#xd;
  &quot;phoneWithExt&quot;: &quot;&quot;,&#xd;
  &quot;mobile&quot;: &quot;&quot;,&#xd;
  &quot;workPhoneWithExt&quot;: &quot;&quot;,&#xd;
  &quot;fax&quot;: &quot;&quot;,&#xd;
  &quot;preferredContactVoiceMedium&quot;: &quot;&quot;,&#xd;
  &quot;voiceNotification&quot;: false,&#xd;
  &quot;patientEmail&quot;: {&#xd;
    &quot;email&quot;: &quot;&quot;,&#xd;
    &quot;revealEmail&quot;: true,&#xd;
    &quot;emailNotification&quot;: false,&#xd;
    &quot;receivePromotionEmailNotification&quot;: false,&#xd;
    &quot;allowPortalAccess&quot;: false&#xd;
  },&#xd;
  &quot;defaultLocationID&quot;: ${location_id},&#xd;
  &quot;isOrthoPatient&quot;: false,&#xd;
  &quot;isReferredPatient&quot;: false,&#xd;
  &quot;referralSource&quot;: &quot;&quot;,&#xd;
  &quot;referralSourceSubCategoryID&quot;: null,&#xd;
  &quot;referralPatientId&quot;: null,&#xd;
  &quot;referralProviderId&quot;: null,&#xd;
  &quot;practiceProviderID&quot;: null,&#xd;
  &quot;externalProviderID&quot;: null,&#xd;
  &quot;preferedProviderGender&quot;: &quot;Not Applicable&quot;,&#xd;
  &quot;relationshipToResponsibleParty&quot;: &quot;Self&quot;,&#xd;
  &quot;responsiblePartyPatientId&quot;: null,&#xd;
  &quot;defaultProviderId&quot;: null,&#xd;
  &quot;defaultHygenistId&quot;: null,&#xd;
  &quot;EmergencyContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactPrefix&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactFirstName&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactLastName&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactRelationship&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/add?skipDuplicateCheck=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: PatientID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">patient_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.PatientID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to patient id repo (BeanShell PostProcessor)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">${patient_id}</stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">// get variables from regular expression extractor 
patient_id = vars.get(&quot;patient_id&quot;);
patient_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_repo&quot;);
 try
{
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(patient_id_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(patient_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching patient id&quot;);
}</stringProp>
                <stringProp name="TestPlan.comments">Writes all the patient IDs of created patients to the patient id repo</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Startup delay (setUp Thread Group)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1</stringProp>
        <stringProp name="ThreadGroup.delay">180</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Ramp up Control (Thread Group)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Ramp - up control (JSR223 Sampler)" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// definition of how the ramp-up should look like
// e.g. starting with 10% of the target throughput, finishing at 100% (full target throughput), while doing 1% steps
float start = 0.1;
float end = Float.parseFloat(vars.get(&quot;throughput_modifier&quot;));
float step = 0.01;
int final_throughput = 0; 
// computing how much time to spend (sleep) on each step
float numberOfSleeps = (end - start) / step; 
int sleepDuration =  Math.round((Integer.parseInt(vars.get(&quot;ramp_up_time_mins&quot;))*60) / (numberOfSleeps));

if (sleepDuration &lt; 1)
{
	 sleepDuration = 1
}

log.info(&quot;Sleep duration - &quot; + sleepDuration)
// setting the throughput modifier property during the execution of the script, it will be picked up by CTT components
// the correct interval between load increases is enforced by the sleep
for (float i = start; i &lt;= end; i = i + step) {
	i = 1; 
    props.put(&quot;prop_throughput_modifier&quot;, i.toString());
    log.info(&quot;THROUGPUT MODIFIER :&quot; + i.toString())
    Thread.sleep(sleepDuration * 1000);
    final_throughput = Math.round(i)
}

props.put(&quot;prop_throughput_modifier&quot;, final_throughput.toString());
log.info(&quot;FINAL THROUGHPUT: &quot; + props.get(&quot;prop_throughput_modifier&quot;))</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="General - Login requests (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID with appointment for date supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_with_appointment_for_date_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id_with_appointment_for_date</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">\n</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Appointment ID for date supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${appointment_id_for_date_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">appointment_id_for_date</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">\n</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login requests (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Login requests throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Login requests throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${throughput_login_requests}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login requests (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST setup/user/get-user-login-context" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/user/get-user-login-context</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="User Id (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">user_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.UserID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET billing/closeOut/getCloseOutDate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">billing/closeOut/getCloseOutDate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET configurations/0/&lt;&lt;appointment_location_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">configurations/0/${appointment_location_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment-schedule/has-failed-transactions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment-schedule/has-failed-transactions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/get-appointment-summary/&lt;&lt;scheduler_dashboard_date&gt;&gt;/&lt;&lt;appointment_location_id&gt;&gt;?includeStatusUpdateTime=true" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="includeStatusUpdateTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeStatusUpdateTime</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments/get-appointment-summary/${scheduler_dashboard_date}/${appointment_location_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">		</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Appointment ids of patients who has appointments (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">appointment_id_for_date</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*].appointmentId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PatientIds with appointments for the date (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">patient_id_with_appointment_for_date</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*].patientId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET recent-patients/get" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">recent-patients/get</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET timeclock/get-clockout-status/&lt;&lt;user_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">timeclock/get-clockout-status/${user_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET message/get-message-count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">message/get-message-count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET cspay/has-notifications" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">cspay/has-notifications</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET e-prescription/&lt;&lt;appointment_location_id&gt;&gt;/user/is-enabled" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">e-prescription/${appointment_location_id}/user/is-enabled</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET user/locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">user/locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointmentstatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointmentstatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-plans" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-plans</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-employers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-employers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET productiontype" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">productiontype</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/providers/locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/providers/locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/get-scheduler-settings" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/get-scheduler-settings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-location-and-account-working-hours" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-location-and-account-working-hours</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-operatories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-operatories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-payors" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-payors</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/account/config/INSURANCE-VERIFICATION" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/account/config/INSURANCE-VERIFICATION</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/patient-portal/get" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payments/patient-portal/get</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[DUPLICATE] GET timeclock/get-clockout-status/&lt;&lt;user_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">timeclock/get-clockout-status/${user_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/get-appointment-summary/&lt;&lt;scheduler_dashboard_date&gt;&gt;/&lt;&lt;appointment_location_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments/get-appointment-summary/${scheduler_dashboard_date}/${appointment_location_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST timeclock/get-clockIn-details?fromDate=&lt;&lt;scheduler_dashboard_date&gt;&gt;&amp;toDate=&lt;&lt;scheduler_dashboard_date&gt;&gt;" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${user_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">timeclock/get-clockIn-details?fromDate=${scheduler_dashboard_date}&amp;toDate=${scheduler_dashboard_date}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-patient-summary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-summary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[DUPLICATE] POST patient/get-patient-summary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-summary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary?includeUnapplied=true" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-account-summary?includeUnapplied=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/patients/pending-forms" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/patients/pending-forms</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/medical-history/pending/patients" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/medical-history/pending/patients</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST carenotes/has-pending-notes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">carenotes/has-pending-notes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Appointments/patient/insurance-info" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Appointments/patient/insurance-info</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/medical-alert/patient" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/medical-alert/patient</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST alert/patient/overview" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/patient/overview</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/get-code-details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${appointment_id_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments/get-code-details</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/treatment-procedures/unscheduled-status" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/treatment-procedures/unscheduled-status</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="General - Global search (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Global search (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Global search throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Global search throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_global_search})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/global-search/" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;IncludeInactivePatients&quot;: false,&#xd;
	&quot;PageIndex&quot;: 0,&#xd;
	&quot;SearchText&quot;: &quot;Je&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="General - Visit Home Page (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID with appointment for date supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_with_appointment_for_date_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id_with_appointment_for_date</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">\n</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Appointment ID for date supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${appointment_id_for_date_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">appointment_id_for_date</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">\n</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Visit home page (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Visit home page regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Visit home page throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_visit_home_page})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/get-appointment-summary/&lt;&lt;scheduler_dashboard_date&gt;&gt;/&lt;&lt;appointment_location_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/get-appointment-summary/${scheduler_dashboard_date}/${appointment_location_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PatientIds with appointments for the date (JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">patient_id_with_appointment_for_date</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*].patientId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Appointment ids of patients who has appointments (JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">appointment_id_for_date</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*].appointmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-patient-summary" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/get-patient-summary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary?includeUnapplied=true" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/get-account-summary?includeUnapplied=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/patients/pending-forms" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/pending-forms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/medical-history/pending/patients" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/medical-history/pending/patients</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST carenotes/has-pending-notes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">carenotes/has-pending-notes</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Appointments/patient/insurance-info" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Appointments/patient/insurance-info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/medical-alert/patient" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/medical-alert/patient</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST alert/patient/overview" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">alert/patient/overview</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/get-code-details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${appointment_id_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/get-code-details</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/treatment-procedures/unscheduled-status" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date_ALL}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">clinical/treatment-procedures/unscheduled-status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="General - Patient tracker (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID with appointment for date supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_with_appointment_for_date_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id_with_appointment_for_date</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">\n</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient tracker (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient tracker throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient tracker throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_tracker})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/get-appointment-summary/&lt;&lt;scheduler_dashboard_date&gt;&gt;/&lt;&lt;appointment_location_id&gt;&gt;?includeStatusUpdateTime=true" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/get-appointment-summary/${scheduler_dashboard_date}/${appointment_location_id}?includeStatusUpdateTime=true</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-patient-summary" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_appointment_for_date}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/get-patient-summary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient - Patient overview load  (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View patient overview (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient record load throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient record load throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_record_load})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Patient overview look-up browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-fee-schedules" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-fee-schedules</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-referral-categories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-referral-categories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">		</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-referral-subcategories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-referral-subcategories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET referral-provider" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">referral-provider</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-plans" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-plans</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-payors" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-payors</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-procedure-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-procedure-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-labels" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-labels</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-specialties" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-specialties</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient overview (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/basic-information/get/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/basic-information/get/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Identifier Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">patient_identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.PatientIdentifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/count/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/count/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-snooze-dict/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-snooze-dict/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${patient_id}/has-pending-medical-history-form</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST recent-patients/add" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;PatientID&quot;:&quot;${patient_id}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">recent-patients/add</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/PendingFormsOrLettersSummary/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/PendingFormsOrLettersSummary/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/HasPendingInsurances/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/HasPendingInsurances/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/medical-alert/v1/get/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/medical-alert/v1/get/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-overview/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-overview/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-account-summary/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-account-summary/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/active-patients?patientId=&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="patientId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">patientId</stringProp>
                    <stringProp name="Argument.value">${patient_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/active-patients</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-alerts-dict/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-alerts-dict/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET recent-patients/get" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">recent-patients/get</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/recent-lab-detail?patientId=&lt;&lt;patient_id&gt;&gt;&amp;includeReceivedAndSentDetails=false" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Appointments/recent-lab-detail?patientId=${patient_id}&amp;includeReceivedAndSentDetails=false</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-prompt/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-prompt/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient - View patient documents (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient documents view (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient documents view throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient documents view throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_documents_view})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient documents view (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Patient documents view look-up browser cached calls (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-clinical-lockout-settings" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-clinical-lockout-settings</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/document-type" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/document-type</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient documents view (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/patient/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Appointments/patient/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-basicinfo/&lt;&lt;patient_id&gt;&gt;?includeResponsibleParty=false" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-basicinfo/${patient_id}?includeResponsibleParty=false</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/&lt;&lt;patient_id&gt;&gt;/documents/get-all-async" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;FilterQuery&quot;: {},&#xd;
	&quot;OrderBy&quot;: &quot;UploadedDate desc&quot;,&#xd;
	&quot;PageIndex&quot;: 1,&#xd;
	&quot;PageSize&quot;: 15&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/${patient_id}/documents/get-all-async</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient - Memo add and view (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient note ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${note_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">note_id,patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient memo add and view (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient note add throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient note add throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_note_add})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient memo view (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Patient note view look-up browser cached calls (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-users" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-users</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-templates-by-template-type?TemplateType=Note" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="TemplateType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TemplateType</stringProp>
                      <stringProp name="Argument.value">Note</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-all-templates-by-template-type</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient memo view(Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST note/get/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;offset&quot;: 25,&#xd;
	&quot;startIndex&quot;: 1,&#xd;
	&quot;filter&quot;: &quot;&quot;,&#xd;
	&quot;sortBy&quot;: &quot;Descending&quot;,&#xd;
	&quot;filters&quot;: []&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">note/get/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient note add (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST note/add" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;PatientID&quot;: ${patient_id},&#xd;
	&quot;NoteType&quot;: &quot;Patient General&quot;,&#xd;
	&quot;NoteText&quot;: &quot;&lt;p&gt;This is an automated memo&lt;/p&gt;&quot;,&#xd;
	&quot;DocumentIds&quot;: []&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">note/add</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST note/get/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;Offset&quot;:25,&quot;StartIndex&quot;:1,&quot;Filter&quot;:&quot;&quot;,&quot;SortBy&quot;:&quot;Descending&quot;,&quot;Filters&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">note/get/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient - Medical history form view (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${non_rp_patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Medical history form view (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
          <stringProp name="TestPlan.comments">Change hardcoded document id and feed from data setup</stringProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Medical history form view throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Medical history form view throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_medicalhistoryform_view})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Medical history form view (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Medical history form view look-up browser cached calls (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-user-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-user-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-recall/get-patient-recalls/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient-recall/get-patient-recalls/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Medical history form view (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/get-medical-alert-translations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/get-medical-alert-translations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;patient_id&gt;&gt;/latest-template-meta" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${patient_id}/latest-template-meta</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;patient_id&gt;&gt;/list/true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${patient_id}/list/true</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/has-paused-payment-plans/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/has-paused-payment-plans/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-patient-insurances-with-hierarchies/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-insurance/get-patient-insurances-with-hierarchies/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;patient_id&gt;&gt;/pending-medical-history-form" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${patient_id}/pending-medical-history-form</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-prompt/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-prompt/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Scheduler load (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="false">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scheduler load (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Scheduler load throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Scheduler load throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_scheduler_load})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Scheduler load look-up browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET productiontype" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">productiontype</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointment-view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointment-view</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/get-scheduler-settings" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/get-scheduler-settings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/providers/locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/providers/locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CustomFilter" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">CustomFilter</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET production-calender/operatory-provider" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/operatory-provider</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-location-and-account-working-hours" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-location-and-account-working-hours</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET production-calender/provider-availability-template" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/provider-availability-template</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-holidays" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-holidays</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET production-calender/templates" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/templates</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-medical-alert" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-medical-alert</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-quadrants" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-quadrants</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-users" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-users</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET referral-provider" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">referral-provider</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-specialties/" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-specialties/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-procedure-codes" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-procedure-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-labels" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-labels</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-operatories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-operatories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/get-appointments-by-date-range" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;From&quot;: &quot;${month}/${day}/${random_year}&quot;,&#xd;
	&quot;To&quot;: &quot;${month}/${day}/${random_year}&quot;,&#xd;
	&quot;ShowReferralProvider&quot;: false,&#xd;
	&quot;LocationIds&quot;: [&#xd;
		${appointment_location_id}&#xd;
	]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/get-appointments-by-date-range</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Month (Random Variable)" enabled="true">
              <stringProp name="variableName">month</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">${random_month_min}</stringProp>
              <stringProp name="maximumValue">${random_month_max}</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Day (Random Variable)" enabled="true">
              <stringProp name="variableName">day</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">${random_day_min}</stringProp>
              <stringProp name="maximumValue">${random_day_max}</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET production-calender/template?timestamp=AAAAAF9V8Dc%3D" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">production-calender/template?timestamp=AAAAAF9V8Dc%3D</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointment/recurringBlockSlotError/has-unread-error" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${appointment_location_id}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointment/recurringBlockSlotError/has-unread-error</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v2.0/appointments/search" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;SearchParams&quot;:{&quot;LocationIds&quot;:[${appointment_location_id}],&quot;OnlyActive&quot;:true,&quot;DateRange&quot;:{&quot;From&quot;:&quot;1/14/2019&quot;,&quot;To&quot;:&quot;1/14/2019&quot;}}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v2.0/appointments/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PatientId(JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">patient_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[*].patientId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AppointmentId (JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">appointment_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[*].providers[0].appointmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

def patientIds = vars.get(&quot;patient_id_ALL&quot;);
def appointmentIds = vars.get(&quot;appointment_id_ALL&quot;);

log.info(&apos;patient_id_ALL: &apos; + vars.get(&apos;patient_id_ALL&apos;))
log.info(&apos;appointment_id_ALL: &apos; + vars.get(&apos;appointment_id_ALL&apos;))
def allPatientIds = patientIds.split(&apos;,&apos;);
def allAppointmentIds = appointmentIds.split(&apos;,&apos;);

def payload = [];

for(int i=0;i&lt;allPatientIds.length();i++)
{
	def body = [:]
	body.put(&apos;appointmentId&apos;, allAppointmentIds[i]);	
	body.put(&apos;patientId&apos;, allPatientIds[i]);
	payload.add(body);	
}

vars.put(&apos;payload&apos;, new groovy.json.JsonBuilder(payload).toPrettyString())

//
//jsonBuilder {
//
//    lists.collect {
//        [
//            appointmentId: vars.get(&apos;carrierid&apos;),
//            patientId: vars.get(&apos;carrierType&apos;),
//      
//        ]
//    }
//}
//vars.put(&apos;requestBody&apos;, jsonBuilder.toPrettyString())
log.info(&apos;Generated body: &apos; + vars.get(&apos;payload&apos;))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/get-appointments-related-info/false" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/get-appointments-related-info/false</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

def patientIds = vars.get(&quot;patient_id_ALL&quot;);
def appointmentIds = vars.get(&quot;appointment_id_ALL&quot;);

log.info(&apos;patient_id_ALL: &apos; + vars.get(&apos;patient_id_ALL&apos;))
log.info(&apos;appointment_id_ALL: &apos; + vars.get(&apos;appointment_id_ALL&apos;))
def allPatientIds = patientIds.split(&apos;,&apos;);
def allAppointmentIds = appointmentIds.split(&apos;,&apos;);

def payload = [];

for(int i=0;i&lt;allPatientIds.size();i++)
{
	def body = [:]
	body.put(&apos;appointmentId&apos;, allAppointmentIds[i]);	
	body.put(&apos;patientId&apos;, allPatientIds[i]);
	payload.add(body);	
}

vars.put(&apos;payload&apos;, new groovy.json.JsonBuilder(payload).toPrettyString())

//
//jsonBuilder {
//
//    lists.collect {
//        [
//            appointmentId: vars.get(&apos;carrierid&apos;),
//            patientId: vars.get(&apos;carrierType&apos;),
//      
//        ]
//    }
//}
//vars.put(&apos;requestBody&apos;, jsonBuilder.toPrettyString())
log.info(&apos;Generated body: &apos; + vars.get(&apos;payload&apos;))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Appointment booking (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID and Operatory ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${location_operatory_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">location_id,operatory_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Non RP Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${non_rp_patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">non_rp_patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ProviderID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${provider_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="false">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Appointment booking (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Scheduler slot incrementor (Counter)" enabled="true">
            <stringProp name="CounterConfig.start">${scheduler_start_slot}</stringProp>
            <stringProp name="CounterConfig.end">${scheduler_end_slot}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">slot_number</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Appointment booking throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Appointment booking throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_appointment_booking})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open appointment modal while booking appointment (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Open appointment modal while booking appointment browser cache logic (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-operatories" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-operatories</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/lab-with-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/lab-with-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open appointment modal while booking appointment (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET recent-patients/get" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">recent-patients/get</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST lookups/get-patients?PatientID=&lt;&lt;non_rp_patient_id&gt;&gt;&amp;type=P" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;Offset&quot;:15,&quot;StartIndex&quot;:0,&quot;Filter&quot;:&quot;&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-patients?PatientID=${non_rp_patient_id}&amp;type=P</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST lookups/get-patients?PatientID=null&amp;type=P&amp;filterInactivePatients=false&amp;enableAdvancedSearch=false" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;Offset&quot;:15,&quot;StartIndex&quot;:0,&quot;Filter&quot;:&quot;&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-patients?PatientID=null&amp;type=P&amp;filterInactivePatients=false&amp;enableAdvancedSearch=false</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-group/get/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-group/get/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/basic-information/get/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/basic-information/get/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RP ID (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">rp_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.ResponsiblePartyPatientID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/PendingFormsOrLettersSummary/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/PendingFormsOrLettersSummary/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-insurance/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[${non_rp_patient_id}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-account-summary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-contact-info/&lt;&lt;rp_id&gt;&gt;?isResponsibleParty=true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-contact-info/${rp_id}?isResponsibleParty=true</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/count/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">alert/count/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-snooze-dict/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">alert/get-snooze-dict/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;non_rp_patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${non_rp_patient_id}/has-pending-medical-history-form</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments-grid/get-patient-appointments/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments-grid/get-patient-appointments/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET shortcall/patient/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">shortcall/patient/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-alerts-dict/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">alert/get-alerts-dict/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] GET payment-tokenize/44/account-tokenized-payments/901173" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment-tokenize/44/account-tokenized-payments/901173</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Book an appointment (Simple Controller)" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST Appointment booking (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;appointment&quot;: {&#xd;
		&quot;startSlotNo&quot;: ${slot_number},&#xd;
		&quot;slotLength&quot;: 1,&#xd;
		&quot;operatoryId&quot;: ${operatory_id},&#xd;
		&quot;date&quot;: &quot;${appointment_date}&quot;,&#xd;
		&quot;patientId&quot;: ${non_rp_patient_id},&#xd;
		&quot;appointmentId&quot;: 0,&#xd;
		&quot;locationId&quot;: ${location_id},&#xd;
		&quot;productionTypeId&quot;: null,&#xd;
		&quot;notes&quot;: &quot;&quot;,&#xd;
		&quot;enableShortCall&quot;: false,&#xd;
		&quot;providers&quot;: [&#xd;
			{&#xd;
				&quot;specialityId&quot;: null,&#xd;
				&quot;specialityName&quot;: null,&#xd;
				&quot;providerIndex&quot; : 1,&#xd;
				&quot;providerId&quot;: ${provider_id},&#xd;
				&quot;slots&quot;: [&#xd;
          		${slot_number}&#xd;
        			]&#xd;
			}&#xd;
		],&#xd;
		&quot;isOnlineTreatment&quot;: false,&#xd;
		&quot;statusId&quot;: 1,&#xd;
		&quot;inactivatedBy&quot;: 1&#xd;
	},&#xd;
	&quot;disableProviderConcurrency&quot;: false,&#xd;
	&quot;ignoreProviderConflictingAppointments&quot;: true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="appointmentId Extractor (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">appointment_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to appointment id repo (BeanShell PostProcessor)" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters">${patient_id}</stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">// get variables from regular expression extractor 
appointment_id = vars.get(&quot;appointment_id&quot;);
appointment_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;appointment_id_booked_repo&quot;);

try
{
	appointment_id_int=Integer.parseInt(appointment_id);
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(appointment_id_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(appointment_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching appointment id&quot;);
}</stringProp>
                  <stringProp name="TestPlan.comments">Writes all the appointment IDs created to the appointment id repo</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments/${appointment_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/details/&lt;&lt;appointment_id&gt;&gt;/true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Appointments/details/${appointment_id}/true</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/raise-signalr-event?eventType=0" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;Dte&quot;:&quot;2021-01-11T00:00:00&quot;,&quot;Id&quot;:2936167,&quot;LId&quot;:12805,&quot;RwVn&quot;:null,&quot;SId&quot;:null}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments/raise-signalr-event?eventType=0</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[DUPLICATE] GET Appointments/details/&lt;&lt;appointment_id&gt;&gt;/true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Appointments/details/${appointment_id}/true</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Get Appointment SignalR calls (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Appointment for status change supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${appointment_status_change_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id,appointment_id,future_apppointment_status_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get appointment requests using SignalR (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Get appointments using SignalR throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Get appointment requests using SignalR throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_appointment_get_signalR})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET Appointment requests using SignalR (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/details/&lt;&lt;appointment_id&gt;&gt;/true" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Appointments/details/${appointment_id}/true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Patient appointments list view (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient appointments list view (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient appointments list  view throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient appointments list view throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_appointments_list_view})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Patient appointments list view browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-user-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-user-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-recall/get-patient-recalls/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient-recall/get-patient-recalls/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient appointment view (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/has-paused-payment-plans/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/has-paused-payment-plans/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-group/get/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-group/get/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments-grid/get-patient-appointments/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;FilterQuery&quot;:{},&quot;OrderBy&quot;:&quot;dateTimeUTC desc&quot;,&quot;PageIndex&quot;:1,&quot;PageSize&quot;:15}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments-grid/get-patient-appointments/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST  patient/get-patient-summary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-summary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-patient-insurances-with-hierarchies/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/get-patient-insurances-with-hierarchies/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-prompt/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-prompt/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Patient appointment detail view (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Appointment for status change supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${appointment_status_change_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id,appointment_id,future_apppointment_status_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Non RP Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${non_rp_patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">non_rp_patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient appointment detail view throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient appointment detail view throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_patient_appointment_detail_view})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient appointment detail view (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Patient appointment view look-up browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-operatories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-operatories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/lab-with-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/lab-with-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/getLocationTimeZoneOffset/5" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/getLocationTimeZoneOffset/5</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient appointment hover (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary?includeUnapplied=false" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${non_rp_patient_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-account-summary?includeUnapplied=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;non_rp_patient_id&gt;&gt;/list/true" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${non_rp_patient_id}/list/true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;non_rp_patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${non_rp_patient_id}/has-pending-medical-history-form</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/medical-alert/v1/get/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/medical-alert/v1/get/${non_rp_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-patient-summary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${non_rp_patient_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-summary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient appointment detail view (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  patient/basic-information/get/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/basic-information/get/${non_rp_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/count/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/count/${non_rp_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-snooze-dict/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-snooze-dict/${non_rp_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;non_rp_patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${non_rp_patient_id}/has-pending-medical-history-form</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments/${appointment_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET shortcall/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shortcall/${appointment_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-alerts-dict/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-alerts-dict/${non_rp_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/PendingFormsOrLettersSummary/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/PendingFormsOrLettersSummary/${non_rp_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${non_rp_patient_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-account-summary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] payment-tokenize/44/account-tokenized-payments/912023" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment-tokenize/44/account-tokenized-payments/912023</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  patient/get-patient-contact-info/&lt;&lt;non_rp_patient_id&gt;&gt;?isResponsibleParty=true" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-contact-info/${non_rp_patient_id}?isResponsibleParty=true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Appointment checkout (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
        <stringProp name="TestPlan.comments">Checkout by using the Rightclick functionality.</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Appointment for status change supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${appointment_status_change_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id,appointment_id,apppointment_checkedout_status_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Appointment status change throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Appointment status change throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_appointment_checkout})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Appointment status change (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Appointment checkout look-up browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-operatories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-operatories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/lab-with-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/lab-with-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-procedure-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-procedure-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET reputation-management-configuration" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">reputation-management-configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[DUPLICATE] GET api/v1.0/medical-history/&lt;&lt;patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${patient_id}/has-pending-medical-history-form</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/treatment-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT api/v1.0/appointments/&lt;&lt;appointment_id&gt;&gt;/checkout?overrideCareNoteValidation=false" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/appointments/${appointment_id}/checkout?overrideCareNoteValidation=false</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Version extractor (JSON Extractor)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.version</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/raise-signalr-event?eventType=3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;Id&quot;:&quot;${appointment_id}&quot;,&#xd;
	&quot;RwVn&quot;:&quot;${version}&quot;,&#xd;
	&quot;SId&quot;:&quot;${apppointment_checkedout_status_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/raise-signalr-event?eventType=3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/basic-information/get/&lt;&lt;patient_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/basic-information/get/${patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/count/&lt;&lt;patient_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">alert/count/${patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-snooze-dict/&lt;&lt;patient_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">alert/get-snooze-dict/${patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${patient_id}/has-pending-medical-history-form</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/${appointment_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET shortcall/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">shortcall/${appointment_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-alerts-dict/&lt;&lt;patient_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">alert/get-alerts-dict/${patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/PendingFormsOrLettersSummary/&lt;&lt;patient_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/PendingFormsOrLettersSummary/${patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/&lt;&lt;patient_id&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/patient-insurance/${patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/get-account-summary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] payment-tokenize/44/account-tokenized-payments/912023" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">payment-tokenize/44/account-tokenized-payments/912023</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/&lt;&lt;appointment_id&gt;&gt;/labs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">appointments/${appointment_id}/labs</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  patient/get-patient-contact-info/&lt;&lt;patient_id&gt;&gt;?isResponsibleParty=true" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/get-patient-contact-info/${patient_id}?isResponsibleParty=true</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User navigating to chart (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID with completed code and active claim supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_with_completed_codes_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">tx_procedure_id,active_claim_id,patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Navigation to chart (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Navigation to chart throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Navigation to chart throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_navigation_to_chart})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Navigation to chart (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Chart page load browser cached calls (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-chart-filter" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-all-chart-filter</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/treatment-types" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/treatment-types</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-materials" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-materials</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/tooth-chart-colors" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/tooth-chart-colors</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/carepanel " enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/carepanel</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET user/user-settings/get" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/user-settings/get</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-operatories" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-operatories</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/conditions" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/conditions</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-system-conditions" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-system-conditions</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET smartnote/get-all-clinical-template" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">smartnote/get-all-clinical-template</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET care-audit-rule" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">care-audit-rule</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/explosionCodes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/explosionCodes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/patterns" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/patterns</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/tooth-chart-colors" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/tooth-chart-colors</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/procedure-codes-with-settings" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/procedure-codes-with-settings</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-procedure-codes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-all-procedure-codes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-users" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-users</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-quadrants" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-quadrants</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/general/get-payments-general-miscellaneous" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/payments/general/get-payments-general-miscellaneous</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/providers/locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/providers/locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Navigation to chart (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/charts" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/charts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/&lt;&lt;patient_id&gt;&gt;/get-config" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/${patient_id}/get-config</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/medical-alert/get-medical-alerts/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/medical-alert/get-medical-alerts/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-recall/get-recall-procedures-grid/&lt;&lt;patient_id&gt;&gt;?includeGroupMembers=false" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient-recall/get-recall-procedures-grid/${patient_id}?includeGroupMembers=false</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/carepanel/tiles-with-details/2" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/carepanel/tiles-with-details/2</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/treatment-procedures" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/patient/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Appointments/patient/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/treatment-phases" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-phases</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/treatment-conditions" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-conditions</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/treatment-plans" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-plans</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;patient_id&gt;&gt;/existing-treatment-procedure" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/existing-treatment-procedure</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="(JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">treatment_procedure_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*].treatmentProcedureId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET smartnote/get-all-smartnotes/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">smartnote/get-all-smartnotes/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET prescriptions/get-all/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">prescriptions/get-all/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/&lt;&lt;patient_id&gt;&gt;/documents/get-all-clinical" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/${patient_id}/documents/get-all-clinical</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET periodontal-charting/get-exam-history/&lt;&lt;patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">periodontal-charting/get-exam-history/${patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/search" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;searchKey&quot;:1,&quot;searchValues&quot;:[${treatment_procedure_id_ALL}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claims/search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/&lt;&lt;patient_id&gt;&gt;/treatment-procedures/fee-recalculate" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures/fee-recalculate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User adding planned procedure code (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Procedure code ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${procedure_code_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">procedure_code_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Provider ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${provider_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${location_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Planned code addition without linking to appointment (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Planned code addition without linking to appointment throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Planned code addition without linking to appointment throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_planned_code_addition_without_linking_to_appointment})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Planned code addition browser cached calls(Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/service-types" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/service-types</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-icd-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-icd-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Planned code addition without linking to appointment (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/&lt;&lt;patient_id&gt;&gt;/treatment-procedures?isScheduled=false&amp;updateTreatingProvider=false&amp;retainExistingFee=false" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
	{&#xd;
		&quot;appointmentId&quot;: null,&#xd;
		&quot;billingProviderId&quot;: ${provider_id},&#xd;
		&quot;dateOfService&quot;: null,&#xd;
		&quot;groupId&quot;: &quot;349261ce-628e-4782-b10b-115f09ce6444&quot;,&#xd;
		&quot;locationId&quot;: ${location_id},&#xd;
		&quot;patientId&quot;: ${patient_id},&#xd;
		&quot;procedureCodeId&quot;: ${procedure_code_id},&#xd;
		&quot;providerId&quot;: ${provider_id},&#xd;
		&quot;quadrantId&quot;: null,&#xd;
		&quot;surface&quot;: {&#xd;
			&quot;m&quot;: 0,&#xd;
			&quot;i&quot;: 0,&#xd;
			&quot;o&quot;: 0,&#xd;
			&quot;d&quot;: 0,&#xd;
			&quot;b&quot;: 0,&#xd;
			&quot;f&quot;: 0,&#xd;
			&quot;l&quot;: 0&#xd;
		},&#xd;
		&quot;treatmentProcedureIcdcodes&quot;: [2],&#xd;
		&quot;tooth&quot;: &quot;26&quot;,&#xd;
		&quot;treatmentPhaseId&quot;: null,&#xd;
		&quot;treatmentPlanId&quot;: null&#xd;
	}&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures?isScheduled=false&amp;updateTreatingProvider=false&amp;retainExistingFee=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User completes a planned procedure code with a smart note  (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Planned treatment procedure ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${planned_tx_procedure_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">planned_rowversionstamp,planned_tx_procedure_id,planned_patient_id,planned_location_id,planned_provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file contains location ID, patient ID and procedure ID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Procedure code ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${procedure_code_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">procedure_code_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Provider ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${provider_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Completion of planned procedure codes (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Complete planned procedure codes throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Complete planned procedure codes throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_complete_planned_procedure})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Encode Row-version stamp (BeanShell Sampler)" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import java.lang.Exception;

try
{
String rowversionstamp_hex = vars.get(&quot;planned_rowversionstamp&quot;);
String rowversionstamp_hex_cleaned=rowversionstamp_hex.replace(&quot;0x&quot;,&quot;&quot;);
byte[] decodedHex = Hex.decodeHex(rowversionstamp_hex_cleaned);
byte[] rowversionstamp_base64 = Base64.encodeBase64(decodedHex);
vars.put(&quot;encoded_rowversionstamp&quot;, new String(rowversionstamp_base64));
}
catch(Exception e)
{
log.error(&quot;ERROR&quot;,e);
}


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Code completion with a smart note browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-user-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-user-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-icd-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-icd-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/&lt;&lt;patient_id&gt;&gt;/missing-address" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/${planned_patient_id}/missing-address</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Completion of planned procedure codes with a smart note (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/benefits/&lt;&lt;planned_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/benefits/${planned_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;planned_patient_id&gt;&gt;/treatment-procedures/icd-codes?procedureIds=&lt;&lt;planned_tx_procedure_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${planned_patient_id}/treatment-procedures/icd-codes?procedureIds=${planned_tx_procedure_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/&lt;&lt;planned_patient_id&gt;&gt;/treatment-procedures/billing-order-pre-validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;patientId&quot;:${patient_id},&quot;appointmentId&quot;:null,&quot;dateOfService&quot;:&quot;${generated_valid_date}&quot;,&quot;providerId&quot;:${provider_id},&quot;procedureCodeId&quot;:${procedure_code_id},&quot;tooth&quot;:null}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${planned_patient_id}/treatment-procedures/billing-order-pre-validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT clinical/&lt;&lt;planned_patient_id&gt;&gt;/treatment-procedures/complete/?updateTreatingProvider=false&amp;invalidBillingOrderProceedAnyway=false&amp;retainExistingFee=false&amp;updateBillingOrder=false&amp;skipAddressValidation=false [Throughput controlled]" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
	{&#xd;
		&quot;locationId&quot;: ${planned_location_id},&#xd;
		&quot;dateOfService&quot;: &quot;${generated_valid_date}&quot;,&#xd;
		&quot;patientId&quot;: ${planned_patient_id},&#xd;
		&quot;treatmentProcedureId&quot;: ${planned_tx_procedure_id},&#xd;
		&quot;rowVersionStamp&quot;: &quot;${encoded_rowversionstamp}&quot;,&#xd;
		&quot;treatmentProcedureIcdcodes&quot;: [],&#xd;
		&quot;billingProviderId&quot;: ${planned_provider_id}&#xd;
	}&#xd;
]&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${planned_patient_id}/treatment-procedures/complete/?updateTreatingProvider=false&amp;invalidBillingOrderProceedAnyway=false&amp;retainExistingFee=false&amp;updateBillingOrder=false&amp;skipAddressValidation=false</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[DUPLICATE] GET patient/patient-insurance/benefits/&lt;&lt;planned_patient_id}&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/benefits/${planned_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/care-note-settings/response" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/care-note-settings/response</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-basicinfo/&lt;&lt;planned_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-basicinfo/${planned_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;planned_patient_id&gt;&gt;/charts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${planned_patient_id}/charts</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/patient/&lt;&lt;planned_patient_id}&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Appointments/patient/${planned_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;planned_patient_id&gt;&gt;/treatment-procedures" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${planned_patient_id}/treatment-procedures</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODE] POST smartnote/save-smartnote/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;PatientID&quot;: ${planned_patient_id},&#xd;
	&quot;ProviderID&quot;: ${planned_provider_id},&#xd;
	&quot;LocationID&quot;: ${planned_location_id},&#xd;
	&quot;Version&quot;: 2,&#xd;
	&quot;NoteDate&quot;: &quot;2021-07-19&quot;,&#xd;
	&quot;NoteContent&quot;: &quot;&lt;p style=\&quot;font-family: Roboto,sans-serif; font-size: 12px;\&quot; data-mce-style=\&quot;font-family: Roboto,sans-serif; font-size: 12px;\&quot;&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Limited Exam&lt;/span&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Weight: TEST &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;PMH: TEST &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;PDH: PDH: POR &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Beh: &amp;lt;B4 Extremely Cooperative,B2 Somewhat uncooperative&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;CC: loose tooth/teeth,swelling    HCC: TEST &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;E/O: other   I/O: non significant &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Oral Hygiene: fair &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Radiographs:non per request (signed refusal) &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;DX: no caries noted,caries as noted &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Notes: Informed GMOC   of clinical findings and answered any questions. Discussed caries susceptibility and the effect of diet and importance of proper oral hygiene as it relates to prevention of caries.&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Next visit:Recall,OR Sedation   for 75 minutes &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Provider name: SG,DMD/TEST &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;Discussed Treatment Options: Treatment in the OR under GA (as per the tx plan). It was explained that tx plan may change based on x-ray and/or clinical findings at the time of tx. Estimated length of time of OR (dental treatment). &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=\&quot;font-size: 10pt;\&quot; data-mce-style=\&quot;font-size: 10pt;\&quot;&gt;OR reason:Medically/physically/mentally handicapped/compromised. &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&quot;,&#xd;
	&quot;IsDraft&quot;: false,&#xd;
	&quot;StatusId&quot;: 4,&#xd;
	&quot;NeedProviderAcceptance&quot;: false,&#xd;
	&quot;ClinicalTemplateID&quot;: 1035,&#xd;
	&quot;TemplateResponseMap&quot;: [&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50239,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1744,&#xd;
			&quot;SortOrder&quot;: 1,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0nY=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50240,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1718,&#xd;
			&quot;SortOrder&quot;: 2,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0nc=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50241,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1745,&#xd;
			&quot;SortOrder&quot;: 3,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0ng=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50242,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1747,&#xd;
			&quot;SortOrder&quot;: 4,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0nk=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50243,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1748,&#xd;
			&quot;SortOrder&quot;: 5,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0no=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50244,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1749,&#xd;
			&quot;SortOrder&quot;: 6,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0ns=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50245,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1751,&#xd;
			&quot;SortOrder&quot;: 7,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0nw=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50246,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1752,&#xd;
			&quot;SortOrder&quot;: 8,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0n0=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50247,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1753,&#xd;
			&quot;SortOrder&quot;: 9,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0n4=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50248,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1767,&#xd;
			&quot;SortOrder&quot;: 10,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0n8=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50249,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1771,&#xd;
			&quot;SortOrder&quot;: 11,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oA=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50250,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1715,&#xd;
			&quot;SortOrder&quot;: 12,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oE=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50251,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1764,&#xd;
			&quot;SortOrder&quot;: 13,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oI=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50252,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1773,&#xd;
			&quot;SortOrder&quot;: 14,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oM=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50253,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1740,&#xd;
			&quot;SortOrder&quot;: 15,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oQ=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50254,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1716,&#xd;
			&quot;SortOrder&quot;: 16,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oU=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50255,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1774,&#xd;
			&quot;SortOrder&quot;: 17,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oY=&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;TemplateResponseMapID&quot;: 50256,&#xd;
			&quot;ClinicalTemplateID&quot;: 1035,&#xd;
			&quot;ResponseID&quot;: 1741,&#xd;
			&quot;SortOrder&quot;: 18,&#xd;
			&quot;CreatedOn&quot;: &quot;2018-08-01T13:30:47.457Z&quot;,&#xd;
			&quot;CreatedBy&quot;: 12477,&#xd;
			&quot;RowVersionStamp&quot;: &quot;AAAAAFjm0oc=&quot;&#xd;
		}&#xd;
	],&#xd;
	&quot;RuleScript&quot;: null,&#xd;
	&quot;LinkedTo&quot;: [],&#xd;
	&quot;LinkedTooth&quot;: null,&#xd;
	&quot;LinkedArea&quot;: null,&#xd;
	&quot;AnswerList&quot;: {&#xd;
		&quot;1&quot;: &quot;TEST&quot;,&#xd;
		&quot;2&quot;: &quot;TEST&quot;,&#xd;
		&quot;3&quot;: &quot;POR&quot;,&#xd;
		&quot;4&quot;: &quot;B4 Extremely Cooperative,B2 Somewhat uncooperative&quot;,&#xd;
		&quot;5&quot;: &quot;loose tooth/teeth,swelling&quot;,&#xd;
		&quot;6&quot;: &quot;TEST&quot;,&#xd;
		&quot;7&quot;: &quot;other&quot;,&#xd;
		&quot;8&quot;: &quot;non significant&quot;,&#xd;
		&quot;9&quot;: &quot;fair&quot;,&#xd;
		&quot;10&quot;: &quot;non per request (signed refusal)&quot;,&#xd;
		&quot;11&quot;: &quot;no caries noted,caries as noted&quot;,&#xd;
		&quot;12&quot;: &quot;GMOC&quot;,&#xd;
		&quot;13&quot;: &quot;Recall,OR Sedation&quot;,&#xd;
		&quot;14&quot;: &quot;75 minutes&quot;,&#xd;
		&quot;15&quot;: &quot;SG,DMD&quot;,&#xd;
		&quot;16&quot;: &quot;TEST&quot;,&#xd;
		&quot;17&quot;: &quot;Treatment in the OR under GA (as per the tx plan). It was explained that tx plan may change based on x-ray and/or clinical findings at the time of tx. Estimated length of time of OR (dental treatment).&quot;,&#xd;
		&quot;18&quot;: &quot;Medically/physically/mentally handicapped/compromised.&quot;&#xd;
	},&#xd;
	&quot;AdditionalTextList&quot;: {&#xd;
		&quot;1&quot;: &quot;&quot;,&#xd;
		&quot;2&quot;: &quot;&quot;,&#xd;
		&quot;3&quot;: &quot;&quot;,&#xd;
		&quot;4&quot;: &quot;&quot;,&#xd;
		&quot;5&quot;: &quot;&quot;,&#xd;
		&quot;6&quot;: &quot;&quot;,&#xd;
		&quot;7&quot;: &quot;&quot;,&#xd;
		&quot;8&quot;: &quot;&quot;,&#xd;
		&quot;9&quot;: &quot;&quot;,&#xd;
		&quot;10&quot;: &quot;&quot;,&#xd;
		&quot;11&quot;: &quot;&quot;,&#xd;
		&quot;12&quot;: &quot;&quot;,&#xd;
		&quot;13&quot;: &quot;&quot;,&#xd;
		&quot;14&quot;: &quot;&quot;,&#xd;
		&quot;15&quot;: &quot;&quot;,&#xd;
		&quot;16&quot;: &quot;&quot;,&#xd;
		&quot;17&quot;: &quot;&quot;,&#xd;
		&quot;18&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;SelectedResponseItemList&quot;: {&#xd;
		&quot;1&quot;: [],&#xd;
		&quot;2&quot;: [],&#xd;
		&quot;3&quot;: [&#xd;
			23887&#xd;
		],&#xd;
		&quot;4&quot;: [&#xd;
			23890,&#xd;
			23892&#xd;
		],&#xd;
		&quot;5&quot;: [&#xd;
			23894,&#xd;
			23899&#xd;
		],&#xd;
		&quot;6&quot;: [],&#xd;
		&quot;7&quot;: [&#xd;
			23906&#xd;
		],&#xd;
		&quot;8&quot;: [&#xd;
			23909&#xd;
		],&#xd;
		&quot;9&quot;: [&#xd;
			23911&#xd;
		],&#xd;
		&quot;10&quot;: [&#xd;
			23955&#xd;
		],&#xd;
		&quot;11&quot;: [&#xd;
			23962,&#xd;
			23963&#xd;
		],&#xd;
		&quot;12&quot;: [&#xd;
			23814&#xd;
		],&#xd;
		&quot;13&quot;: [&#xd;
			23940,&#xd;
			23943&#xd;
		],&#xd;
		&quot;14&quot;: [&#xd;
			23970&#xd;
		],&#xd;
		&quot;15&quot;: [&#xd;
			55211&#xd;
		],&#xd;
		&quot;16&quot;: [],&#xd;
		&quot;17&quot;: [&#xd;
			23975&#xd;
		],&#xd;
		&quot;18&quot;: [&#xd;
			23870&#xd;
		]&#xd;
	},&#xd;
	&quot;AnswerResponseSource&quot;: {&#xd;
		&quot;1&quot;: 0,&#xd;
		&quot;2&quot;: 0,&#xd;
		&quot;3&quot;: 0,&#xd;
		&quot;4&quot;: 0,&#xd;
		&quot;5&quot;: 0,&#xd;
		&quot;6&quot;: 0,&#xd;
		&quot;7&quot;: 0,&#xd;
		&quot;8&quot;: 0,&#xd;
		&quot;9&quot;: 0,&#xd;
		&quot;10&quot;: 0,&#xd;
		&quot;11&quot;: 0,&#xd;
		&quot;12&quot;: 0,&#xd;
		&quot;13&quot;: 0,&#xd;
		&quot;14&quot;: 0,&#xd;
		&quot;15&quot;: 0,&#xd;
		&quot;16&quot;: 0,&#xd;
		&quot;17&quot;: 0,&#xd;
		&quot;18&quot;: 0&#xd;
	},&#xd;
	&quot;LinkedItems&quot;: []&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">smartnote/save-smartnote/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User opens code snapshot (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Planned treatment procedure ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${planned_tx_procedure_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">planned_rowversionstamp,planned_tx_procedure_id,planned_patient_id,planned_location_id,planned_provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file contains location ID, patient ID and procedure ID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Open code snapshot (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Open code snapshot throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Open code snapshot throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_open_code_snapshot})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open code snapshot (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Open code snapshot browser cached calls (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-fee-schedules" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-all-fee-schedules</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-icd-codes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-icd-codes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-patient-insurance?patientid=&lt;&lt;planned_patient_id&gt;&gt;&amp;type=All" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="patientid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">patientid</stringProp>
                      <stringProp name="Argument.value">${planned_patient_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                      <stringProp name="Argument.value">All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-patient-insurance</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-fee-schedules" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-fee-schedules</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/insurance-benefits/&lt;&lt;planned_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/insurance-benefits/${planned_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/basic-information/get/&lt;&lt;planned_patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/basic-information/get/${planned_patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/&lt;&lt;planned_patient_id&gt;&gt;/treatment-procedures/validate-fee/&lt;&lt;planned_tx_procedure_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${planned_patient_id}/treatment-procedures/validate-fee/${planned_tx_procedure_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/search" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;searchKey&quot;:1,&quot;searchValues&quot;:[${planned_tx_procedure_id}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claims/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/billing/get-code-transaction-history/&lt;&lt;planned_tx_procedure_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/billing/get-code-transaction-history/${planned_tx_procedure_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User directly adds completed code (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Procedure code ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${procedure_code_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">procedure_code_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Provider ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${provider_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${location_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Add completed procedure code (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add completed procedure code throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Add completed procedure code throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_add_completed_procedure_code})}</stringProp>
              <intProp name="calcMode">2</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Add completed procedure code browser cached calls (Once Only Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET clinical/service-types" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/service-types</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-icd-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-icd-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add completed procedure code (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /patient/&lt;&lt;patient_id&gt;&gt;/missing-address" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/${patient_id}/missing-address</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /clinical/&lt;&lt;patient_id&gt;&gt;/treatment-procedures/create-complete?updateTreatingProvider=false&amp;retainExistingFee=true&amp;skipAddressValidation=false [Throughput controlled]" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
	{&#xd;
		&quot;locationId&quot;: ${location_id},&#xd;
		&quot;appointmentId&quot;: null,&#xd;
		&quot;dateofService&quot;:&quot;${generated_valid_date}&quot;,&#xd;
		&quot;patientId&quot;: ${patient_id},&#xd;
		&quot;treatmentProcedureId&quot;: 0,&#xd;
		&quot;codeType&quot;: &quot;Standard Dental Code&quot;,&#xd;
		&quot;providerId&quot;: ${provider_id},&#xd;
		&quot;claimProviderId&quot;: null,&#xd;
		&quot;tooth&quot;: null,		&#xd;
		&quot;quadrantId&quot;: null,&#xd;
		&quot;surface&quot;: {&quot;m&quot;:0,&quot;i&quot;:0,&quot;o&quot;:0,&quot;d&quot;:0,&quot;b&quot;:0,&quot;f&quot;:0,&quot;l&quot;:0},&#xd;
		&quot;billingOrder&quot;: &quot;Bill to Dental Insurance&quot;,&#xd;
		&quot;procedureCodeId&quot;: ${procedure_code_id},&#xd;
		&quot;treatmentProcedureIcdcodes&quot;: [2]&#xd;
	}&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures/create-complete?updateTreatingProvider=false&amp;retainExistingFee=false&amp;skipAddressValidation=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Completed treatment procedure Id (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">completed_treatment_procedure_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.createdTreatmentProcedures..treatmentProcedureId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User links planned procedure code to a scheduled appointment (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Treatment procedure ID to link to appointment supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${tx_to_link_to_appointment_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">rowversionstamp,tx_procedure_id,appointment_id,patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">This file contains location ID, patient ID and procedure ID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Link treatment procedure to appointment (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Link treatment procedure to appointment throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Link treatment procedure to appointment throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_link_tx_procedure_to_appointment})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Encode Row-version stamp (BeanShell Sampler)" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import java.lang.Exception;

try
{
String rowversionstamp_hex = vars.get(&quot;rowversionstamp&quot;);
String rowversionstamp_hex_cleaned=rowversionstamp_hex.replace(&quot;0x&quot;,&quot;&quot;);
byte[] decodedHex = Hex.decodeHex(rowversionstamp_hex_cleaned);
byte[] rowversionstamp_base64 = Base64.encodeBase64(decodedHex);
vars.put(&quot;encoded_rowversionstamp&quot;, new String(rowversionstamp_base64));
}
catch(Exception e)
{
log.error(&quot;ERROR&quot;,e);
}


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Link treatment procedure to appointment (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/benefits/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/benefits/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments/${appointment_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/&lt;&lt;patient_id&gt;&gt;/treatment-procedures/link-appointment/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;patientId&quot;: ${patient_id},&#xd;
	&quot;appointmentId&quot;: ${appointment_id},&#xd;
	&quot;treatmentProcedures&quot;: [&#xd;
		{&#xd;
			&quot;treatmentProcedureId&quot;: ${tx_procedure_id},&#xd;
			&quot;rowVersionStamp&quot;: &quot;${encoded_rowversionstamp}&quot;&#xd;
		}&#xd;
	],&#xd;
	&quot;updateProvider&quot;: false,&#xd;
	&quot;retainExistingFee&quot;: false,&#xd;
	&quot;billingProviderId&quot;: null,&#xd;
	&quot;unlockFee&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures/link-appointment/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Clinical - User deletes completed code (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Completed treatment procedure ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${completed_tx_codes_for_deletion_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">completed_tx_patient_id,completed_tx_procedure_id,tx_procedure_row_version_stamp</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delete procedure code throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Delete procedure code throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_delete_procedure_code})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete procedure codes (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;searchKey&quot;:1,&quot;searchValues&quot;:[${completed_tx_patient_id}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">claims/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/benefits/&lt;&lt;completed_tx_patient_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/patient-insurance/benefits/${completed_tx_patient_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/&lt;&lt;completed_tx_patient_id&gt;&gt;/treatment-procedures/get-procedures-with-claim" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${completed_tx_procedure_id}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">clinical/${completed_tx_patient_id}/treatment-procedures/get-procedures-with-claim</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST clinical/&lt;&lt;completed_tx_patient_id&gt;&gt;/treatment-procedures/payment-recieved" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${completed_tx_procedure_id}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">clinical/${completed_tx_patient_id}/treatment-procedures/payment-recieved</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE clinical/&lt;&lt;completed_tx_patient_id&gt;&gt;/treatment-procedures" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;treatmentProcedureId&quot;:${completed_tx_procedure_id},&quot;rowVersionStamp&quot;:&quot;${tx_procedure_row_version_stamp}&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">clinical/${completed_tx_patient_id}/treatment-procedures</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patients/&lt;&lt;completed_tx_patient_id&gt;&gt;/payment-plan-by-treatment-procedure" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${completed_tx_procedure_id}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patients/${completed_tx_patient_id}/payment-plan-by-treatment-procedure</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views patient insurance list (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View patient insurance details (Transaction Controller) CS5.0" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View patient insurance list throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View patient insurance list throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_view_patient_insurance_list})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient insurance list (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="View patient insurance list browser cached calls (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-recall/get-patient-recalls/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient-recall/get-patient-recalls/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-overview/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-overview/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/get-account-summary" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[${patient_id_with_active_insurance}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-account-summary</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient insurance list (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-ins/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-insurance/get-ins/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Insurance Plan ID (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">plan_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].insurancePlanId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-group/get/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-group/get/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/has-paused-payment-plans/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/has-paused-payment-plans/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-patient-insurances-with-hierarchies/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-insurance/get-patient-insurances-with-hierarchies/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST insurance-plans/abp-settings" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[${insurance_plan_id}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">insurance-plans/abp-settings</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-prompt/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-prompt/${patient_id_with_active_insurance}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User selects patient insurance (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Select patient insurance (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Select patient insurance throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Select patient insurance throughput (Constant Throughput Timer)" enabled="true">
              <doubleProp>
                <name>throughput</name>
                <value>30.0</value>
                <savedValue>0.0</savedValue>
              </doubleProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Select patient insurance browser cached calls (Once only controller)" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-tables-of-allowances" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-tables-of-allowances</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-states" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-states</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/fee-table-settings" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/fee-table-settings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payor-type" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payor-type</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Select patient insurance (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/patient/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Appointments/patient/${patient_id_with_active_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-basicinfo/&lt;&lt;patient_id_with_active_insurance&gt;&gt;?includeResponsibleParty=false" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-basicinfo/${patient_id_with_active_insurance}?includeResponsibleParty=false</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-all-insurances/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/get-all-insurances/${patient_id_with_active_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-ins/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/get-ins/${patient_id_with_active_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-group/get/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-group/get/${patient_id_with_active_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/get-detail/&lt;&lt;patient_insurance_id&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/${patient_id_with_active_insurance}/get-detail/${patient_insurance_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Insurance Plan ID (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">plan_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.InsurancePlanModel.InsurancePlanID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET insurance-plans/&lt;&lt;plan_id&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">insurance-plans/${plan_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/plan/&lt;&lt;insurance_plan_id&gt;&gt;/amb-codes" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/plan/${insurance_plan_id}/amb-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET insurance-plans/&lt;&lt;plan_id&gt;&gt;/abp-setting" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">insurance-plans/${plan_id}/abp-setting</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/insurance-category-group/get-all" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/insurance-category-group/get-all</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-insurances/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/latest-revision?insurancePlanId=&lt;&lt;plan_id&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient-insurances/${patient_id_with_active_insurance}/latest-revision?insurancePlanId=${plan_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payor/get-carrier-setting" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payor/get-carrier-setting</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST setup/plan/getpreautho/&lt;&lt;insurance_plan_id&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/plan/getpreautho/${insurance_plan_id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] POST setup/insurance-category/get-all-insurance-categories/3" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;Filter&quot;:&quot;&quot;,&quot;Offset&quot;:50,&quot;SortBy&quot;:&quot;DisplayOrder&quot;,&quot;StartIndex&quot;:1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/insurance-category/get-all-insurance-categories/3</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payor/get-payor-address/&lt;&lt;payor_id&gt;&gt;" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payor/get-payor-address/${payor_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views patient claims (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Claim details supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${claim_details_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">claim_treating_provider_id,claim_id,claim_treatment_procedure_id,claim_primary_payor_id,claim_patient_id,claim_location_id,claim_procedure_id,claim_primary_patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View patient claims (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View patient claims throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View patient claims throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_view_patient_claims})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient claim grid (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="View a claim browser cached calls (Once only controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-user-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-user-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-recall/get-patient-recalls/&lt;&lt;claim_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient-recall/get-patient-recalls/${claim_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] ]GET setup/custom-status-flag/1/get-flags" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/custom-status-flag/1/get-flags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-prompt/&lt;&lt;claim_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-prompt/${claim_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient claim grid (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claim/check-batch-claim-transmission" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claim/check-batch-claim-transmission</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/has-paused-payment-plans/&lt;&lt;claim_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/has-paused-payment-plans/${claim_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims-grid/all-claims?patientId=&lt;&lt;claim_patient_id&gt;&gt;" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;FilterQuery&quot;:{&quot;ExcludeStatus&quot;:[&quot;Void&quot;]},&quot;OrderBy&quot;:&quot;ClaimID desc&quot;,&quot;PageIndex&quot;:1,&quot;PageSize&quot;:15}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claims-grid/all-claims?patientId=${claim_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claim/check-batch-claim-creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claim/check-batch-claim-creation</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-patient-insurances-with-hierarchies/&lt;&lt;claim_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-insurance/get-patient-insurances-with-hierarchies/${claim_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET claims/get-waiting-period" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claims/get-waiting-period</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View a claim (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="View a claim browser cached calls (Once only controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-quadrants" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-quadrants</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-claim-status-catagory-codes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-claim-status-catagory-codes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-claim-status-codes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-claim-status-codes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/claim-entity-identifier-codes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/claim-entity-identifier-codes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-states" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-states</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-placeof-service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-placeof-service</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-dentalentities" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-dentalentities</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/nea-payors" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/nea-payors</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View a claim (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET claim/dental/get-detail-by-id/&lt;&lt;claim_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claim/dental/get-detail-by-id/${claim_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PayorId extractor  (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">payorId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.PrimaryPolicyHolder.PayorID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProcedureCodeId (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">procedure_code_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.ChargeLines[0].ProcedureCodeID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PatientInsuranceID Extractor (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">patient_insurance_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.PrimaryPolicyHolder.PatientInsuranceID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET claim-history/all/&lt;&lt;claim_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claim-history/all/${claim_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET claim/get-patient-insurance?patientiD=&lt;&lt;claim_patient_id&gt;&gt;&amp;type=All" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="patientiD" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">patientiD</stringProp>
                      <stringProp name="Argument.value">${claim_patient_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                      <stringProp name="Argument.value">All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claim/get-patient-insurance</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET claim/get-preauth-numbers/&lt;&lt;claim_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claim/get-preauth-numbers/${claim_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/dental-claim-default/get-dental-claim-default" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/payments/dental-claim-default/get-dental-claim-default</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/get-waiting-period" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[${claim_id}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claims/get-waiting-period</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/search" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;searchKey&quot;:1,&quot;searchValues&quot;:[${claim_treatment_procedure_id}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">claims/search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views all claims grid (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient with Balance due insurance supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patients_with_balance_due_insurance_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">completed_tx_with_insurance_due,patient_id_with_balance_due_insurance,completed_tx_provider_id,completed_tx_claim_id,completed_tx_location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View all claims grid (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View all claims grid throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View all claims grid throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_view_all_claims_grid})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View all claims grid (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="View all claims grid browser cached calls  (Once only controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/claim-flag</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] GET setup/custom-status-flag/1/get-flags" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/custom-status-flag/1/get-flags</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/account/config/DENTICAL-CONFIG" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/account/config/DENTICAL-CONFIG</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/service/nea/settings" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/service/nea/settings</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claim/check-batch-claim-transmission" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claim/check-batch-claim-transmission</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET dentical/report-statuses/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">dentical/report-statuses/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims-grid/claims-count" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;FilterQuery&quot;:{&quot;FilterQuery&quot;:{}},&quot;ClaimType&quot;:&quot;Pending Submission&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claims-grid/claims-count</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims-grid/pending-submission" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;FilterQuery&quot;:{},&quot;OrderBy&quot;:&quot;ClaimID desc&quot;,&quot;PageIndex&quot;:1,&quot;PageSize&quot;:15}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claims-grid/pending-submission</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/get-waiting-period" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${completed_tx_claim_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claims/get-waiting-period</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views patient payment page (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient with Balance due patient supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patients_with_balance_due_patient_codes_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">completed_tx_with_patient_due,patient_id_with_balance_due_patient, completed_tx_location_id,completed_tx_provider_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View patient payment page (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View patient payment receipt throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View patient payment receipt throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_view_patient_payment_receipt})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient payment page (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Patient payments browser cached calls (Once only controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/getAllAdjustmentcodes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/getAllAdjustmentcodes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/payment-type/get-all-payment-type-details" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/payments/payment-type/get-all-payment-type-details</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-payment-category-additional-fields" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-payment-category-additional-fields</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/general/get-payments-general-miscellaneous" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/payments/general/get-payments-general-miscellaneous</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/payment-gateways" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/payments/payment-gateways</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-account-info" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-account-info</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-user-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-user-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-procedure-codes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-all-procedure-codes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/payment-gateways/location/&lt;&lt;completed_tx_location_id&gt;&gt;/terminals" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">setup/payments/payment-gateways/location/${completed_tx_location_id}/terminals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View patient payment page (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/patient/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Appointments/patient/${patient_id_with_balance_due_patient}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-basicinfo/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;?includeResponsibleParty=false" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-basicinfo/${patient_id_with_balance_due_patient}?includeResponsibleParty=false</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment-schedule/count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="patientId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">patientId</stringProp>
                      <stringProp name="Argument.value">${patient_id_with_balance_due_patient}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="statuses" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">statuses</stringProp>
                      <stringProp name="Argument.value">4</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment-schedule/count/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment/apply/patient-group-summary/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment/apply/patient-group-summary/${patient_id_with_balance_due_patient}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment/apply/get-account-payment-codes/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment/apply/get-account-payment-codes/${patient_id_with_balance_due_patient}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="(JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">treatment_procedure_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.${patient_id_with_balance_due_patient}[*].TreatmentProcedureID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment-schedule-procedure/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;/true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment-schedule-procedure/${patient_id_with_balance_due_patient}/true</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/get-patient-group-invoices/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;?showOnlyUnappliedCredits=false" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;OrderBy&quot;:&quot;ReceiptNumber desc&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment/get-patient-group-invoices/${patient_id_with_balance_due_patient}?showOnlyUnappliedCredits=false</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/basic-information/get/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/basic-information/get/${patient_id_with_balance_due_patient}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] GET payment/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;/account-summary/20210110183000" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">payment/${patient_id_with_balance_due_patient}/account-summary/20210110183000</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/billing/get-code-transaction-history" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">[${treatment_procedure_id_ALL}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/billing/get-code-transaction-history</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User applies payment for a patient (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient with Balance due patient supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patients_with_balance_due_patient_codes_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">completed_tx_with_patient_due,patient_id_with_balance_due_patient,completed_tx_provider_id,completed_tx_location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Apply patient payment (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Apply patient payment throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Apply patient payment throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_apply_patient_payment})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apply patient payment (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/processpayment" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{	&#xd;
	&quot;PaymentTypeID&quot;: 2,	&#xd;
	&quot;PatientID&quot;: ${patient_id_with_balance_due_patient},	&#xd;
	&quot;PaymentDate&quot;: &quot;${generated_valid_date}&quot;,	&#xd;
	&quot;AdjustmentCodeID&quot;: null,	&#xd;
	&quot;IsFlexiPay&quot;: null,	&#xd;
	&quot;LocationID&quot;: ${completed_tx_location_id},	&#xd;
	&quot;ReferenceNumber&quot;: &quot;777&quot;,	&#xd;
	&quot;Remarks&quot;: &quot;LOAD_TEST_ADDED&quot;,	&#xd;
	&quot;Source&quot;: 1,	&#xd;
	&quot;PlanID&quot;: null,	&#xd;
	&quot;TransactionPeriod&quot;: null,	&#xd;
	&quot;TransactionAmount&quot;: 10,	&#xd;
	&quot;TransactionType&quot;: null,	&#xd;
	&quot;TransactionCharge&quot;: 0,	&#xd;
	&quot;TransactionChargeAmount&quot;: 0,	&#xd;
	&quot;ProviderID&quot;: null,	&#xd;
	&quot;FirstName&quot;: &quot;Doe1253722&quot;,	&#xd;
	&quot;LastName&quot;: &quot;Jean&quot;,	&#xd;
	&quot;Address&quot;: {	&#xd;
		&quot;AddressDetailID&quot;: 0,	&#xd;
		&quot;AddressLine1&quot;: &quot;123 6th St.62461&quot;,	&#xd;
		&quot;AddressLine2&quot;: &quot;Melbourne62461&quot;,	&#xd;
		&quot;City&quot;: &quot;South Windsor&quot;,	&#xd;
		&quot;State&quot;: &quot;CT&quot;,	&#xd;
		&quot;ZipCode&quot;: &quot;32300-2222&quot;,	&#xd;
		&quot;RowVersionStamp&quot;: null	&#xd;
	},	&#xd;
	&quot;PaymentGatewayToken&quot;: &quot;&quot;,	&#xd;
	&quot;PaymentGatewayType&quot;: 2,	&#xd;
	&quot;PaymentGatewayMode&quot;: 2,	&#xd;
	&quot;PaymentTransactionID&quot;: 0,	&#xd;
	&quot;IsAdvance&quot;: false,	&#xd;
	&quot;IsPaymentSchedule&quot;: false,	&#xd;
	&quot;bypassPaymentGateway&quot;: false,	&#xd;
	&quot;IsIntegratedGateway&quot;: false	&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/processpayment</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Invoice ID extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">invoice_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.InvoiceId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Invoice ID row version stamp extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">invoice_id_row_version_stamp</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.RowVersionStamp</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment/apply/get-account-payment-codes/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/apply/get-account-payment-codes/${patient_id_with_balance_due_patient}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting procedure row version stamp extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_row_version_stamp</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${patient_id_with_balance_due_patient}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_patient_due}&apos;)].RowVersionStamp</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="LocationID (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">location_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${patient_id_with_balance_due_patient}[0].LocationId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/apply-patient-codes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;InvoiceID&quot;: [&#xd;
    {&#xd;
      &quot;value&quot;: ${invoice_id},&#xd;
      &quot;RowVersionStamp&quot;: &quot;${invoice_id_row_version_stamp}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;Source&quot;: &quot;Patient&quot;,&#xd;
  &quot;RemoveCollectionLabel&quot;: false,&#xd;
  &quot;CloseRemarks&quot;: &quot;&quot;,&#xd;
  &quot;AccountingProcedures&quot;: [&#xd;
    {&#xd;
      &quot;AccountingProcedureID&quot;: null,&#xd;
      &quot;CollectionAgencyID&quot;: null,&#xd;
      &quot;PatientID&quot;: ${patient_id_with_balance_due_patient},&#xd;
      &quot;PayorID&quot;: null,&#xd;
      &quot;TreatmentProcedureID&quot;: ${completed_tx_with_patient_due},&#xd;
      &quot;ProviderID&quot;: ${completed_tx_provider_id},&#xd;
      &quot;ProcedurePayorID&quot;: null,&#xd;
      &quot;BilledAmount&quot;: 286,&#xd;
      &quot;ContractualAmount&quot;: 186.66,&#xd;
      &quot;AllowedAmount&quot;: 99.34,&#xd;
      &quot;PatientPayable&quot;: 19.07,&#xd;
      &quot;InsurancePayable&quot;: 80.27,&#xd;
      &quot;BalanceDuePatient&quot;: 17.07,&#xd;
      &quot;BalanceDueInsurance&quot;: 80.27,&#xd;
      &quot;AppliedPayment&quot;: 2,&#xd;
      &quot;Payment&quot;: &quot;1.00&quot;,&#xd;
      &quot;ApplyTo&quot;: &quot;Patient&quot;,&#xd;
      &quot;CollectionPayment&quot;: 0,&#xd;
      &quot;Source&quot;: &quot;Patient&quot;,&#xd;
      &quot;Remarks&quot;: &quot;&quot;,&#xd;
      &quot;MarkedForAppeal&quot;: false,&#xd;
      &quot;Adjustments&quot;: [],&#xd;
      &quot;Index&quot;: 0,&#xd;
      &quot;RowVersionStamp&quot;: &quot;${accounting_procedure_row_version_stamp}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;CloseClaim&quot;: null,&#xd;
  &quot;ClaimID&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/apply-patient-codes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/get-patient-group-invoices/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;?showOnlyUnappliedCredits=false" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;FilterQuery&quot;:&quot;&quot;,&quot;OrderBy&quot;:&quot;ReceiptNumber desc&quot;,&quot;PageIndex&quot;:1,&quot;PageSize&quot;:100}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/get-patient-group-invoices/${patient_id_with_balance_due_patient}?showOnlyUnappliedCredits=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment-schedule-procedure/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;/true" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment-schedule-procedure/${patient_id_with_balance_due_patient}/true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment/apply/patient-group-summary/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/apply/patient-group-summary/${patient_id_with_balance_due_patient}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/billing/get-code-transaction-history" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[4932287,4932286,4932143,4932109,4932133,4932129,4932132,4932128,4932131,4932127,4932203,4932130,4932126,4932125,4932124]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/billing/get-code-transaction-history</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment/&lt;&lt;patient_id_with_balance_due_patient&gt;&gt;/account-summary/20210110183000" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/${patient_id_with_balance_due_patient}/account-summary/20210110183000</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views all insurance payment receipts  (bzm - Concurrency Thread Group) " enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Insurance receipts with unapplied supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${insurance_receipts_with_unapplied_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">insurance_receipts_with_unapplied,invoice_id_row_version_stamp,unapplied_receipt_payor_id,unapplied_receipt_location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient with Balance due insurance supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patients_with_balance_due_insurance_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">completed_tx_with_insurance_due,patient_id_with_balance_due_insurance,completed_tx_provider_id,completed_tx_claim_id,completed_tx_location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View all insurance payment receipts(Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View all insurance payment receipts (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${throughput_view_insurance_payments_reciepts}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View all insurance payment receipts (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="View all insurance payment receipts cache logic (Once only controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-icd-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-icd-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-materials" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-materials</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/general/get-auto-post-preferences" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payments/general/get-auto-post-preferences</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-claim-adjustment-group-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-claim-adjustment-group-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-claim-adjustment-reason-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-claim-adjustment-reason-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/payment-post-defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payments/payment-post-defaults</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/adjustments/auto-adjustment-setting" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/adjustments/auto-adjustment-setting</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/getAdjustmentcodes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/getAdjustmentcodes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-account-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-account-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-quadrants" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-quadrants</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] GETsetup/custom-status-flag/3/get-flags" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/custom-status-flag/3/get-flags</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/get-all-insurance-payments-list?isPending=true&amp;filterType=PayorID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Offset&quot;:20,&quot;Startindex&quot;:1,&quot;Filter&quot;:[{&quot;Key&quot;:&quot;Filter&quot;,&quot;Value&quot;:&quot;&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">payment/get-all-insurance-payments-list?isPending=true&amp;filterType=PayorID</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/apply/get-payment-patients?enableAdvancedSearch=false" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;ScrollRequest&quot;: {&#xd;
		&quot;Offset&quot;: 15,&#xd;
		&quot;StartIndex&quot;: 1,&#xd;
		&quot;Filter&quot;: [&#xd;
			{&#xd;
				&quot;Key&quot;: &quot;Filter&quot;,&#xd;
				&quot;Value&quot;: &quot;&quot;&#xd;
			}&#xd;
		]&#xd;
	},&#xd;
	&quot;IncludePatientsWithActiveClaim&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">payment/apply/get-payment-patients?enableAdvancedSearch=false</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User selects patient and applies insurance payment  (bzm - Concurrency Thread Group) " enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Insurance receipts with unapplied supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${insurance_receipts_with_unapplied_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">insurance_receipts_with_unapplied,invoice_id_row_version_stamp,unapplied_receipt_payor_id,unapplied_receipt_location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient with Balance due insurance supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patients_with_balance_due_insurance_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">completed_tx_with_insurance_due,patient_id_with_balance_due_insurance,completed_tx_provider_id,completed_tx_claim_id,completed_tx_location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Select patient and apply insurance payment throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Select patient and apply insurance payment throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${throughput_select_patient_and_apply_insurance_payment}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Select a patient in an insurance receipt (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Select a patient from the insruance receipt to apply insurance payment (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/billing/get-invoices-list" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;value&quot;:${insurance_receipts_with_unapplied}}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/billing/get-invoices-list</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payor/get-payor-basic/&lt;&lt;payor_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payor/get-payor-basic/${payor_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-alerts-dict/&lt;&lt;patient_id_with_balance_due_insurance&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-alerts-dict/${patient_id_with_balance_due_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-snooze-dict/&lt;&lt;patient_id_with_balance_due_insurance&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-snooze-dict/${patient_id_with_balance_due_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/apply/get-insurance-payment-codes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${patient_id_with_balance_due_insurance}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/apply/get-insurance-payment-codes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting procedure row version stamp extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_row_version_stamp</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].RowVersionStamp</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Billed amount extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_billed_amount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].BilledAmount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Contractual amount extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_contractual_amount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].ContractualAmount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Allowed amount extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_allowed_amount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].AllowedAmount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Patient payable extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_patient_payable</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].PatientPayable</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Insurance payable extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_insurance_payable</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].InsurancePayable</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Balance due patient extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_balance_due_patient</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].BalanceDuePatient</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Balance due insurance extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_balance_due_insurance</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].BalanceDueInsurance</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Applied payment extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_applied_payment</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].AppliedPayment</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Plan ID extractor (JSON Extractor)" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">accounting_procedure_plan_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.Procedures.${completed_tx_claim_id}[?(@.TreatmentProcedureID==&apos;${completed_tx_with_insurance_due}&apos;)].PrimaryPlanID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NIL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-overview/&lt;&lt;patient_id_with_balance_due_insurance&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-patient-overview/${patient_id_with_balance_due_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-account-summary/&lt;&lt;patient_id_with_balance_due_insurance&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/get-account-summary/${patient_id_with_balance_due_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/medical-alert/get-medical-alerts/&lt;&lt;patient_id_with_balance_due_insurance&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/medical-alert/get-medical-alerts/${patient_id_with_balance_due_insurance}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] POST patient/billing/get-code-transaction-history" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[3080279,7651422]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/billing/get-code-transaction-history</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Apply claim level payment (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET insurance-plans/&lt;&lt;insurance_plan_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">insurance-plans/${insurance_plan_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] GET lookups/location-timezone-base-utc-offset//14077" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">lookups/location-timezone-base-utc-offset//14077</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/apply-insurance-codes?overrideInsPaymentModCheck=true" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;InvoiceID&quot;: [&#xd;
		{&#xd;
			&quot;IsMigrated&quot;: false,&#xd;
			&quot;RowVersionStamp&quot;: &quot;${invoice_id_row_version_stamp}&quot;,&#xd;
			&quot;value&quot;: ${insurance_receipts_with_unapplied}&#xd;
		}&#xd;
	],&#xd;
	&quot;AccountingProcedures&quot;: [&#xd;
		{&#xd;
			&quot;AccountingProcedureID&quot;: 0,&#xd;
		  &quot;PatientID&quot;: &quot;${patient_id_with_balance_due_insurance}&quot;,&#xd;
		  &quot;ClaimID&quot;: &quot;${completed_tx_claim_id}&quot;,&#xd;
		  &quot;PayorID&quot;: null,&#xd;
		  &quot;TreatmentProcedureID&quot;: &quot;${completed_tx_with_insurance_due}&quot;,&#xd;
		  &quot;ProviderID&quot;: &quot;${completed_tx_provider_id}&quot;,&#xd;
		  &quot;BilledAmount&quot;: &quot;${accounting_procedure_billed_amount}&quot;,&#xd;
		  &quot;ContractualAmount&quot;: &quot;${accounting_procedure_contractual_amount}&quot;,&#xd;
		  &quot;AllowedAmount&quot;: &quot;${accounting_procedure_allowed_amount}&quot;,&#xd;
		  &quot;PatientPayable&quot;: &quot;${accounting_procedure_patient_payable}&quot;,&#xd;
		  &quot;InsurancePayable&quot;: &quot;${accounting_procedure_insurance_payable}&quot;,&#xd;
		  &quot;BalanceDuePatient&quot;: &quot;${accounting_procedure_balance_due_patient}&quot;,&#xd;
		  &quot;BalanceDueInsurance&quot;: &quot;${accounting_procedure_balance_due_insurance}&quot;,&#xd;
		  &quot;AppliedPayment&quot;: &quot;${accounting_procedure_applied_payment}&quot;,&#xd;
			&quot;Payment&quot;: &quot;1.00&quot;,&#xd;
			&quot;ActualPayment&quot;: &quot;1.00&quot;,&#xd;
			&quot;Remarks&quot;: &quot;&quot;,&#xd;
			&quot;MarkedForAppeal&quot;: false,&#xd;
			&quot;Adjustments&quot;: [],&#xd;
			&quot;ClaimDenials&quot;: [],&#xd;
			&quot;RowVersionStamp&quot;: &quot;${accounting_procedure_row_version_stamp}&quot;,&#xd;
			&quot;moreOrLess&quot;: &quot;more&quot;,&#xd;
			&quot;TotalCharge&quot;: 111,&#xd;
			&quot;Code&quot;: &quot;D0140&quot;,&#xd;
			&quot;CodeDescription&quot;: &quot;Limited Oral Eval Prob Focused&quot;,&#xd;
			&quot;ClaimIdentifier&quot;: 141686,&#xd;
			&quot;ClaimHierarchy&quot;: &quot;Primary&quot;,&#xd;
			&quot;ClaimStatus&quot;: &quot;Partially Paid&quot;,&#xd;
			&quot;BillingOrder&quot;: &quot;D&quot;,&#xd;
			&quot;isClicked&quot;: false,&#xd;
			&quot;DateOfServiceFrom&quot;: &quot;2017-10-09T00:00:00Z&quot;,&#xd;
			&quot;Tooth&quot;: &quot;&quot;,&#xd;
			&quot;ClaimChargeLineID&quot;: 398260,&#xd;
			&quot;Qty&quot;: 1,&#xd;
			&quot;TotalInsurancePaid&quot;: 18,&#xd;
			&quot;CodeID&quot;: 2,&#xd;
			&quot;TotalPatientPaid&quot;: 0,&#xd;
			&quot;PatientAdjustment&quot;: 0,&#xd;
			&quot;displayBalanceDuePatient&quot;: &quot;0.00&quot;,&#xd;
			&quot;displayBalanceDueInsurance&quot;: &quot;24.00&quot;,&#xd;
			&quot;highlightInsurancePayable&quot;: false,&#xd;
			&quot;highlightPatientPayable&quot;: false,&#xd;
			&quot;IndividualDeductibleApplied&quot;: null,&#xd;
			&quot;IndividualOrthoDeductibleApplied&quot;: null,&#xd;
			&quot;paymentStatus&quot;: &quot;Under Paid&quot;,&#xd;
			&quot;paymentDifference&quot;: 0,&#xd;
			&quot;paymentActionName&quot;: &quot;&quot;,&#xd;
			&quot;hasHigherOrderClaim&quot;: false,&#xd;
			&quot;adjustmentAmount&quot;: 0,&#xd;
			&quot;NetInsurancePayable&quot;: 24,&#xd;
			&quot;paymentAdjustmentType&quot;: &quot;Paid&quot;,&#xd;
			&quot;isProcedureLevelPosting&quot;: true,&#xd;
			&quot;useFeeregister&quot;: false,&#xd;
			&quot;CloseClaim&quot;: false,&#xd;
			&quot;PlanType&quot;: &quot;Indemnity&quot;,&#xd;
			&quot;PrimaryPlanID&quot;: 1636,&#xd;
			&quot;updateFeeRegister&quot;: false,&#xd;
			&quot;IsLineLevelPayment&quot;: true&#xd;
		}&#xd;
	],&#xd;
	&quot;Source&quot;: &quot;Insurance&quot;,&#xd;
	&quot;LocationId&quot;: ${unapplied_receipt_location_id},&#xd;
	&quot;ClaimTransferAmount&quot;: [],&#xd;
	&quot;ClaimDetails&quot;: [&#xd;
		{&#xd;
			&quot;ClaimID&quot;: &quot;${completed_tx_claim_id}&quot;,&#xd;
			&quot;CloseClaim&quot;: false,&#xd;
			&quot;CloseRemarks&quot;: &quot;Test&quot;,&#xd;
			&quot;usedDeductible&quot;: false&#xd;
		}&#xd;
	],&#xd;
	&quot;ProviderAdjustments&quot;: []&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">payment/apply-insurance-codes?overrideInsPaymentModCheck=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/get-all-insurance-payments-list?isPending=true&amp;filterType=PayorID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Offset&quot;:20,&quot;Startindex&quot;:1,&quot;Filter&quot;:[{&quot;Key&quot;:&quot;Filter&quot;,&quot;Value&quot;:&quot;&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">payment/get-all-insurance-payments-list?isPending=true&amp;filterType=PayorID</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/billing/get-invoices-list" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;value&quot;:${insurance_receipts_with_unapplied}}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/billing/get-invoices-list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment/apply/get-insurance-payment-codes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[${patient_id_with_balance_due_insurance}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">payment/apply/get-insurance-payment-codes</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HARDCODED] GET patient/billing/get-code-transaction-history" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[3080279,7651422]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/billing/get-code-transaction-history</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payor/get-payor-basic/&lt;&lt;unapplied_receipt_payor_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">setup/payor/get-payor-basic/${unapplied_receipt_payor_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views patient ledger (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View patient ledger (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View patient ledger throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View patient ledger throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_view_patient_ledger})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Ledger look-up cache logic (Once only controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-user-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-user-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-account-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-account-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient-recall/get-patient-recalls/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient-recall/get-patient-recalls/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ledger calls (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/ledger/get-patient-ledger/&lt;&lt;patient_id&gt;&gt;/&lt;&lt;time_zone_offset&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/ledger/get-patient-ledger/${patient_id}/${time_zone_offset}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment-schedule-procedure/&lt;&lt;patient_id&gt;&gt;/true" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment-schedule-procedure/${patient_id}/true</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/aging/&lt;&lt;patient_id&gt;&gt;/true/&lt;&lt;time_zone_offset&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="isGroupOverView" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">isGroupOverView</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/aging/${patient_id}/true/${time_zone_offset}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/has-paused-payment-plans/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/has-paused-payment-plans/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/get-patient-insurances-with-hierarchies/&lt;&lt;patient_id&gt;&gt;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/get-patient-insurances-with-hierarchies/${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET payment/apply/get-ledger-summaryGrid-appliedAmount/&lt;&lt;patient_id&gt;&gt;?&amp;isGroup=false&amp;startDate=01-13-1923,%206:29:59%20pm&amp;endDate=01-13-2023,%206:29:59%20pm" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="isGroup" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">isGroup</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment/apply/get-ledger-summaryGrid-appliedAmount/${patient_id}?&amp;isGroup=false&amp;startDate=01-13-1923,%206:29:59%20pm&amp;endDate=01-13-2023,%206:29:59%20pm</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Billing - User views completed procedures grid (bzm - Concurrency Thread Group)" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="View completed procedures grid (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="View patient ledger throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="View patient ledger throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_view_completed_procedures_grid})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Completed procedures grid look-up cache logic (Once only controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-procedure-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-procedure-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Completed procedures grid(Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claim/check-batch-claim-creation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claim/check-batch-claim-creation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/billing/get-completed-user-procedures?isActionRequired=false" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;FilterQuery&quot;:{},&quot;OrderBy&quot;:&quot;ServiceDate desc&quot;,&quot;PageIndex&quot;:1,&quot;PageSize&quot;:15}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/billing/get-completed-user-procedures?isActionRequired=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tx_ids</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[*].TreatmentProcedureId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST payment-schedule/treatment" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${tx_ids_ALL}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">payment-schedule/treatment</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST claims/search" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;searchKey&quot;:1,&quot;searchValues&quot;:[${tx_ids_ALL}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claims/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Data tear-down (Tear Down Thread Group)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="auth" elementType="Cookie" testname="auth">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login (Once Only Controller)" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
   &quot;Email&quot;:&quot;${user_name}&quot;,&#xd;
   &quot;Password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Appointment deletion (Loop Controller)" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Appointment deletion" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/appointments/${created_appointment_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Appointment deletion</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Created appointment ID supplier (CSV Data Set Config)" enabled="true">
              <stringProp name="filename">${test_plan_path}${appointment_id_booked_repo}</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">created_appointment_id</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="EXTERNAL APIS  - High throughput requests (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">5</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - External API" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountKey</stringProp>
              <stringProp name="Header.value">A0DED3B9-107F-4DC6-A494-9B501D772865</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">VendorKey</stringProp>
              <stringProp name="Header.value">B6186E9A-85E7-4CB3-98C6-9407FD15B0CE</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountId</stringProp>
              <stringProp name="Header.value">10001</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${users_with_login_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">user_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Employer id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${employer_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">employer_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fee schedule id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${fee_schedule_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">fee_schedule_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="External API - High throughput requests (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="External API throughput regulator - High throughput requests (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="External API  throughput - High throughput requests (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_external_api_high})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v1.0/fee-schedules/&lt;&lt;fee_schedule_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/fee-schedules/${fee_schedule_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="EXTERNAL APIS - Medium throughput requests (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">5</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - External API" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountKey</stringProp>
              <stringProp name="Header.value">A0DED3B9-107F-4DC6-A494-9B501D772865</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">VendorKey</stringProp>
              <stringProp name="Header.value">B6186E9A-85E7-4CB3-98C6-9407FD15B0CE</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountId</stringProp>
              <stringProp name="Header.value">10001</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${users_with_login_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">user_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Employer id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${employer_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">employer_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fee schedule id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${fee_schedule_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">fee_schedule_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="External API - Medium throughput requests (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="External API throughput regulator - Medium throughput requests (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="External API  throughput - Medium throughput requests (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_external_api_medium})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/insurances/&lt;&lt;patient_insurance_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/insurances/${patient_insurance_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/alerts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/alerts</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/payors/&lt;&lt;payor_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/payors/${payor_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/employers/&lt;&lt;employer_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/employers/${employer_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/insurance-plans/&lt;&lt;insurance_plan_id&gt;&gt;/fee-schedule-assignments" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/insurance-plans/${insurance_plan_id}/fee-schedule-assignments</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patient/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/insurances/&lt;&lt;patient_insurance_id&gt;&gt;/linked-insurances" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/insurances/${patient_insurance_id}/linked-insurances</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/insurances/&lt;&lt;patient_insurance_id&gt;&gt;/eligibility-limitation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/insurances/${patient_insurance_id}/eligibility-limitation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="EXTERNAL APIS - Low throughput requests (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">5</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - External API" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountKey</stringProp>
              <stringProp name="Header.value">A0DED3B9-107F-4DC6-A494-9B501D772865</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">VendorKey</stringProp>
              <stringProp name="Header.value">B6186E9A-85E7-4CB3-98C6-9407FD15B0CE</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountId</stringProp>
              <stringProp name="Header.value">10001</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${users_with_login_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">user_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Employer id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${employer_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">employer_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fee schedule id supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${fee_schedule_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">fee_schedule_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="External API - Low throughput requests (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="External API throughput regulator - Low throughput requests (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="External API  throughput - Low throughput requests (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_external_api_low})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/document-type" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/document-type</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/employers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/employers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/documents" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/documents</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/flags" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/flags</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/insurances" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/insurances</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/payors/&lt;&lt;payor_id&gt;&gt;/addresses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/payors/${payor_id}/addresses</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v1.0/users/&lt;&lt;user_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/users/${user_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id_with_active_insurance&gt;&gt;/insurances/&lt;&lt;patient_insurance_id&gt;&gt;/eligibility-response" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id_with_active_insurance}/insurances/${patient_insurance_id}/eligibility-response</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient Engagement - Save communication log (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">20</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">10</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient engagement uuid supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${pateng_uuid_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">uuid</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Save communication log throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Save communication log throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_save_comunication_log})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CampaignActivities/SaveCommunicationLog" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
   &quot;PatientId&quot;:&quot;616199&quot;,&#xd;
   &quot;FromAddress&quot;:&quot;TESTFROM&quot;,&#xd;
   &quot;To&quot;:&quot;TESTTO&quot;,&#xd;
   &quot;IdentificationType&quot;:&quot;Patient&quot;,&#xd;
   &quot;IdentificationId&quot;:&quot;616199&quot;,&#xd;
   &quot;GatewayId&quot;:null,&#xd;
   &quot;SendMedium&quot;:2,&#xd;
   &quot;CommunicationStatus&quot;:&quot;bluh&quot;,&#xd;
   &quot;TrackingId&quot;:&quot;F7664777-45F9-449B-B406-3C16300A4F1A&quot;,&#xd;
   &quot;Uuid&quot;:&quot;68AAE4A1-4AF6-4281-B324-F0D7BA1F4010&quot;,&#xd;
   &quot;UserResponse&quot;:&quot;Heyyyyyyyyy&quot;,&#xd;
   &quot;OptOut&quot;:1,&#xd;
   &quot;HasRead&quot;:0,&#xd;
   &quot;AppointmentBookingCount&quot;:&quot;0&quot;,&#xd;
   &quot;CreatedBy&quot;:1,&#xd;
   &quot;LastUpdatedBy&quot;:1,&#xd;
   &quot;AccountId&quot;:10001,&#xd;
   &quot;GatewayTypeId&quot;:&quot;2&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">pateng.qa.carestackqa.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">campaign-activity/save-communication-log</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient Engagement - Text handler (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">10</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">10</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient engagement uuid supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${pateng_uuid_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">uuid</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Text handler throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Text handler throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_text_handler})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST texthandler/&lt;&lt;UUID&gt;&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">blum</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Status</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ErrorCode</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">pateng.qa.carestackqa.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">texthandler/${uuid}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient Engagement - Recieve text response (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">10</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">10</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountId</stringProp>
              <stringProp name="Header.value">10001</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AuthKey</stringProp>
              <stringProp name="Header.value">ec99f9f931d6392561e3b058c74268e928e71c7da2dac8f5d6e544cca8d812c8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient engagement uuid supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${pateng_uuid_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">uuid</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Receive text response throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Insert text chat throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_receive_text_response})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET receive-textresponse" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">pateng.qa.carestackqa.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">receive-textresponse?from=1122112211&amp;to=3344334433&amp;text=PROBLEM</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient Engagement - campaign-activity/save-communication-log-queue (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">10</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">10</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountId</stringProp>
              <stringProp name="Header.value">10001</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AuthKey</stringProp>
              <stringProp name="Header.value">ec99f9f931d6392561e3b058c74268e928e71c7da2dac8f5d6e544cca8d812c8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient engagement uuid supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${pateng_uuid_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">uuid</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Insert text chat throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Insert text chat throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_insert_text_chat})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST campaign-activity/save-communication-log-queue" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
   &quot;TextChatLog&quot;:{ &#xd;
      &quot;PatientId&quot;:12742,&#xd;
      &quot;Direction&quot;:&quot;Out&quot;,&#xd;
      &quot;Message&quot;:&quot;TEST&quot;,&#xd;
      &quot;IsRead&quot;:1,&#xd;
      &quot;AccountId&quot;:10001,&#xd;
      &quot;CreatedOn&quot;:&quot;2020-01-30 12:59:57.5033333&quot;,&#xd;
      &quot;CreatedBy&quot;:129,&#xd;
      &quot;LastUpdatedOn&quot;:&quot;2020-01-30 12:59:57.5033333&quot;,&#xd;
      &quot;LastUpdatedBy&quot;:129&#xd;
   },&#xd;
   &quot;CommunicationItem&quot;:{ &#xd;
      &quot;PatientId&quot;:&quot;12742&quot;,&#xd;
      &quot;FromAddress&quot;:&quot;TESTFROM&quot;,&#xd;
      &quot;To&quot;:&quot;TESTTO&quot;,&#xd;
      &quot;IdentificationType&quot;:&quot;Patient&quot;,&#xd;
      &quot;IdentificationId&quot;:&quot;12742&quot;,&#xd;
      &quot;GatewayId&quot;:null,&#xd;
      &quot;SendMedium&quot;:2,&#xd;
      &quot;CommunicationStatus&quot;:&quot;bluh&quot;,&#xd;
      &quot;TrackingId&quot;:&quot;F7664777-45F9-449B-B406-3C16300A4F1A&quot;,&#xd;
      &quot;Uuid&quot;:&quot;F0F88E9A-851D-4CF1-89F9-8E03C43ECF68&quot;,&#xd;
      &quot;UserResponse&quot;:&quot;Heyyyyyyyyy&quot;,&#xd;
      &quot;OptOut&quot;:1,&#xd;
      &quot;HasRead&quot;:0,&#xd;
      &quot;AppointmentBookingCount&quot;:&quot;0&quot;,&#xd;
      &quot;CreatedBy&quot;:1,&#xd;
      &quot;LastUpdatedBy&quot;:1,&#xd;
      &quot;AccountId&quot;:10001,&#xd;
      &quot;GatewayTypeId&quot;:&quot;2&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">pateng.qa.carestackqa.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">campaign-activity/save-communication-log-queue</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Patient Engagement - Get text count (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">10</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AccountId</stringProp>
              <stringProp name="Header.value">10001</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">AuthKey</stringProp>
              <stringProp name="Header.value">ec99f9f931d6392561e3b058c74268e928e71c7da2dac8f5d6e544cca8d812c8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient engagement uuid supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${pateng_uuid_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">uuid</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Get text count throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Get text count throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_get_text_count})}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET textChat/get-text-count/" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">pateng.qa.carestackqa.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">textChat/get-text-count/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Scheduler - Appointment booking (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location  ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${location_operatory_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">location_id,starting_operatory_id,ending_operatory_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Non RP Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${non_rp_patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">non_rp_patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="false">
          <stringProp name="filename">${test_plan_path}${patient_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Appointment booking (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Scheduler slot incrementor (Counter)" enabled="true">
            <stringProp name="CounterConfig.start">${scheduler_start_slot}</stringProp>
            <stringProp name="CounterConfig.end">${scheduler_end_slot}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">slot_number</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Appointment booking throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Appointment booking throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_appointment_booking})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scheduler load (Simple Controller)" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/get-appointments-by-date-range" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;From&quot;: &quot;${month}/${day}/${random_year}&quot;,&#xd;
	&quot;To&quot;: &quot;${month}/${day}/${random_year}&quot;,&#xd;
	&quot;ShowReferralProvider&quot;: true,&#xd;
	&quot;LocationIds&quot;: [&#xd;
		${appointment_location_id}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">appointments/get-appointments-by-date-range</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Month (Random Variable)" enabled="true">
                <stringProp name="variableName">month</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <stringProp name="minimumValue">${random_month_min}</stringProp>
                <stringProp name="maximumValue">${random_month_max}</stringProp>
                <stringProp name="randomSeed"></stringProp>
                <boolProp name="perThread">false</boolProp>
              </RandomVariableConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Day (Random Variable)" enabled="true">
                <stringProp name="variableName">day</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <stringProp name="minimumValue">${random_day_min}</stringProp>
                <stringProp name="maximumValue">${random_day_max}</stringProp>
                <stringProp name="randomSeed"></stringProp>
                <boolProp name="perThread">false</boolProp>
              </RandomVariableConfig>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET production-calender/template?timestamp=AAAAAF9V8Dc%3D" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">production-calender/template?timestamp=AAAAAF9V8Dc%3D</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open appointment modal while booking appointment (Simple Controller)" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Open appointment modal while booking appointment browser cache logic (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-operatories" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-operatories</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/lab-with-locations" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/lab-with-locations</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open appointment modal while booking appointment (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET recent-patients/get" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">recent-patients/get</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST lookups/get-patients?PatientID=null&amp;type=P&amp;filterInactivePatients=false&amp;enableAdvancedSearch=false" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;Offset&quot;:15,&quot;StartIndex&quot;:0,&quot;Filter&quot;:&quot;&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">lookups/get-patients?PatientID=null&amp;type=P&amp;filterInactivePatients=false&amp;enableAdvancedSearch=false</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-group/get/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-group/get/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;non_rp_patient_id&gt;&gt;/has-pending-medical-history-form" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${non_rp_patient_id}/has-pending-medical-history-form</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/PendingFormsOrLettersSummary/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/PendingFormsOrLettersSummary/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/patient-insurance/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/patient-insurance/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/billing/get-billing-summary/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/billing/get-billing-summary/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/basic-information/get/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/basic-information/get/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RP ID (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">rp_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.ResponsiblePartyPatientID</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET patient/get-patient-contact-info/&lt;&lt;rp_id&gt;&gt;?isResponsibleParty=true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">patient/get-patient-contact-info/${rp_id}?isResponsibleParty=true</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/count/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">alert/count/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-snooze-dict/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">alert/get-snooze-dict/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET alert/get-alerts-dict/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">alert/get-alerts-dict/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/medical-history/&lt;&lt;non_rp_patient_id&gt;&gt;/has-pending-medical-history-form" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/v1.0/medical-history/${non_rp_patient_id}/has-pending-medical-history-form</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Book an appointment (Simple Controller)" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST Appointment booking (Simple Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/patient/get-queued-appointments/&lt;&lt;non_rp_patient_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments/patient/get-queued-appointments/${non_rp_patient_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;appointment&quot;: {&#xd;
    &quot;startSlotNo&quot;: ${slot_number},&#xd;
    &quot;slotLength&quot;: 1,&#xd;
    &quot;operatoryId&quot;: ${starting_operatory_id},&#xd;
    &quot;date&quot;: &quot;${appointment_date}&quot;,&#xd;
    &quot;patientId&quot;: ${non_rp_patient_id},&#xd;
    &quot;appointmentId&quot;: 0,&#xd;
    &quot;locationId&quot;: ${location_id},&#xd;
    &quot;productionTypeId&quot;: null,&#xd;
    &quot;notes&quot;: &quot;&quot;,&#xd;
    &quot;enableShortCall&quot;: false,&#xd;
    &quot;providers&quot;: [&#xd;
      {&#xd;
        &quot;specialityId&quot;: null,&#xd;
        &quot;providerId&quot;: ${appointment_provider_id},&#xd;
        &quot;slots&quot;: [&#xd;
          ${slot_number}&#xd;
        ],&#xd;
        &quot;providerIndex&quot;: 1,&#xd;
        &quot;specialityName&quot;: null&#xd;
      }&#xd;
    ],&#xd;
    &quot;status&quot;: &quot;Scheduled&quot;,&#xd;
    &quot;statusId&quot;: 28&#xd;
  },&#xd;
  &quot;disablePatientLocationCheck&quot;: true,&#xd;
  &quot;disableProviderConcurrency&quot;: true,&#xd;
  &quot;updatePatientLocation&quot;: false,&#xd;
  &quot;ignoreProviderConflictingAppointments&quot;: true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="appointmentId Extractor (JSON Extractor)" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">appointment_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to appointment id repo (BeanShell PostProcessor)" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters">${patient_id}</stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">// get variables from regular expression extractor 
appointment_id = vars.get(&quot;appointment_id&quot;);
appointment_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;appointment_id_booked_repo&quot;);

try
{
	appointment_id_int=Integer.parseInt(appointment_id);
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(appointment_id_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(appointment_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching appointment id&quot;);
}</stringProp>
                  <stringProp name="TestPlan.comments">Writes all the appointment IDs created to the appointment id repo</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET appointments/&lt;&lt;appointment_id&gt;&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments/${appointment_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Appointments/details/&lt;&lt;appointment_id&gt;&gt;/true" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Appointments/details/${appointment_id}/false</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST appointments/raise-signalr-event?eventType=0" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;Dte&quot;:&quot;2021-01-11T00:00:00&quot;,&quot;Id&quot;:2936167,&quot;LId&quot;:12805,&quot;RwVn&quot;:null,&quot;SId&quot;:null}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">appointments/raise-signalr-event?eventType=0</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for max. slot number (If Controller)" enabled="true">
            <stringProp name="TestPlan.comments"> If the max. slot is reahced the operatory is shifted to the next so that there are free slots to book appointments</stringProp>
            <stringProp name="IfController.condition">${__jexl3(${slot_number}==${scheduler_end_slot})}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Operatory ID incrementor (JSR223 Sampler)" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (vars.get(&quot;starting_operatory_id&quot;).toInteger()&lt;=vars.get(&quot;ending_operatory_id&quot;).toInteger())
{
String current_operatory_id=vars.get(&quot;starting_operatory_id&quot;).toInteger()+1
vars.put(&quot;starting_operatory_id&quot;,current_operatory_id)
log.info(&quot;Current operatory - ${current_operatory_id}&quot;);
}
else
{
ctx.getEngine().stopTest();	
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="The complete patient generation script  (setUp Thread Group)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">load_test_pool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${db_server_name} ;Database=${db_name}</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${db_password}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${db_user_name}</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear data files (JSR223 Sampler)" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">cookie_repo_path = vars.get(&quot;test_plan_path_complete_patient&quot;) + vars.get(&quot;cookie_repo&quot;);
org.apache.commons.io.FileUtils.writeStringToFile(new File(cookie_repo_path),&apos;&apos;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Login (Loop Controller)" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${number_of_logged_in_users}</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login credential supplier (CSV Data Set Config)" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">${test_plan_path}${logins}</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="variableNames">email,password</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Capture user login cookie for writing to repo (HTTP Cookie Manager)" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;Email&quot;:&quot;${email}&quot;,&quot;Password&quot;:&quot;${password}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write cookies to cookie repo (BeanShell PostProcessor)" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// get variables from regular expression extractor 
cookie = vars.get(&quot;COOKIE_Fuze.Dental&quot;);
cookie_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;cookie_repo&quot;);

// pass true if want to append to existing file  
FileWriter fstream = new FileWriter(cookie_repo_path, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(cookie);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;Email&quot;:&quot;carestackqa&quot;,&quot;Password&quot;:&quot;Abc@123&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write cookies to cookie repo (BeanShell PostProcessor)" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// get variables from regular expression extractor 
cookie = vars.get(&quot;COOKIE_Fuze.Dental&quot;);
cookie_repo_path = vars.get(&quot;test_plan_path_complete_patient&quot;) + vars.get(&quot;cookie_repo&quot;);

// pass true if want to append to existing file  
FileWriter fstream = new FileWriter(cookie_repo_path, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(cookie);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Data set-up queries (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Account related data set-up (Simple Controller)" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Account ID selection from URL (Simple Controller)" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Domain name extractor from url (BeanShell Sampler)" enabled="true">
                <stringProp name="BeanShellSampler.query">String url = vars.get(&quot;url&quot;);
String[] url_split = url.split(&quot;\\.&quot;);
vars.put(&quot;domain_name&quot;, url_split[0]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Selects account id from the domain name" enabled="true">
                <stringProp name="dataSource">load_test_pool</stringProp>
                <stringProp name="query">select top 1 accountID
from account
where domainName=&apos;${domain_name}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">account_id</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store query fetched account id to a variable, to share across all other data set-up queries (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">resultSet = vars.getObject(&quot;account_id&quot;)
result = new StringBuilder()
for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
    }
}
vars.put(&quot;account_id&quot;,result.toString())</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Billing close out date fetch (Simple Controller)" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Selects account id from the domain name" enabled="true">
                <stringProp name="dataSource">load_test_pool</stringProp>
                <stringProp name="query">select top 1 closeoutdate 
from billing.closeoutperiod
where accountid = ${account_id}
order by closeoutdate desc</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">billing_close_out_date</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store query fetched billing close out date to a variable (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">resultSet = vars.getObject(&quot;billing_close_out_date&quot;)
result = new StringBuilder()

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
    }
}

String[] billing_close_out_date_split = result.split()
vars.put(&quot;billing_close_out_date&quot;,billing_close_out_date_split[0].toString())
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store billing close out date to a variable (JSR223 PostProcessor)" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">String billing_close_out_date = vars.get(&quot;billing_close_out_date&quot;)
String current_date = &quot;${__time(yyyy-MM-dd,)}&quot;

billing_close_out_date_split = billing_close_out_date.split(&quot;-&quot;)
billing_close_out_date_year = billing_close_out_date_split[0]
billing_close_out_date_month = billing_close_out_date_split[1]
billing_close_out_date_day = billing_close_out_date_split[2]
current_date_split = current_date.split(&quot;-&quot;)
current_date_year = current_date_split[0]
current_date_month = current_date_split[1]
current_date_day = current_date_split[2]


generated_valid_date_year = current_date_year
generated_valid_date_month = current_date_month
//Generates a random number from 1 to current date day
generated_valid_date_day = Math.abs( new Random().nextInt() % current_date_day.toInteger() ) + 1 
generated_valid_date = generated_valid_date_month + &quot;/&quot; + generated_valid_date_day + &quot;/&quot; + generated_valid_date_year

vars.put(&quot;generated_valid_date&quot;,generated_valid_date)
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Valid random date generation between current date and billing close out date (JSR223 Sampler)" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//Store the valid generated date to a property, so that it can be re-used across thread groups
${__setProperty(prop_generated_valid_date,&quot;${generated_valid_date}&quot;)}
log.info(&quot;Generated valid date: &quot;+${__property(prop_generated_valid_date)})
</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Provider location data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 100 providers and their default location IDs (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 ud.ProviderID, ul.LocationID
FROM UserDetail ud
INNER JOIN Provider p
ON ud.AccountID = p.AccountID
AND ud.ProviderID = p.ProviderID
INNER JOIN UserLocation ul
ON ul.AccountID = ud.AccountID
AND ul.UserDetailID = ud.UserDetailID
WHERE ud.AccountID = ${account_id}
AND p.ProviderType = &apos;Dentist&apos;
AND ul.LocationID IS NOT NULL
AND p.IsActive = 1
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path_complete_patient&quot;) + vars.get(&quot;provider_location_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance plan - Payor related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 100 Insurance plan and Payor IDs (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 InsurancePlanID, PayorID
FROM InsurancePlan
WHERE accountid = ${account_id}
AND Status = &apos;Verified&apos;
AND InsuranceType = &apos;Dental&apos;
AND PlanType = &apos;PPO&apos;
AND RaiseClaim = &apos;Yes&apos;
ORDER BY NEWID()
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path_complete_patient&quot;) + vars.get(&quot;plan_payor_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Treatment procedure related data queries (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 1000 treatment procedure codes in proposed status with active providers for completion (JDBC Request)" enabled="false">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 1000 tp.patientId,tp.locationId,tp.providerId,tp.treatmentprocedureId, CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), tp.RowVersionStamp), 1)
from treatmentprocedure tp
join provider p on  p.accountId=tp.accountId
and p.providerId=tp.providerId
where p.accountId=${account_id}
and year(tp.proposeddate)&gt;2017
and tp.isPlanned=1
and p.isactive=1
and tp.isdeleted=0
and tp.billingOrder in (&apos;D&apos;)
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;planned_tx_procedure_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 200 completed treatment procedures with no claims raised for deletion (JDBC Request)" enabled="false">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 2 patientId, treatmentProcedureId, rowVersionStamp 
from treatmentprocedure
where accountid=${account_id}
and isCompleted=1
and IsDeleted=0
and dateOfServiceFrom&gt;=&apos;${billing_close_out_date}&apos;
and activeclaimId is null
--order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor) [ROW VERSION STAMP ENCODED]" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;completed_tx_codes_for_deletion_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    int i=0
    while (iter.hasNext()) {
    	   i++
        pair = iter.next()      

        if(i==3)
        {
        	String encodedRowversionStamp = pair.getValue().encodeBase64()
        	result.append(encodedRowversionStamp)
        }
        else
        {
        	result.append(pair.getValue())
        }
        result.append(&quot;,&quot;)
        
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select  20 procedure codes that are applicable to all teeth (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT TOP 100 pc.procedureCodeID
FROM procedurecode pc
INNER JOIN advancedcodesetting acs
ON pc.procedurecodeid = acs.procedurecodeid
WHERE pc.accountid = ${account_id}
AND pc.DefaultBillingOrder NOT IN (&apos;Do not Bill to Insurance&apos;,&apos;Bill to Medical Insurance&apos;)
AND pc.CDTCategory = &apos;Preventive&apos;
AND acs.teeth = &apos;&apos;
AND acs.MinSurfaceCount IS NULL
ORDER BY NEWID()
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path_complete_patient&quot;) + vars.get(&quot;procedure_code_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Location related data queries (Simple Controller)" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select locations for a particular account (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 20 locationId from location
where accountid=${account_id}
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;location_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Provider related data queries (Simple Controller)" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select active providers for a particular account (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">select top 100 providerId from provider
where accountid=${account_id}
and isactive=1
order by NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;provider_id_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance related data queries (Simple Controller)" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select insurance details for patients  with active insurance and has more than 35 treatment procedures in chart (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT top 500 pattxcount.payorid,pattxcount.patientId, pattxcount.insuranceplanId, pattxcount.patientinsuranceId
FROM
(
    SELECT tp.patientId,patins.patientinsuranceId, patins.insuranceplanId, ip.payorid, COUNT(tp.TreatmentProcedureID) AS txcount
    FROM treatmentprocedure tp
    JOIN patient p ON p.accountId = tp.accountId
    AND p.patientid = tp.patientid
    JOIN patientinsurance patins ON patins.accountId = p.accountId
    AND p.patientId = patins.patientId	   
    JOIN insuranceplan ip ON ip.accountId=patins.accountId
    AND patins.insuranceplanId=ip.insuranceplanId
    WHERE patins.accountId = ${account_id}   
    AND tp.isdeleted=0
    AND p.type LIKE (&apos;%P,I%&apos;)
    AND p.isActive=1
    AND patins.status=&apos;Active&apos;
    GROUP BY tp.patientID,patins.patientinsuranceId,patins.insuranceplanId,ip.payorid
) pattxcount
WHERE txcount &gt; 35
ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_insurance_detail_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Billing related data queries (Simple Controller)" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patients with Balance due insurance appearing in the patient list of  insurance receipts (JDBC Request)" enabled="true">
            <stringProp name="dataSource">load_test_pool</stringProp>
            <stringProp name="query">SELECT tp.treatmentprocedureId,tp.patientId,tp.providerId,tp.activeClaimId,tp.locationId
FROM TreatmentProcedure tp
JOIN
(
    SELECT TOP 500 ap.patientId,MAX(ap.procedureId) as procedureId
    FROM Billing.AccountingProcedure ap
    JOIN dbo.patient p
    ON ap.accountid = p.accountid
    AND ap.patientid = p.patientid
    WHERE ap.accountId = ${account_id}
    AND p.isActive=1
    AND ap.balanceDueInsurance &gt; 30
    AND ap.billingStatus in (&apos;Submitted (Payor)&apos;,&apos;Resubmitted (Payor)&apos;,&apos;Marked For Appeal&apos;,&apos;Partially Paid&apos;)
    GROUP BY ap.patientId
    ORDER BY NEWID()
) ap
ON ap.procedureId = tp.treatmentProcedureId
AND tp.accountId =  ${account_id}
AND tp.activeClaimId IS NOT NULL
AND tp.billingOrder = &apos;D&apos;
AND tp.isDeleted = 0</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">query_result_set</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path =vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patients_with_balance_due_insurance_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select patient and tx details with Balance due patient greater than 30 (JDBC Request)" enabled="true">
            <stringProp name="dataSource">load_test_pool</stringProp>
            <stringProp name="query">SELECT tp.treatmentprocedureid,tp.patientid,tp.providerid,tp.locationid
FROM treatmentprocedure tp
JOIN
(
    SELECT top 500 ap.patientid,MAX(ap.procedureid) as procedureid
    FROM billing.accountingprocedure  ap
    JOIN dbo.patient p
    ON ap.accountid=p.accountid
    AND ap.patientid=p.patientid
    WHERE ap.accountid = ${account_id}
    AND ap.balanceduepatient &gt; 30
    AND p.isActive=1
    GROUP BY ap.patientid
    ORDER BY NEWID()
) ap
ON ap.procedureid = tp.treatmentprocedureid
AND tp.accountid = ${account_id}
AND tp.BillingOrder = &apos;D&apos;
AND tp.isDeleted = 0</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">query_result_set</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patients_with_balance_due_patient_codes_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get claim details (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select claims details (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT top 100 claimdetails.ClaimId, claimdetails.ProcedureCodeId, claimdetails.treatmentprocedureid, claimdetails.PatientId, claimdetails.LocationId, claimdetails.TreatingProviderId, claimdetails.PrimaryPayorId, claimdetails.PrimaryPatientInsuranceId
FROM
(
    SELECT ccl.ClaimId, ccl.procedurecodeid, ccl.treatmentprocedureid, c.PatientId, c.LocationId, c.TreatingProviderId, c.PrimaryPayorId, c.PrimaryPatientInsuranceId, count(1) as cnt
    FROM claimchargeline ccl
    JOIN claim c
    ON c.ClaimId = ccl.ClaimId
    AND c.AccountId = ccl.AccountId
    WHERE ccl.AccountId = ${account_id}
    AND c.BillingOrder=&apos;D&apos;
    GROUP BY ccl.ClaimId, ccl.procedurecodeid, ccl.treatmentprocedureid, c.PatientId, c.LocationId, c.TreatingProviderId, c.PrimaryPayorId, c.PrimaryPatientInsuranceId 
) claimdetails
WHERE claimdetails.cnt = 1
ORDER By NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">query_result_set</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write query result-set to data repo (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">resultSet = vars.getObject(&quot;query_result_set&quot;)
result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;claim_details_repo&quot;)

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MIDWEST_Get insurance receipts wih unapplied credits (Simple Controller)" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get count of insurance receipts with unapplied amount (JDBC Request)" enabled="true">
              <stringProp name="dataSource">load_test_pool</stringProp>
              <stringProp name="query">SELECT invoiceId,locationId,payorId
FROM billing.invoice
WHERE accountId = ${account_id}
AND unappliedamount &gt; 10
AND payorid IS NOT NULL
AND isdeleted = 0
--ORDER BY NEWID()</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">insurance_receipts_with_unapplied</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get insurance receipts and count with unapplied amount  and write to a variable (JSR223 PostProcessor)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">arrList=vars.getObject(&quot;insurance_receipts_with_unapplied&quot;)
vars.put(&quot;num_of_unapplied_insurance_receipts&quot;,arrList.size().toString())

log.info(&quot;Number of unapplied receipts: &quot; + vars.get(&quot;num_of_unapplied_insurance_receipts&quot;))

result = new StringBuilder()
path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;insurance_receipts_with_unapplied_repo&quot;)

for (Object row : arrList ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(path), result.toString(), &quot;UTF-8&quot;)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check if there are sufficient insurance receipts with unapplied amount (If Controller)" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(${num_of_unapplied_insurance_receipts}&lt;10)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Add insurance receipts (Loop Controller)" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">5</stringProp>
              </LoopController>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID supplier (CSV Data Set Config)" enabled="true">
                  <stringProp name="filename">${test_plan_path}${location_id_repo}</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">location_id</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient Insurance detail supplier (CSV Data Set Config)" enabled="true">
                  <stringProp name="filename">${test_plan_path}${patient_insurance_detail_repo}</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">payor_id,patient_id_with_active_insurance,insurance_plan_id ,patient_insurance_id</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Add insurance receipt" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;PaymentTypeID&quot;: 14,&#xd;
  &quot;PatientID&quot;: null,&#xd;
  &quot;PaymentDate&quot;: ${__property(prop_generated_valid_date)},&#xd;
  &quot;AdjustmentCodeID&quot;: null,&#xd;
  &quot;CCNumber&quot;: &quot;&quot;,&#xd;
  &quot;CcOwnerName&quot;: &quot;&quot;,&#xd;
  &quot;Cvc&quot;: &quot;&quot;,&#xd;
  &quot;CardType&quot;: &quot;&quot;,&#xd;
  &quot;CardNumber&quot;: &quot;&quot;,&#xd;
  &quot;CheckNumber&quot;: &quot;&quot;,&#xd;
  &quot;ExpirationMonth&quot;: &quot;&quot;,&#xd;
  &quot;ExpirationYear&quot;: &quot;&quot;,&#xd;
  &quot;IsFlexiPay&quot;: &quot;false&quot;,&#xd;
  &quot;LbxAccountNumber&quot;: &quot;&quot;,&#xd;
  &quot;LbxRoutingNumber&quot;: &quot;&quot;,&#xd;
  &quot;LocationID&quot;: ${location_id},&#xd;
  &quot;PayorID&quot;: ${payor_id},&#xd;
  &quot;ReferenceNumber&quot;: &quot;777&quot;,&#xd;
  &quot;Remarks&quot;: &quot;LOAD_TEST_CREATED&quot;,&#xd;
  &quot;Source&quot;: &quot;Insurance&quot;,&#xd;
  &quot;PlanID&quot;: null,&#xd;
  &quot;TransactionPeriod&quot;: null,&#xd;
  &quot;TransactionAmount&quot;: &quot;1000.00&quot;,&#xd;
  &quot;TransactionType&quot;: &quot;&quot;,&#xd;
  &quot;ProviderID&quot;: &quot;&quot;,&#xd;
  &quot;FirstName&quot;: &quot;TEST&quot;,&#xd;
  &quot;LastName&quot;: &quot;&quot;,&#xd;
  &quot;Address&quot;: {&#xd;
    &quot;AddressDetailID&quot;: 0,&#xd;
    &quot;AddressLine1&quot;: &quot;P.O. BOX 14079&quot;,&#xd;
    &quot;AddressLine2&quot;: &quot;&quot;,&#xd;
    &quot;City&quot;: &quot;LEXINGTON&quot;,&#xd;
    &quot;State&quot;: &quot;KY&quot;,&#xd;
    &quot;ZipCode&quot;: &quot;40512&quot;,&#xd;
    &quot;RowVersionStamp&quot;: null&#xd;
  },&#xd;
  &quot;PaymentGatewayToken&quot;: &quot;&quot;,&#xd;
  &quot;RedirectUrl&quot;: &quot;&quot;,&#xd;
  &quot;PaymentTransactionID&quot;: 0&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">payment/processpayment</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InvoiceID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">invoice_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.InvoiceId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                    <stringProp name="Scope.variable"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to patient id repo (BeanShell PostProcessor)" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters">${patient_id}</stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">// get variables from regular expression extractor 
invoice_id = vars.get(&quot;invoice_id&quot;);
location_id = vars.get(&quot;location_id&quot;);
payor_id = vars.get(&quot;payor_id&quot;);
insurance_receipts_with_unapplied_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;insurance_receipts_with_unapplied_repo&quot;);
 try
{
	invoice_id=Integer.parseInt(invoice_id);
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(insurance_receipts_with_unapplied_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(invoice_id + &quot;,&quot; + payor_id + &quot;,&quot; + location_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching invoice id&quot;);
}</stringProp>
                    <stringProp name="TestPlan.comments">Writes all the patient IDs of created patients to the patient id repo</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="The complete patient generation script (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">10</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">30</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path_complete_patient}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="The complete patient generation loop (Loop Controller)" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1000</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Povider, Location ID supplier (CSV Data Set Config)" enabled="true">
            <stringProp name="filename">${test_plan_path_complete_patient}${provider_location_repo}</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">provider_id,location_id</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Plan, Payor ID supplier (CSV Data Set Config)" enabled="true">
            <stringProp name="filename">${test_plan_path_complete_patient}${plan_payor_repo}</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">plan_id,payor_id</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Procedure code ID supplier (CSV Data Set Config)" enabled="true">
            <stringProp name="filename">${test_plan_path_complete_patient}${procedure_code_id_repo}</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">procedure_code_id</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random number generator (Random Variable)" enabled="true">
            <stringProp name="variableName">random_number</stringProp>
            <stringProp name="outputFormat">000000</stringProp>
            <stringProp name="minimumValue">999</stringProp>
            <stringProp name="maximumValue">999999</stringProp>
            <stringProp name="randomSeed">777</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient creation (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Add patient" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;prefix&quot;: &quot;&quot;,&#xd;
  &quot;firstName&quot;:&quot;LOAD_TEST_PAT_${random_number}&quot;,&#xd;
  &quot;lastName&quot;:&quot;LOAD_TEST_PAT_${random_number}&quot;,&#xd;
  &quot;middleName&quot;: &quot;&quot;,&#xd;
  &quot;suffix&quot;: &quot;&quot;,&#xd;
  &quot;feeScheduleId&quot;: null,&#xd;
  &quot;dob&quot;: &quot;01/01/1987&quot;,&#xd;
  &quot;gender&quot;: &quot;Male&quot;,&#xd;
  &quot;nickName&quot;: &quot;&quot;,&#xd;
  &quot;maritalStatus&quot;: &quot;&quot;,&#xd;
  &quot;ssn&quot;: &quot;&quot;,&#xd;
  &quot;driverLicence&quot;: &quot;&quot;,&#xd;
  &quot;labels&quot;: [],&#xd;
  &quot;textNotification&quot;: false,&#xd;
  &quot;addressDetail&quot;: {&#xd;
		&quot;addressLine1&quot;: &quot;TEST&quot;,&#xd;
		&quot;addressLine2&quot;: &quot;TEST&quot;,&#xd;
		&quot;city&quot;: &quot;Newton Falls&quot;,&#xd;
		&quot;state&quot;: &quot;OH&quot;,&#xd;
		&quot;zipCode&quot;: &quot;44444-4444&quot;&#xd;
	},&#xd;
  &quot;postalNotification&quot;: false,&#xd;
  &quot;phoneWithExt&quot;: &quot;&quot;,&#xd;
  &quot;mobile&quot;: &quot;&quot;,&#xd;
  &quot;workPhoneWithExt&quot;: &quot;&quot;,&#xd;
  &quot;fax&quot;: &quot;&quot;,&#xd;
  &quot;preferredContactVoiceMedium&quot;: &quot;&quot;,&#xd;
  &quot;voiceNotification&quot;: false,&#xd;
  &quot;patientEmail&quot;: {&#xd;
		&quot;email&quot;: &quot;test@tt.tt&quot;,&#xd;
		&quot;revealEmail&quot;: true,&#xd;
		&quot;emailNotification&quot;: true,&#xd;
		&quot;receivePromotionEmailNotification&quot;: true,&#xd;
		&quot;allowPortalAccess&quot;: false&#xd;
  },&#xd;
  &quot;defaultLocationID&quot;: ${location_id},&#xd;
  &quot;isOrthoPatient&quot;: false,&#xd;
  &quot;isReferredPatient&quot;: false,&#xd;
  &quot;referralSource&quot;: &quot;&quot;,&#xd;
  &quot;referralSourceSubCategoryID&quot;: null,&#xd;
  &quot;referralPatientId&quot;: null,&#xd;
  &quot;referralProviderId&quot;: null,&#xd;
  &quot;practiceProviderID&quot;: null,&#xd;
  &quot;externalProviderID&quot;: null,&#xd;
  &quot;preferedProviderGender&quot;: &quot;Not Applicable&quot;,&#xd;
  &quot;relationshipToResponsibleParty&quot;: &quot;Self&quot;,&#xd;
  &quot;responsiblePartyPatientId&quot;: null,&#xd;
  &quot;defaultProviderId&quot;: null,&#xd;
  &quot;defaultHygenistId&quot;: null,&#xd;
  &quot;EmergencyContactNumber&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactPrefix&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactFirstName&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactLastName&quot;: &quot;&quot;,&#xd;
  &quot;EmergencyContactRelationship&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/add?skipDuplicateCheck=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: PatientID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">patient_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.PatientID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Patient insurance additon (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Add patient insurance" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;relationshipToPolicyHolder&quot;: &quot;Self&quot;,&#xd;
	&quot;identificationType&quot;: &quot;SubscriberID&quot;,&#xd;
	&quot;employerID&quot;: -1,&#xd;
	&quot;skipLoadPrimaryInshDetails&quot;: true,&#xd;
	&quot;waitingPeriodDays&quot;: 0,&#xd;
	&quot;addressDetail&quot;: {&#xd;
		&quot;AddressDetailID&quot;: 0,&#xd;
		&quot;AddressLine1&quot;: &quot;P O Box 2059&quot;,&#xd;
		&quot;AddressLine2&quot;: null,&#xd;
		&quot;City&quot;: &quot;Mechanicsberg&quot;,&#xd;
		&quot;State&quot;: &quot;PA&quot;,&#xd;
		&quot;ZipCode&quot;: &quot;17055-2059&quot;,&#xd;
		&quot;RowVersionStamp&quot;: null&#xd;
	},&#xd;
	&quot;phoneWithExt&quot;: &quot;(866) 261-4275&quot;,&#xd;
	&quot;activeDate&quot;: &quot;09/01/2019&quot;,&#xd;
	&quot;policyHolderFullName&quot;: &quot;LOAD_TEST_PAT_281609, LOAD_TEST_PAT_281609(1824269)&quot;,&#xd;
	&quot;ssn&quot;: &quot;&quot;,&#xd;
	&quot;effectiveDate&quot;: &quot;09/01/2019&quot;,&#xd;
	&quot;payorID&quot;: ${payor_id},&#xd;
	&quot;insuranceType&quot;: &quot;Dental&quot;,&#xd;
	&quot;relationsInsuranceID&quot;: null,&#xd;
	&quot;insurancePlanID&quot;: ${plan_id},&#xd;
	&quot;subscriberID&quot;: &quot;79879789&quot;,&#xd;
	&quot;patientId&quot;: &quot;${patient_id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">patient/patient-insurance/add?overRideDuplicateSsn=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: PatientInsuranceID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">patient_insurance_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to patient id repo (BeanShell PostProcessor)" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">${patient_id}</stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">// get variables from regular expression extractor 
patient_id = vars.get(&quot;patient_id&quot;);
patient_id_repo_path = vars.get(&quot;test_plan_path&quot;) + vars.get(&quot;patient_id_repo&quot;);
 try
{
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(patient_id_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(patient_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching patient id&quot;);
}</stringProp>
                <stringProp name="TestPlan.comments">Writes all the patient IDs of created patients to the patient id repo</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Add completed procedure code (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add completed treatment procedure to patient" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
	{&#xd;
		&quot;locationId&quot;: ${location_id},&#xd;
		&quot;appointmentId&quot;: null,&#xd;
		&quot;dateofService&quot;: ${__property(prop_generated_valid_date)},&#xd;
		&quot;patientId&quot;: ${patient_id},&#xd;
		&quot;treatmentProcedureId&quot;: 0,&#xd;
		&quot;codeType&quot;: &quot;Standard Dental Code&quot;,&#xd;
		&quot;providerId&quot;: ${provider_id},&#xd;
		&quot;claimProviderId&quot;: null,&#xd;
		&quot;tooth&quot;: &quot;&quot;,		&#xd;
		&quot;quadrantId&quot;: null,&#xd;
		&quot;surface&quot;: &quot;&quot;,&#xd;
		&quot;billingOrder&quot;: &quot;Bill to Dental Insurance&quot;,&#xd;
		&quot;procedureCodeId&quot;: ${procedure_code_id},&#xd;
		&quot;treatmentProcedureIcdcodes&quot;: []&#xd;
	}&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures/create-complete?updateTreatingProvider=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: TreatmentProcedureID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">treatment_procedure_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..treatmentProcedureId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: RowVersionStamp of completed procedure" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tx_procedure_row_version_stamp</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..rowVersionStamp</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Update fee of the completed code (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update the completed procedure fee to $200" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;feeDerivedFrom&quot;: 4,&#xd;
	&quot;rowVersionStamp&quot;: &quot;${tx_procedure_row_version_stamp}&quot;,&#xd;
	&quot;treatmentProcedureId&quot;: ${treatment_procedure_id},&#xd;
	&quot;treatmentProcedureFee&quot;: [&#xd;
		{&#xd;
			&quot;treatmentProcedureId&quot;: ${treatment_procedure_id},&#xd;
			&quot;patientEstimate&quot;: 100,&#xd;
			&quot;insuranceEstimate&quot;: 100,&#xd;
			&quot;rowVersionStamp&quot;: &quot;${tx_procedure_row_version_stamp}&quot;,&#xd;
			&quot;feeDerivedFrom&quot;: 4,&#xd;
			&quot;feeScheduleId&quot;: null,&#xd;
			&quot;tableOfAllowanceId&quot;: null,&#xd;
			&quot;feeRegisterCodeId&quot;: null,&#xd;
			&quot;ambProcedureCodeId&quot;: null,&#xd;
			&quot;insuranceHierarchy&quot;: 0,&#xd;
			&quot;patientInsuranceId&quot;: null,&#xd;
			&quot;individualDeductibleApplied&quot;: null,&#xd;
			&quot;shareOfCostApplied&quot;: null,&#xd;
			&quot;individualOrthoDeductibleApplied&quot;: null&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">clinical/${patient_id}/treatment-procedures/update-fee</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Raise a claim for the completed code (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Raise a claim for the completed treatment procedure" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[${treatment_procedure_id}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claim/generate-from-treatment-procedure-codes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get  claim number and charge line (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get claim number" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;FilterQuery&quot;: {},&#xd;
	&quot;OrderBy&quot;: &quot;ClaimID desc&quot;,&#xd;
	&quot;PageIndex&quot;: 1,&#xd;
	&quot;PageSize&quot;: 15&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claim/get-all-claims-grid?patientid=${patient_id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClaimID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">claim_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..ClaimID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get claim details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claim/dental/get-detail-by-id/${claim_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: Claim charge lines JSON" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">claim_charge_lines</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.ChargeLines</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_VALUE</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Submit the claim in Paper Based channel (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit claim in paper based channel and write patient ID to repo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;OtherCoverageInsuranceType&quot;: &quot;&quot;,&#xd;
	&quot;TypeOfTransaction&quot;: &quot;STATEMENTOFACTUALSERVICES&quot;,&#xd;
	&quot;ClaimAttachmentStatusOnResubmit&quot;: 0,&#xd;
	&quot;ClaimHierarchy&quot;: &quot;Primary&quot;,&#xd;
	&quot;PreAuthNumber&quot;: &quot;&quot;,&#xd;
	&quot;MissingTeeth&quot;: null,&#xd;
	&quot;DiagQualifier&quot;: &quot;&quot;,&#xd;
	&quot;OtherFee&quot;: &quot;0.00&quot;,&#xd;
	&quot;PlaceOfTreatmentCode&quot;: &quot;11&quot;,&#xd;
	&quot;SubscriberSignature&quot;: &quot;Signature on File&quot;,&#xd;
	&quot;SubscriberSignatureDate&quot;: &quot;2019-10-01&quot;,&#xd;
	&quot;IsOrtho&quot;: false,&#xd;
	&quot;OrthoDate&quot;: &quot;&quot;,&#xd;
	&quot;OrthoDuePeriod&quot;: null,&#xd;
	&quot;IsProsthoReplacement&quot;: false,&#xd;
	&quot;DateOfPriorPlacement&quot;: &quot;&quot;,&#xd;
	&quot;TreatmentResultingFrom&quot;: null,&#xd;
	&quot;AutoAccidentDate&quot;: &quot;&quot;,&#xd;
	&quot;AutoAccidentState&quot;: null,&#xd;
	&quot;ClaimID&quot;: ${claim_id},&#xd;
	&quot;NEAID&quot;: null,&#xd;
	&quot;Patient&quot;: {&#xd;
		&quot;PatientID&quot;: ${patient_id},&#xd;
		&quot;PatientAddress&quot;: {&#xd;
			&quot;AddressLine1&quot;: &quot;TEST&quot;,&#xd;
			&quot;AddressLine2&quot;: &quot;TEST&quot;,&#xd;
			&quot;City&quot;: &quot;Newton Falls&quot;,&#xd;
			&quot;State&quot;: &quot;OH&quot;,&#xd;
			&quot;ZipCode&quot;: &quot;44444-4444&quot;,&#xd;
			&quot;RowVersionStamp&quot;: null&#xd;
		},&#xd;
		&quot;PatientDOB&quot;: &quot;1987-01-01T00:00:00Z&quot;,&#xd;
		&quot;PatientGender&quot;: &quot;Male&quot;,&#xd;
		&quot;PatientIdentifier&quot;: 21520,&#xd;
		&quot;Name&quot;: &quot;LOAD_TEST_PAT_281609,LOAD_TEST_PAT_281609&quot;,&#xd;
		&quot;FirstName&quot;: &quot;LOAD_TEST_PAT_281609&quot;,&#xd;
		&quot;LastName&quot;: &quot;LOAD_TEST_PAT_281609&quot;,&#xd;
		&quot;PatientSignature&quot;: &quot;Signature on File&quot;,&#xd;
		&quot;PatientSignatureDate&quot;: &quot;2019-10-01&quot;,&#xd;
		&quot;PatientPhone&quot;: &quot;&quot;,&#xd;
		&quot;PatientHasAssignedBenefits&quot;: false,&#xd;
		&quot;MiddleName&quot;: &quot;&quot;,&#xd;
		&quot;Prefix&quot;: &quot;&quot;,&#xd;
		&quot;Suffix&quot;: &quot;&quot;,&#xd;
		&quot;PatientConditionDate&quot;: null,&#xd;
		&quot;PatientConditionQualifier&quot;: null&#xd;
	},&#xd;
	&quot;Location&quot;: {&#xd;
		&quot;LocationID&quot;: 245,&#xd;
		&quot;LocationAddress&quot;: {&#xd;
			&quot;AddressLine1&quot;: &quot;343 W. 10th St.&quot;,&#xd;
			&quot;AddressLine2&quot;: &quot;&quot;,&#xd;
			&quot;City&quot;: &quot;Erie&quot;,&#xd;
			&quot;State&quot;: &quot;PA&quot;,&#xd;
			&quot;ZipCode&quot;: &quot;16502-0000&quot;,&#xd;
			&quot;RowVersionStamp&quot;: null&#xd;
		},&#xd;
		&quot;LocationPhone&quot;: &quot;(814) 464-0960&quot;,&#xd;
		&quot;LocationCode&quot;: null,&#xd;
		&quot;LocationNPI&quot;: &quot;&quot;,&#xd;
		&quot;LocationQualifier&quot;: null,&#xd;
		&quot;Name&quot;: &quot;Merit Dental Erie&quot;&#xd;
	},&#xd;
	&quot;ClaimType&quot;: &quot;Dental&quot;,&#xd;
	&quot;ClaimFormType&quot;: &quot;ADA2012&quot;,&#xd;
	&quot;ClaimChannel&quot;: &quot;Paper Based&quot;,&#xd;
	&quot;ClaimIdentifier&quot;: 2,&#xd;
	&quot;ClaimStatus&quot;: &quot;Saved&quot;,&#xd;
	&quot;TotalCharge&quot;: &quot;312.00&quot;,&#xd;
	&quot;DentalEntity&quot;: {&#xd;
		&quot;Name&quot;: &quot;Merit Dental&quot;,&#xd;
		&quot;NPI&quot;: &quot;1851876445&quot;,&#xd;
		&quot;Address&quot;: {&#xd;
			&quot;AddressLine1&quot;: &quot;P.O. Box 90&quot;,&#xd;
			&quot;AddressLine2&quot;: &quot;&quot;,&#xd;
			&quot;City&quot;: &quot;Mondovi&quot;,&#xd;
			&quot;State&quot;: &quot;WI&quot;,&#xd;
			&quot;ZipCode&quot;: &quot;54755-0000&quot;,&#xd;
			&quot;RowVersionStamp&quot;: null&#xd;
		},&#xd;
		&quot;PhoneWithExt&quot;: &quot;(788) 946-5465&quot;,&#xd;
		&quot;NonNPIQualifier&quot;: &quot;EIN&quot;,&#xd;
		&quot;IsNonNPINumberEdited&quot;: null,&#xd;
		&quot;LicenceNo&quot;: &quot;&quot;,&#xd;
		&quot;InsuranceIdentifier&quot;: null,&#xd;
		&quot;NonNPINumber&quot;: &quot;47-2322200&quot;&#xd;
	},&#xd;
	&quot;Remarks&quot;: null,&#xd;
	&quot;HasEnclosures&quot;: false,&#xd;
	&quot;IsExternalAttachmentAvailable&quot;: false,&#xd;
	&quot;EAttachmentRequired&quot;: false,&#xd;
	&quot;BillingProvider&quot;: {&#xd;
		&quot;NonNPINumber&quot;: null,&#xd;
		&quot;InsuranceIdentifier&quot;: null,&#xd;
		&quot;IsNonNPINumberEdited&quot;: null,&#xd;
		&quot;LicenceNo&quot;: null,&#xd;
		&quot;NonNPIQualifier&quot;: null,&#xd;
		&quot;PhoneWithExt&quot;: null,&#xd;
		&quot;Address&quot;: null,&#xd;
		&quot;NPI&quot;: null,&#xd;
		&quot;Type&quot;: null,&#xd;
		&quot;Name&quot;: null,&#xd;
		&quot;ProviderID&quot;: null&#xd;
	},&#xd;
	&quot;TreatingProvider&quot;: {&#xd;
		&quot;ProviderID&quot;: ${provider_id},&#xd;
		&quot;Signature&quot;: null,&#xd;
		&quot;SignatureDate&quot;: &quot;2019-10-01&quot;,&#xd;
		&quot;NPI&quot;: &quot;9999999999&quot;,&#xd;
		&quot;LicenceNo&quot;: &quot;4654654645&quot;,&#xd;
		&quot;SpecialityCode&quot;: &quot;General Practice 1223G0001X&quot;,&#xd;
		&quot;InsuranceIdentifier&quot;: &quot;&quot;,&#xd;
		&quot;PhoneWithExt&quot;: null,&#xd;
		&quot;ProviderType&quot;: &quot;Dentist&quot;,&#xd;
		&quot;FirstName&quot;: &quot;Erin&quot;,&#xd;
		&quot;Name&quot;: &quot;842401: Sullivan, Erin&quot;,&#xd;
		&quot;LastName&quot;: &quot;Sullivan&quot;,&#xd;
		&quot;Prefix&quot;: &quot;&quot;,&#xd;
		&quot;Suffix&quot;: &quot;&quot;,&#xd;
		&quot;MiddleName&quot;: &quot;&quot;,&#xd;
		&quot;TaxonomyCode&quot;: &quot;1223G0001X&quot;,&#xd;
		&quot;NonNPIQualifier&quot;: &quot;EIN&quot;,&#xd;
		&quot;NonNPINumber&quot;: &quot;99-9999999&quot;,&#xd;
		&quot;IsNonNPINumberEdited&quot;: null,&#xd;
		&quot;Address&quot;: null,&#xd;
		&quot;IsActive&quot;: false,&#xd;
		&quot;ProviderLicenceDetails&quot;: [],&#xd;
		&quot;RowVersionStamp&quot;: null&#xd;
	},&#xd;
	&quot;PrimaryPolicyHolder&quot;: {&#xd;
		&quot;PlanID&quot;: ${plan_id},&#xd;
		&quot;PayorID&quot;: ${payor_id},&#xd;
		&quot;PayorName&quot;: &quot;AETNA&quot;,&#xd;
		&quot;PayorAddress&quot;: {&#xd;
			&quot;AddressLine1&quot;: &quot;P.o.box 14094&quot;,&#xd;
			&quot;AddressLine2&quot;: &quot;&quot;,&#xd;
			&quot;City&quot;: &quot;Lexington&quot;,&#xd;
			&quot;State&quot;: &quot;KY&quot;,&#xd;
			&quot;ZipCode&quot;: &quot;40512-0000&quot;,&#xd;
			&quot;RowVersionStamp&quot;: null&#xd;
		},&#xd;
		&quot;PolicyHolderID&quot;: 13388,&#xd;
		&quot;PolicyHolderName&quot;: &quot;LOAD_TEST_PAT_281609,LOAD_TEST_PAT_281609&quot;,&#xd;
		&quot;PolicyHolderAddress&quot;: {&#xd;
			&quot;AddressLine1&quot;: &quot;TEST&quot;,&#xd;
			&quot;AddressLine2&quot;: &quot;TEST&quot;,&#xd;
			&quot;City&quot;: &quot;Newton Falls&quot;,&#xd;
			&quot;State&quot;: &quot;OH&quot;,&#xd;
			&quot;ZipCode&quot;: &quot;44444-4444&quot;,&#xd;
			&quot;RowVersionStamp&quot;: null&#xd;
		},&#xd;
		&quot;PolicyHolderDOB&quot;: &quot;1987-01-01T00:00:00Z&quot;,&#xd;
		&quot;PolicyHolderGender&quot;: &quot;Male&quot;,&#xd;
		&quot;PolicyHolderIdentificationType&quot;: &quot;SubscriberID&quot;,&#xd;
		&quot;PolicyHolderIdentificationNumber&quot;: &quot;79879789&quot;,&#xd;
		&quot;PolicyHolderGroupNumber&quot;: &quot;0492245&quot;,&#xd;
		&quot;RelationToPolicyHolder&quot;: &quot;Self&quot;,&#xd;
		&quot;PatientInsuranceID&quot;: 8678,&#xd;
		&quot;PayorIdentifier&quot;: &quot;&quot;,&#xd;
		&quot;EmployerID&quot;: 167701,&#xd;
		&quot;PolicyHolderEmployerName&quot;: null,&#xd;
		&quot;PolicyHolderSignature&quot;: null,&#xd;
		&quot;PolicyHolderSignatureDate&quot;: null,&#xd;
		&quot;SupportsNEAAttachment&quot;: false,&#xd;
		&quot;EmployerName&quot;: &quot;HLW INTERNATIONA-ORTHO-PPO-RYE&quot;,&#xd;
		&quot;PolicyHolderFirstName&quot;: &quot;LOAD_TEST_PAT_281609&quot;,&#xd;
		&quot;PolicyHolderLastName&quot;: &quot;LOAD_TEST_PAT_281609&quot;,&#xd;
		&quot;PolicyHolderPrefix&quot;: &quot;&quot;,&#xd;
		&quot;PolicyHolderSuffix&quot;: &quot;&quot;,&#xd;
		&quot;PolicyHolderMiddleName&quot;: &quot;&quot;,&#xd;
		&quot;PlanName&quot;: &quot;AETNA_HLW INTERNATIONA-ORTHO-PPO-RYE_5_30_177326_21233&quot;,&#xd;
		&quot;PlanType&quot;: &quot;PPO&quot;,&#xd;
		&quot;PayorClaimChannel&quot;: 0,&#xd;
		&quot;PolicyHolderPhone&quot;: &quot;&quot;,&#xd;
		&quot;PayorClaimFormType&quot;: null,&#xd;
		&quot;RowVersionStamp&quot;: null&#xd;
	},&#xd;
	&quot;SecondaryPolicyHolder&quot;: {&#xd;
		&quot;PlanID&quot;: null,&#xd;
		&quot;PayorID&quot;: null,&#xd;
		&quot;PayorAddress&quot;: null,&#xd;
		&quot;PolicyHolderID&quot;: null,&#xd;
		&quot;PolicyHolderAddress&quot;: null,&#xd;
		&quot;PolicyHolderDOB&quot;: null,&#xd;
		&quot;PolicyHolderGender&quot;: null,&#xd;
		&quot;PolicyHolderIdentificationType&quot;: null,&#xd;
		&quot;PolicyHolderIdentificationNumber&quot;: null,&#xd;
		&quot;PolicyHolderGroupNumber&quot;: null,&#xd;
		&quot;RelationToPolicyHolder&quot;: null,&#xd;
		&quot;PatientInsuranceID&quot;: null,&#xd;
		&quot;PayorIdentifier&quot;: null,&#xd;
		&quot;EmployerID&quot;: null,&#xd;
		&quot;PolicyHolderSignature&quot;: null,&#xd;
		&quot;PolicyHolderSignatureDate&quot;: null,&#xd;
		&quot;EmployerName&quot;: null,&#xd;
		&quot;PolicyHolderName&quot;: null,&#xd;
		&quot;PolicyHolderFirstName&quot;: null,&#xd;
		&quot;PolicyHolderLastName&quot;: null,&#xd;
		&quot;PolicyHolderPrefix&quot;: null,&#xd;
		&quot;PolicyHolderSuffix&quot;: null,&#xd;
		&quot;PolicyHolderMiddleName&quot;: null,&#xd;
		&quot;PayorName&quot;: null,&#xd;
		&quot;PlanName&quot;: null,&#xd;
		&quot;PlanType&quot;: null,&#xd;
		&quot;PayorClaimChannel&quot;: 0,&#xd;
		&quot;PolicyHolderPhone&quot;: null,&#xd;
		&quot;SupportsNEAAttachment&quot;: false,&#xd;
		&quot;PayorClaimFormType&quot;: null,&#xd;
		&quot;RowVersionStamp&quot;: null&#xd;
	},&#xd;
	&quot;ChargeLines&quot;: ${claim_charge_lines},&#xd;
	&quot;Attachments&quot;: [],&#xd;
	&quot;SubmissionDate&quot;: null,&#xd;
	&quot;DentalClaimID&quot;: 1,&#xd;
	&quot;DiagCode1&quot;: &quot;&quot;,&#xd;
	&quot;DiagCode2&quot;: &quot;&quot;,&#xd;
	&quot;DiagCode3&quot;: &quot;&quot;,&#xd;
	&quot;DiagCode4&quot;: &quot;&quot;,&#xd;
	&quot;IsSSN&quot;: false,&#xd;
	&quot;ClaimControlNumber&quot;: null,&#xd;
	&quot;RemarkTemplateID&quot;: null,&#xd;
	&quot;ParentClaimID&quot;: null,&#xd;
	&quot;ErrorList&quot;: null,&#xd;
	&quot;IsClaimPartial&quot;: false,&#xd;
	&quot;ClaimFQI&quot;: &quot;10119-1001&quot;,&#xd;
	&quot;NeaAttachmentRequired&quot;: false,&#xd;
	&quot;ClaimRemarks&quot;: null,&#xd;
	&quot;BillingOrder&quot;: &quot;D&quot;,&#xd;
	&quot;PreAuthorizationIds&quot;: [],&#xd;
	&quot;RowVersionStamp&quot;: null,&#xd;
	&quot;IsAdvanceEdit&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">claim/dental/submit?ignoreDuplicatePlan=false</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Write to patient id repo (BeanShell PostProcessor)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">${patient_id}</stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">// get variables from regular expression extractor 
patient_id = vars.get(&quot;patient_id&quot;);
patient_id_repo_path = vars.get(&quot;test_plan_path_complete_patient&quot;) + vars.get(&quot;patient_id_repo&quot;);
 try
{
 	// pass true if want to append to existing file  
	FileWriter fstream = new FileWriter(patient_id_repo_path, true);
	BufferedWriter out = new BufferedWriter(fstream);
	out.write(patient_id);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();
}
catch(Exception ex)
{
	log.info(&quot;Write operation cancelled due to ERROR while fetching patient id&quot;);
}</stringProp>
                <stringProp name="TestPlan.comments">Writes all the patient IDs of created patients to the patient id repo</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Reports - User genrates report (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url_report}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url_report}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Report generation throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Report generation throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${throughput_report_generation}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Random report generation (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Random report generator (Simple Controller)" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Variable re-intialization (JSR223 Sampler)" enabled="true">
            <stringProp name="TestPlan.comments"> Variable re-intialization for looping Info and Page requests</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;DocumentReady&quot;, &quot;false&quot;)
vars.put(&quot;PageCount&quot;, 0)
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Report load calls (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Report load cache logic (Once Only Controller)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET ng1/app/reports/template/reports-template.html" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ng1/app/reports/template/reports-template.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET ng1/app/reports/reports.html" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ng1/app/reports/reports.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET ng1/app/Shared/Templates/footer.html" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ng1/app/Shared/Templates/footer.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET ng1/app/reports/dashboard/dashboard.html" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">ng1/app/reports/dashboard/dashboard.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/report/get-report-settings" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/report/get-report-settings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-account-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-account-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-providers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-payors" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-payors</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-specialties/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-specialties/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AppointmentStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">AppointmentStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET productiontype" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">productiontype</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-employers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-employers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-plans" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-plans</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-procedure-codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-procedure-codes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/getAdjustmentcodes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/getAdjustmentcodes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-referral-categories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-referral-categories</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-collection-agencies" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-collection-agencies</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-labs" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-labs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-all-labels" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-all-labels</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET setup/payments/payment-type/get-all-payment-type-details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/payments/payment-type/get-all-payment-type-details</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET referral-provider" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">referral-provider</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/reports/get-productionproviderdetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/reports/get-productionproviderdetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/reports/get-agingdetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/reports/get-agingdetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/reports/get-patienttrendsdetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/reports/get-patienttrendsdetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/reports/get-cancellationtrendsdetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/reports/get-cancellationtrendsdetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/reports/get-caseacceptancedetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/reports/get-caseacceptancedetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/reports/get-productiontrendsdetails" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/reports/get-productiontrendsdetails</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Report generation randomizer (Random Controller)" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Income allocation report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Income allocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Income allocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;IncomeAllocation&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Exclude Inactive Providers&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Provider&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;radios&quot;:&quot;All&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Income allocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Income allocation" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Income allocation" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Daily journal report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Daily journal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Daily journal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;DailyJournalReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Completed Codes&quot;,&#xd;
         &quot;Payments &amp; Adjustments&quot;,&#xd;
         &quot;Receipts&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Location&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Daily journal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Daily journal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Daily journal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment log report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Payment log" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Payment log" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;PaymentLogReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;PP-Payments&quot;,&#xd;
         &quot;PP-Transfers&quot;,&#xd;
         &quot;PP-Refunds&quot;,&#xd;
         &quot;IP-Payments&quot;,&#xd;
         &quot;IP-Transfers&quot;,&#xd;
         &quot;IP-Refunds&quot;,&#xd;
         &quot;CP&quot;,&#xd;
         &quot;OP-Adjust off&quot;,&#xd;
         &quot;OP-Special credits&quot;,&#xd;
         &quot;OP-Income reduction&quot;&#xd;
      ],&#xd;
      &quot;sortby&quot;:&quot;Trans. Date&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;collectionagencyId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;modeofpaymentId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Transaction Date&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Payment log" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Payment log" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Payment log" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Appointments report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Appointment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Appointment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;AppointmentsReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Include Notes&quot;&#xd;
      ],&#xd;
      &quot;sortby&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;productiontypeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;apptstatusId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Appointment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Appointment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Appointment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executive summary report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Executive summary report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Executive summary report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;ExecutiveSummaryBandReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Date of Service&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Executive summary report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Executive summary report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Executive summary report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient payment report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Payment log report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Payment log report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;PatientPaymentsBandReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Include Remarks&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;User&apos;s Name&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;modeofpaymentId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Transaction Date&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Payment log report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Payment log report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Payment log report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance payment report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Insurance payment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Insurance payment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;InsurancePaymentsBandReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Include Remarks&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;User&apos;s Name&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;modeofpaymentId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;receipttypeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Transaction Date&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Insurance payment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Insurance payment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Insurance payment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance pending procedures report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Insurance pending procedures report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Insurance pending procedures report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;InsurancePendingProcedures&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Completed Services not Billed to Insurance&quot;,&#xd;
         &quot;Claim Pending Codes&quot;,&#xd;
         &quot;Completed Services with New Insurance&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Location&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;insuranceplanId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;codeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Insurance pending procedures report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Insurance pending procedures report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Insurance pending procedures report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="New patients report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_New patients report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_New patients report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;NewPatientsReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_New patients report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_New patients report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_New patients report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Pending eligibility report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Pending eligibility report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Pending eligibility report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;PendingEligibilityVerificationReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;chosenDate&quot;:&quot;09/03/2018&quot;,&#xd;
      &quot;checks&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Carrier&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;insurancestatusId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;insurancetypeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;insurancehierarchyId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dayssincelasteligibilityId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;daysinceeligibilityvalue&quot;:0&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Pending eligibility report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${url_report}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Pending eligibility report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Pending eligibility report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url_report}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Reports (Single account | Random)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">15</stringProp>
        <stringProp name="RampUp">600</stringProp>
        <stringProp name="Steps">15</stringProp>
        <stringProp name="Hold">1200</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
        <stringProp name="TestPlan.comments"> Number of login credentials given in data file should not be lesser than the &quot;Target concurrency&quot; (number of users).</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller (Login)" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login (Transaction Controller)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
   &quot;Email&quot;:&quot;${email}&quot;,&#xd;
   &quot;Password&quot;:&quot;${password}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login credentials iterator (CSV Data Set Config)" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">${LoginData1}</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">email,password</stringProp>
              </CSVDataSet>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Get login context" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">setup/user/get-user-login-context</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: UserID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">UserID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.UserID</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Active profile alert count" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-active-profile-alert-count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Alerts" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">alert/get-alerts/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Recent patients" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">recent-patients/get</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Locations" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">user/locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Clockout status" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">timeclock/get-clockout-status/${UserID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Users" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">lookups/get-users</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Message count" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">message/get-message-count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Text count" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">communications/get-text-count/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reports" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Variable re-intialization (JSR223 Sampler)" enabled="true">
            <stringProp name="TestPlan.comments"> Variable re-intialization for looping Info and Page requests</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;DocumentReady&quot;, &quot;false&quot;)
vars.put(&quot;PageCount&quot;, 0)
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Report load calls (Transaction Controller)" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Report load (Once Only Controller)" enabled="true">
              <stringProp name="TestPlan.comments"> APIs triggered when the user takes reports</stringProp>
            </OnceOnlyController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Initial Report load requests" enabled="true">
                <stringProp name="TestPlan.comments"> APIs triggered while initial report load
</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Account info" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-account-info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Providers" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-providers</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Locations" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-locations</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Payors" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-payors</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Specialities" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-specialties/</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Custom status" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-custom-status</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Production types" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-production-types</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Employers" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-employers</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Plans" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-plans</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: All procedure codes" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-all-procedure-codes</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: All adjustment codes" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/getAllAdjustmentcodes</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Referral categories" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-referral-categories</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Collection agencies" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-collection-agencies</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Labs" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-labs</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: All labels" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">lookups/get-all-labels</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: All payment type details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">setup/payments/payment-type/get-all-payment-type-details</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Referral provider" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">referral-provider</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Aging details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/get-agingdetails</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Patient trend details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/get-patienttrendsdetails</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Case acceptance details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/get-caseacceptancedetails</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Production provider details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/get-productionproviderdetails</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Production trends details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/get-productiontrendsdetails</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Cancellation trends details" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/get-cancellationtrendsdetails</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Report Randomizer (Random Controller)" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Income allocation report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Income allocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Income allocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;IncomeAllocation&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Exclude Inactive Providers&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Provider&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;radios&quot;:&quot;All&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Income allocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Income allocation" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Income allocation" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Daily journal report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Daily journal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Daily journal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;DailyJournalReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Completed Codes&quot;,&#xd;
         &quot;Payments &amp; Adjustments&quot;,&#xd;
         &quot;Receipts&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Location&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Daily journal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Daily journal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Daily journal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment log report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Payment log" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Payment log" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;PaymentLogReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;PP-Payments&quot;,&#xd;
         &quot;PP-Transfers&quot;,&#xd;
         &quot;PP-Refunds&quot;,&#xd;
         &quot;IP-Payments&quot;,&#xd;
         &quot;IP-Transfers&quot;,&#xd;
         &quot;IP-Refunds&quot;,&#xd;
         &quot;CP&quot;,&#xd;
         &quot;OP-Adjust off&quot;,&#xd;
         &quot;OP-Special credits&quot;,&#xd;
         &quot;OP-Income reduction&quot;&#xd;
      ],&#xd;
      &quot;sortby&quot;:&quot;Trans. Date&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;collectionagencyId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;modeofpaymentId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Transaction Date&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Payment log" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Payment log" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Payment log" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Appointments report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Appointment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Appointment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;AppointmentsReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Include Notes&quot;&#xd;
      ],&#xd;
      &quot;sortby&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;productiontypeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;apptstatusId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Appointment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Appointment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Appointment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executive summary report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Executive summary report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Executive summary report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;ExecutiveSummaryBandReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Date of Service&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Executive summary report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Executive summary report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Executive summary report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Patient payment report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Payment log report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Payment log report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;PatientPaymentsBandReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Include Remarks&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;User&apos;s Name&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;modeofpaymentId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Transaction Date&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Payment log report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Payment log report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Payment log report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance payment report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Insurance payment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Insurance payment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;InsurancePaymentsBandReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Include Remarks&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;User&apos;s Name&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;modeofpaymentId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;receipttypeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;usernameId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dateAs&quot;:&quot;Transaction Date&quot;&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Insurance payment report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Insurance payment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Insurance payment report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insurance pending procedures report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Insurance pending procedures report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Insurance pending procedures report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;InsurancePendingProcedures&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
         &quot;Completed Services not Billed to Insurance&quot;,&#xd;
         &quot;Claim Pending Codes&quot;,&#xd;
         &quot;Completed Services with New Insurance&quot;&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Location&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;insuranceplanId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;codeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Insurance pending procedures report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Insurance pending procedures report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Insurance pending procedures report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="New patients report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_New patients report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_New patients report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;NewPatientsReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;checks&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_New patients report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_New patients report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Constant Timer)(Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_New patients report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Pending eligibility report" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Epoch timestamp generator (JSR223 Sampler)" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">epochTimeStamp=${__javaScript(new Date().getTime();)}
vars.put(&quot;timestamp&quot;, epochTimeStamp)</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time between reports (Constant Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report clients_Pending eligibility report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;timeStamp&quot;:${timestamp}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: ClientID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ClientID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.clientId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Report instances_Pending eligibility report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;report&quot;:&quot;PendingEligibilityVerificationReport&quot;,&#xd;
   &quot;parameterValues&quot;:{  &#xd;
      &quot;periodType&quot;:&quot;Custom&quot;,&#xd;
      &quot;customDates&quot;:[  &#xd;
         &quot;${ReportStartDate}&quot;,&#xd;
         &quot;${ReportEndDate}&quot;&#xd;
      ],&#xd;
      &quot;chosenDate&quot;:&quot;09/03/2018&quot;,&#xd;
      &quot;checks&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;groupby&quot;:&quot;Carrier&quot;,&#xd;
      &quot;singleGroupPerPage&quot;:false,&#xd;
      &quot;insurancestatusId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;locationId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;providerId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;insurancetypeId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;payorId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientflagId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;patientId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;insurancehierarchyId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;dayssincelasteligibilityId&quot;:[  &#xd;
&#xd;
      ],&#xd;
      &quot;daysinceeligibilityvalue&quot;:0&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: InstanceID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">InstanceID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.instanceId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Documents_Pending eligibility report" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;format&quot;:&quot;HTML5&quot;,&#xd;
   &quot;deviceInfo&quot;:{  &#xd;
      &quot;ContentOnly&quot;:true,&#xd;
      &quot;BasePath&quot;:&quot;https://${URL}/api/reports&quot;&#xd;
   },&#xd;
   &quot;useCache&quot;:true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">DocumentID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Info (While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${DocumentReady}==false,MYRESULT)}</stringProp>
                <stringProp name="TestPlan.comments"> Fetches the last page of the report to be loaded</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Info_Pending eligibility report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/info</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay for Info API call (Constant Timer)" enabled="true">
                    <stringProp name="ConstantTimer.delay">500</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: DocumentReady" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">DocumentReady</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.documentReady</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">77</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EXTRACT: LastPage" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">LastPage</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.pageCount</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">Nil</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Navigate to last page(While Controller)" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${PageCount}&lt;${LastPage},MYRESULT)}</stringProp>
              </WhileController>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Page load interval (Uniform Random Timer)" enabled="true">
                  <stringProp name="ConstantTimer.delay">${PageNavigationThinkTime}</stringProp>
                  <stringProp name="RandomTimer.range">500</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Page counter (Counter)" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${LastPage}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">PageCount</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Pages_Pending eligibility report" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${URL_REPORT}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">api/reports/clients/${ClientID}/instances/${InstanceID}/documents/${DocumentID}/pages/${PageCount}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Request surge x3 (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">100</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Request surge  (Transaction Controller)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Surge throughput regulator (Flow Control Action)" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Surge throughput (Constant Throughput Timer)" enabled="true">
              <stringProp name="throughput">${__jexl3(${__P(prop_throughput_modifier)}*${throughput_surge})}</stringProp>
              <intProp name="calcMode">4</intProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET utility/get-city-state-by-zip/444444444" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">utility/get-city-state-by-zip/444444444</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-employers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">lookups/get-employers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-plans" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">lookups/get-plans</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Iris - Text Chat Initial Load (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="TestPlan.comments">Called when Text Chat button is clicked in Iris</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations">20</stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${chat_url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${chat_url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${pateng_url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${pateng_url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_with_chat_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Location ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${location_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">location_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${user_id_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">user_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Text Chat Initial Load throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Text Chat Initial Load throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${throughput_TC_Initial_load}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET ?pmsBaseUrl=&lt;&lt;protocol&gt;&gt;%3A%2F%2F&lt;&lt;url&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${iris_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">?pmsBaseUrl=${protocol}%3A%2F%2F${url}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST  textChat/chat-history/&lt;&lt;patient_id&gt;&gt;/1/null/true" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;locationId&quot;:&quot;${location_id}&quot;,&#xd;
	&quot;offset&quot;:20,&#xd;
	&quot;startIndex&quot;:0,&#xd;
	&quot;patientId&quot;:&quot;${patient_id}&quot;,&#xd;
	&quot;mobile&quot;:null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">textChat/chat-history/${patient_id}/1/null/true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">For chats with valid patients (Added to Once only controller because this call is only called once when the patient chat is opened)</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/appointment-status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/appointment-status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing lookup API for Appointment Status.
</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/production-types" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/production-types</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing lookup API for production types
</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/procedure-codes?limit=0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/procedure-codes?limit=0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing lookup API for getting procedure codes</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET lookups/get-locations-details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">lookups/get-locations-details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NEW - Get All Patients List (Simple Controller)" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/internal/login-context [DUP?]" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${chat_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/internal/login-context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/internal/users-with-location" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${chat_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/internal/users-with-location</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/internal/permission" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${chat_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/internal/permission</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET configurations/0/0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">configurations/0/0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET campaign/get-recurring-campaigns-all" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">campaign/get-recurring-campaigns-all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/settings/&lt;&lt;user_id&gt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${chat_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/settings/${user_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET textChat/textchat-count" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">textChat/textchat-count</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET user/locations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/locations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/global-search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;IncludeInactivePatients&quot;: true,&#xd;
	&quot;PageIndex&quot;: 1,&#xd;
	&quot;SearchText&quot;: &quot;Je&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/global-search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST textChat/patients/-1/true [DUP?]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;offset&quot;:60,&#xd;
	&quot;startIndex&quot;:1,&#xd;
	&quot;filter&quot;:&quot;&quot;,&#xd;
	&quot;locationId&quot;:-1,&#xd;
	&quot;status&quot;:&quot;All&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">textChat/patients/-1/true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET textChat/unknown/patients/All" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">textChat/unknown/patients/All</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NEW Patient Info - Right Pane" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id&gt;&gt;/members" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the account members of the patient under consideration.</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id&gt;&gt;/flags" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id}/flags</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the flags of the patient under consideration.</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/939438,939439/documents/noncompleted/get-by-workflow-types/ [HARDCODED]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&quot;Form&quot;,&quot;Letter&quot;,&quot;MedicalHistoryForm&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/939438,939439/documents/noncompleted/get-by-workflow-types/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/patient-group/&lt;&lt;patient_id&gt;&gt;/appointments?startDate=&lt;&lt;appt_start_date&gt;&gt;&amp;endDate=&lt;&lt;appt_end_date&gt;&gt;,%205:25:55%20PM" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/patient-group/${patient_id}/appointments?startDate=${appt_start_date}&amp;endDate=${appt_end_date}%205:25:55%20PM</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/reschedule-queue/get-reshedule-queue" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;patientId&quot;:&quot;${patient_id}&quot;,&#xd;
	&quot;includeGroupMembers&quot;:true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/reschedule-queue/get-reshedule-queue</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the reschedule queue details of a patient </stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/recall/get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;patientId&quot;:&quot;${patient_id}&quot;,&#xd;
	&quot;includeGroupMembers&quot;:true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/recall/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the recall list of a patient </stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/patient-group/&lt;&lt;patient_id&gt;&gt;/treatments" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/patient-group/${patient_id}/treatments</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing API for fetching the treatment details of the patients under consideration.</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/patient-group/&lt;&lt;patient_id&gt;&gt;/accounting-procedure" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/patient-group/${patient_id}/accounting-procedure</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing API for fetching the pending balances of the patient account members under consideration</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="iris - Get Patient Chat History (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="TestPlan.comments">APIs fired on clicking the patient from inbox view</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${chat_url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${chat_url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${pateng_url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${pateng_url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path"></stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Patient ID supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${patient_id_with_chat_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">patient_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Patient Chat history throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Patient Chat history throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${throughput_patient_chat_history}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NEW - Get Chat History (Simple Controller)" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST  textChat/chat-history/&lt;&lt;patient_id&gt;&gt;/1/null/true" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;locationId&quot;:1,&#xd;
	&quot;offset&quot;:20,&#xd;
	&quot;startIndex&quot;:0,&#xd;
	&quot;patientId&quot;:${patient_id},&#xd;
	&quot;mobile&quot;:null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pateng_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">textChat/chat-history/${patient_id}/1/null/true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">For chats with valid patients</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/internal/login-context [DUP?]" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${chat_url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/internal/login-context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NEW Patient Info - Right Pane" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id&gt;&gt;/members" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id}/members</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the account members of the patient under consideration.</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/&lt;&lt;patient_id&gt;&gt;/flags" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/${patient_id}/flags</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the flags of the patient under consideration.</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST patient/939438,939439/documents/noncompleted/get-by-workflow-types/ [HARDCODED]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&quot;Form&quot;,&quot;Letter&quot;,&quot;MedicalHistoryForm&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">patient/939438,939439/documents/noncompleted/get-by-workflow-types/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/patient-group/&lt;&lt;patient_id&gt;&gt;/appointments?startDate=&lt;&lt;appt_start_date&gt;&gt;&amp;endDate=&lt;&lt;appt_end_date&gt;&gt;,%205:25:55%20PM" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/patient-group/${patient_id}/appointments?startDate=${appt_start_date}&amp;endDate=${appt_end_date}%205:25:55%20PM</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/reschedule-queue/get-reshedule-queue" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;patientId&quot;:&quot;${patient_id}&quot;,&#xd;
	&quot;includeGroupMembers&quot;:true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/reschedule-queue/get-reshedule-queue</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the reschedule queue details of a patient </stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST api/v1.0/recall/get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;patientId&quot;:&quot;${patient_id}&quot;,&#xd;
	&quot;includeGroupMembers&quot;:true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/recall/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Fetching the recall list of a patient </stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/patient-group/&lt;&lt;patient_id&gt;&gt;/treatments" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/patient-group/${patient_id}/treatments</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing API for fetching the treatment details of the patients under consideration.</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET api/v1.0/patients/patient-group/&lt;&lt;patient_id&gt;&gt;/accounting-procedure" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1.0/patients/patient-group/${patient_id}/accounting-procedure</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Existing API for fetching the pending balances of the patient account members under consideration</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="[TEMPLATE] &lt;&lt;MODULE_NAME&gt;&gt; - &lt;&lt;FUNCTIONALITY&gt;&gt;  (bzm - Concurrency Thread Group)" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${number_of_threads}</stringProp>
        <stringProp name="RampUp">${ramp_up_time_mins}</stringProp>
        <stringProp name="Steps">${number_of_threads}</stringProp>
        <stringProp name="Hold">${load_hold_time_mins}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Cookie supplier (CSV Data Set Config)" enabled="true">
          <stringProp name="filename">${test_plan_path}${cookie_repo}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">cookie</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie manager across thread groups (HTTP Cookie Manager)" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="Fuze.Dental" elementType="Cookie" testname="Fuze.Dental">
              <stringProp name="Cookie.value">${cookie}</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="profile" elementType="Cookie" testname="profile">
              <stringProp name="Cookie.value">1</stringProp>
              <stringProp name="Cookie.domain">${url}</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="&lt;&lt;FUNCTIONALITY&gt;&gt; throughput regulator (Flow Control Action)" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="&lt;&lt;FUNCTIONALITY&gt;&gt; throughput (Constant Throughput Timer)" enabled="true">
            <stringProp name="throughput">${&lt;&lt;THROUGHPUT_VARIABLE&gt;&gt;}</stringProp>
            <intProp name="calcMode">4</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
